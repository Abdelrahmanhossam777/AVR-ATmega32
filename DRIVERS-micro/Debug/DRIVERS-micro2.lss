
DRIVERS-micro2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00005e96  00005f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080019e  0080019e  00006068  2**0
                  ALLOC
  3 .stab         00005da8  00000000  00000000  00006068  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d9b  00000000  00000000  0000be10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000dbab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000df3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00010347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000116be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00012a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00012d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_1>
       8:	0c 94 1b 2d 	jmp	0x5a36	; 0x5a36 <__vector_2>
       c:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2a 2e 	jmp	0x5c54	; 0x5c54 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <main>
      8a:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c7 2e 	jmp	0x5d8e	; 0x5d8e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c4 2e 	jmp	0x5d88	; 0x5d88 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e0 2e 	jmp	0x5dc0	; 0x5dc0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e5 58       	subi	r30, 0x85	; 133
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <WDT_vidInit>:
/*To disable the WDT the bit WDTOE should be on before disabling the WDT*/



extern void WDT_vidInit(WDT_TimeOut TimeOut)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
	WDTCR |= (1<<WDE_bit);
     e04:	a1 e4       	ldi	r26, 0x41	; 65
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e4       	ldi	r30, 0x41	; 65
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	8c 93       	st	X, r24
	WDTCR |= TimeOut;
     e12:	a1 e4       	ldi	r26, 0x41	; 65
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e4       	ldi	r30, 0x41	; 65
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	90 81       	ld	r25, Z
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	89 2b       	or	r24, r25
     e20:	8c 93       	st	X, r24

}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <WDT_vidRefresh>:
extern void WDT_vidRefresh(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62

}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <WDT_vidTurnOff>:

extern void WDT_vidTurnOff(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	 * 1st write one to WDTOE and WDE at the same operation
	 * 2nd  after 4 cycles write zero WDE */


	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE_bit) | (1<<WDE_bit);
     e40:	e1 e4       	ldi	r30, 0x41	; 65
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	88 e1       	ldi	r24, 0x18	; 24
     e46:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     e48:	e1 e4       	ldi	r30, 0x41	; 65
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	10 82       	st	Z, r1
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <UART_Init>:



//============================================================================================
extern void UART_Init (void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the Rx pin to be input*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>

	/* Configure the Tx pin as output*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	/*  Store the low byte of the UBBR*/
	UBRRL =  (u8) MyUBRR;
     e70:	e9 e2       	ldi	r30, 0x29	; 41
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	83 e3       	ldi	r24, 0x33	; 51
     e76:	80 83       	st	Z, r24

	/*  Store the High byte of the UBBR*/
	UBRRH = (u8)((MyUBRR)>>8);
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	10 82       	st	Z, r1

	/* Configuration of UCSRnA Register  */
	UCSRnA= ( (U2X<<1) | (MPCM<<0) );
     e7e:	eb e2       	ldi	r30, 0x2B	; 43
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	10 82       	st	Z, r1

	/* Enable Transmit bit(3) and Receive bit(4) in UCSRnC Register */
	UCSRnB = ( (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) );
     e84:	ea e2       	ldi	r30, 0x2A	; 42
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	80 83       	st	Z, r24

	/* Configure UCRnC Register to make 8-bit data & 1 stop bit & no parity  Asynchronous Mode*/
	UCSRnC = ((URSEL << 7) | (UMSEL << 6) | (UPM1 << 5) | (UPM0 << 4)
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	86 e8       	ldi	r24, 0x86	; 134
     e92:	80 83       	st	Z, r24
			| (USBS << 3) | (UCSZ1 << 2) | (UCSZ0 << 1));

	//set_bit(SREG,7);
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <UART_TransmitData>:

//==================================================================================================
extern void UART_TransmitData (u8 UART_DataToBeSent)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_DataToBeSent;
     ea6:	ec e2       	ldi	r30, 0x2C	; 44
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
     eae:	eb e2       	ldi	r30, 0x2B	; 43
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	82 95       	swap	r24
     eb6:	86 95       	lsr	r24
     eb8:	87 70       	andi	r24, 0x07	; 7
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	a1 f3       	breq	.-24     	; 0xeae <UART_TransmitData+0x14>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
     ec6:	ab e2       	ldi	r26, 0x2B	; 43
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e2       	ldi	r30, 0x2B	; 43
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 64       	ori	r24, 0x40	; 64
     ed2:	8c 93       	st	X, r24
}
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <UART_RecieveData>:
///////////////////////////////////////////////////////////////////////////////////////////////////
extern u8 UART_RecieveData(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	//while ( ! (UCSRnA & (1<<7)) );
	while(GET_BIT(UCSRnA,7)==0);
     ee4:	eb e2       	ldi	r30, 0x2B	; 43
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 23       	and	r24, r24
     eec:	dc f7       	brge	.-10     	; 0xee4 <UART_RecieveData+0x8>
	return UDR;
     eee:	ec e2       	ldi	r30, 0x2C	; 44
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z

}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <UART_voidPrintf>:
//====================================================================================================
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <UART_voidPrintf+0x6>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9b 83       	std	Y+3, r25	; 0x03
     f08:	8a 83       	std	Y+2, r24	; 0x02

	u8 iterator=0;
     f0a:	19 82       	std	Y+1, r1	; 0x01

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     f0c:	19 82       	std	Y+1, r1	; 0x01
     f0e:	0e c0       	rjmp	.+28     	; 0xf2c <UART_voidPrintf+0x32>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	80 81       	ld	r24, Z
     f22:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{

	u8 iterator=0;

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	fc 01       	movw	r30, r24
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	39 f7       	brne	.-50     	; 0xf10 <UART_voidPrintf+0x16>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);

	}

}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <Timer0_voidInit>:
	#endif
#endif


void Timer0_voidInit(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
		/*set the Global interrupt bit value*/
		assign_bit(SREG,GI_bit,GI);
	#endif

	/*fill the value of the TCCR0 Register according to the Configuration*/
	TCCR0 |= (FOC0 << FOC0_bit) | (WGM00 << WGM00_bit) | (COM01 << COM01_bit)
     f56:	a3 e5       	ldi	r26, 0x53	; 83
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e3 e5       	ldi	r30, 0x53	; 83
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	89 67       	ori	r24, 0x79	; 121
     f62:	8c 93       	st	X, r24
			| (COM00 << COM00_bit) | (WGM01 << WGM01_bit) | (CS02 << CS02_bit)
			| (CS01 << CS01_bit) | (CS00 << CS00_bit);

	/*fill the value of the TIMSK0 Register according to the Configuration*/
	#if ((OCIE0 == 1) && (CTC_Mode==Enable || PWM_Mode == Enable))
	OCR0=OCR0_Value;
     f64:	ec e5       	ldi	r30, 0x5C	; 92
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	10 82       	st	Z, r1
	TIMSK |= (OCIE0<<OCIE0_bit);
     f6a:	a9 e5       	ldi	r26, 0x59	; 89
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e9 e5       	ldi	r30, 0x59	; 89
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	82 60       	ori	r24, 0x02	; 2
     f76:	8c 93       	st	X, r24

	#if ((TOIE0 == 1) && (OverFlow_Mode==Enable))
		TIMSK |= (TOIE0<<TOIE0_bit);
	#endif

}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <SPI_voidinitialization>:
/* I/P Parameters: It takes no thing.								  */
/* Returns:it returns nothing.										  */
/* Desc:This Function initialize the SPI.			  	              */
/**********************************************************************/
extern void SPI_voidinitialization(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
#endif

#ifdef Slave

	/*Define Slave Select pin as Input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	64 e0       	ldi	r22, 0x04	; 4
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
		/*Define MOSI pin as input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_INPUT);
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	65 e0       	ldi	r22, 0x05	; 5
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
		/*Define MISO pin as DIO_OUTPUT*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	66 e0       	ldi	r22, 0x06	; 6
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
		/*Define Clock pin as input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_INPUT);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	67 e0       	ldi	r22, 0x07	; 7
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>

		/*Set master/slave bit to one to initialize as a master */
		CLR_BIT(SPCR,4);
     fae:	ad e2       	ldi	r26, 0x2D	; 45
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ed e2       	ldi	r30, 0x2D	; 45
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 7e       	andi	r24, 0xEF	; 239
     fba:	8c 93       	st	X, r24
#endif
SET_BIT(SPCR,6);
     fbc:	ad e2       	ldi	r26, 0x2D	; 45
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ed e2       	ldi	r30, 0x2D	; 45
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	8c 93       	st	X, r24
CLR_BIT(SPCR,5);
     fca:	ad e2       	ldi	r26, 0x2D	; 45
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ed e2       	ldi	r30, 0x2D	; 45
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7d       	andi	r24, 0xDF	; 223
     fd6:	8c 93       	st	X, r24
CLR_BIT(SPCR,3);
     fd8:	ad e2       	ldi	r26, 0x2D	; 45
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ed e2       	ldi	r30, 0x2D	; 45
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	87 7f       	andi	r24, 0xF7	; 247
     fe4:	8c 93       	st	X, r24


}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <SPI_voidTranceiver>:
/* I/P Parameters: It takes u8 var. data to be sent					  */
/* Returns:it returns u8 var. data to be received					  */
/* Desc:This Function transmit. and receive using SPI.			      */
/**********************************************************************/
extern u8 SPI_voidTranceiver(u8 data)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01
#ifdef Master
	/*Select the slave By pull down the SS pin */
	CLR_BIT(PORTB_REG,4);
#endif

	SPDR=data;
     ff8:	ef e2       	ldi	r30, 0x2F	; 47
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 83       	st	Z, r24

	while (GET_BIT(SPSR,7)==0);
    1000:	ee e2       	ldi	r30, 0x2E	; 46
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	dc f7       	brge	.-10     	; 0x1000 <SPI_voidTranceiver+0x14>
#ifdef Slave
	/*Select the slave By pull down the SS pin */
	SET_BIT(PORTB_REG,4);
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 61       	ori	r24, 0x10	; 16
    1016:	8c 93       	st	X, r24
#endif

	return SPDR;
    1018:	ef e2       	ldi	r30, 0x2F	; 47
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <__vector_1>:
/** Linker Problem solved */
/*void __vector_1(void) __attribute__(( signal , used ));
void __vector_1(void)*/
void __vector_1 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_1	 (void)
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
//	  {
//		EXTINT0_Functionp();
//	  }
	//DressMachine();
	//inthandler ();
	handler();
    1050:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <handler>
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	7f 91       	pop	r23
    1066:	6f 91       	pop	r22
    1068:	5f 91       	pop	r21
    106a:	4f 91       	pop	r20
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_3>:
/** Linker Problem solved */
/*void __vector_3(void) __attribute__(( signal , used ));
void __vector_3(void)*/
void __vector_3 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_3	 (void)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    // if (EXTINT2_Functionp != NULL)
	 //{
		//EXTINT2_Functionp();
	//login();
	//spitrans();
}
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <EXT_voidEnable>:
/*                     I/P Parameters: copy_EXTINT_NUM                        */
/*                        Returns:it returns no thing                         */
/*                    Desc:This Function to Enable the INT.                   */
/******************************************************************************/
void EXT_voidEnable( u8 copy_EXTINT_NUM  )
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	2a 97       	sbiw	r28, 0x0a	; 10
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 copy_Sense;
	SET_BIT(SREG,7);
    10b0:	af e5       	ldi	r26, 0x5F	; 95
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ef e5       	ldi	r30, 0x5F	; 95
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 68       	ori	r24, 0x80	; 128
    10bc:	8c 93       	st	X, r24
	/* Switching on the interrupts to enable the targeted one */
	switch (copy_EXTINT_NUM)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3a 87       	std	Y+10, r19	; 0x0a
    10c6:	29 87       	std	Y+9, r18	; 0x09
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <EXT_voidEnable+0x3a>
    10d2:	77 c0       	rjmp	.+238    	; 0x11c2 <EXT_voidEnable+0x128>
    10d4:	29 85       	ldd	r18, Y+9	; 0x09
    10d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <EXT_voidEnable+0x46>
    10de:	dd c0       	rjmp	.+442    	; 0x129a <EXT_voidEnable+0x200>
    10e0:	89 85       	ldd	r24, Y+9	; 0x09
    10e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	09 f0       	breq	.+2      	; 0x10ea <EXT_voidEnable+0x50>
    10e8:	06 c1       	rjmp	.+524    	; 0x12f6 <EXT_voidEnable+0x25c>
	{
/**************************************************************************************************************************/
		case EXTINT0 :
							/* Disable INT0 */
							CLR_BIT(GICR,6);
    10ea:	ab e5       	ldi	r26, 0x5B	; 91
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e5       	ldi	r30, 0x5B	; 91
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 7b       	andi	r24, 0xBF	; 191
    10f6:	8c 93       	st	X, r24
							/* Getting The Sense Mood of INT0 */
							 copy_Sense = EXTI0_SENSE_MODE ;
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	89 83       	std	Y+1, r24	; 0x01
							/* Switch on the sense mood to configure it */
							switch (copy_Sense)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	38 87       	std	Y+8, r19	; 0x08
    1104:	2f 83       	std	Y+7, r18	; 0x07
    1106:	8f 81       	ldd	r24, Y+7	; 0x07
    1108:	98 85       	ldd	r25, Y+8	; 0x08
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	91 05       	cpc	r25, r1
    110e:	a1 f1       	breq	.+104    	; 0x1178 <EXT_voidEnable+0xde>
    1110:	2f 81       	ldd	r18, Y+7	; 0x07
    1112:	38 85       	ldd	r19, Y+8	; 0x08
    1114:	25 30       	cpi	r18, 0x05	; 5
    1116:	31 05       	cpc	r19, r1
    1118:	34 f4       	brge	.+12     	; 0x1126 <EXT_voidEnable+0x8c>
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	61 f0       	breq	.+24     	; 0x113c <EXT_voidEnable+0xa2>
    1124:	46 c0       	rjmp	.+140    	; 0x11b2 <EXT_voidEnable+0x118>
    1126:	2f 81       	ldd	r18, Y+7	; 0x07
    1128:	38 85       	ldd	r19, Y+8	; 0x08
    112a:	27 30       	cpi	r18, 0x07	; 7
    112c:	31 05       	cpc	r19, r1
    112e:	a9 f0       	breq	.+42     	; 0x115a <EXT_voidEnable+0xc0>
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	8a 30       	cpi	r24, 0x0A	; 10
    1136:	91 05       	cpc	r25, r1
    1138:	71 f1       	breq	.+92     	; 0x1196 <EXT_voidEnable+0xfc>
    113a:	3b c0       	rjmp	.+118    	; 0x11b2 <EXT_voidEnable+0x118>
							{
								case IOC :
											  SET_BIT(MCUCR , 0);
    113c:	a5 e5       	ldi	r26, 0x55	; 85
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e5       	ldi	r30, 0x55	; 85
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	81 60       	ori	r24, 0x01	; 1
    1148:	8c 93       	st	X, r24
											  CLR_BIT(MCUCR , 1);
    114a:	a5 e5       	ldi	r26, 0x55	; 85
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8d 7f       	andi	r24, 0xFD	; 253
    1156:	8c 93       	st	X, r24
    1158:	2c c0       	rjmp	.+88     	; 0x11b2 <EXT_voidEnable+0x118>
											  break;
								case RISING :
											  SET_BIT(MCUCR , 0);
    115a:	a5 e5       	ldi	r26, 0x55	; 85
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e5       	ldi	r30, 0x55	; 85
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	81 60       	ori	r24, 0x01	; 1
    1166:	8c 93       	st	X, r24
											  SET_BIT(MCUCR , 1);
    1168:	a5 e5       	ldi	r26, 0x55	; 85
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e5       	ldi	r30, 0x55	; 85
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	8c 93       	st	X, r24
    1176:	1d c0       	rjmp	.+58     	; 0x11b2 <EXT_voidEnable+0x118>
											  break;
								case FALLING :
									          CLR_BIT(MCUCR , 0);
    1178:	a5 e5       	ldi	r26, 0x55	; 85
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e5       	ldi	r30, 0x55	; 85
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
									          SET_BIT(MCUCR , 1);
    1186:	a5 e5       	ldi	r26, 0x55	; 85
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e5       	ldi	r30, 0x55	; 85
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	8c 93       	st	X, r24
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <EXT_voidEnable+0x118>
											  break;
								case LOW_LEVEL :
							                  CLR_BIT(MCUCR , 0);
    1196:	a5 e5       	ldi	r26, 0x55	; 85
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e5 e5       	ldi	r30, 0x55	; 85
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8e 7f       	andi	r24, 0xFE	; 254
    11a2:	8c 93       	st	X, r24
							                  CLR_BIT(MCUCR , 1);
    11a4:	a5 e5       	ldi	r26, 0x55	; 85
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e5       	ldi	r30, 0x55	; 85
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8d 7f       	andi	r24, 0xFD	; 253
    11b0:	8c 93       	st	X, r24
					     			          break;
							}
							/* Enable INT0 */
							SET_BIT(GICR,6);
    11b2:	ab e5       	ldi	r26, 0x5B	; 91
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e5       	ldi	r30, 0x5B	; 91
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	8c 93       	st	X, r24
    11c0:	9a c0       	rjmp	.+308    	; 0x12f6 <EXT_voidEnable+0x25c>
							break;
/**************************************************************************************************************************/
		case EXTINT1 :
						/* Disable INT1 */
						CLR_BIT(GICR,7);
    11c2:	ab e5       	ldi	r26, 0x5B	; 91
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	eb e5       	ldi	r30, 0x5B	; 91
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 77       	andi	r24, 0x7F	; 127
    11ce:	8c 93       	st	X, r24
						/* Getting The Sense Mood of INT1 */
						copy_Sense = EXTI1_SENSE_MODE ;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01
						/* Switch on the sense mood to configure it */
						switch (copy_Sense)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3e 83       	std	Y+6, r19	; 0x06
    11dc:	2d 83       	std	Y+5, r18	; 0x05
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	91 05       	cpc	r25, r1
    11e6:	a1 f1       	breq	.+104    	; 0x1250 <EXT_voidEnable+0x1b6>
    11e8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ea:	3e 81       	ldd	r19, Y+6	; 0x06
    11ec:	25 30       	cpi	r18, 0x05	; 5
    11ee:	31 05       	cpc	r19, r1
    11f0:	34 f4       	brge	.+12     	; 0x11fe <EXT_voidEnable+0x164>
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	61 f0       	breq	.+24     	; 0x1214 <EXT_voidEnable+0x17a>
    11fc:	46 c0       	rjmp	.+140    	; 0x128a <EXT_voidEnable+0x1f0>
    11fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1200:	3e 81       	ldd	r19, Y+6	; 0x06
    1202:	27 30       	cpi	r18, 0x07	; 7
    1204:	31 05       	cpc	r19, r1
    1206:	a9 f0       	breq	.+42     	; 0x1232 <EXT_voidEnable+0x198>
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	8a 30       	cpi	r24, 0x0A	; 10
    120e:	91 05       	cpc	r25, r1
    1210:	71 f1       	breq	.+92     	; 0x126e <EXT_voidEnable+0x1d4>
    1212:	3b c0       	rjmp	.+118    	; 0x128a <EXT_voidEnable+0x1f0>
						{
							case IOC :
										  SET_BIT(MCUCR , 2);
    1214:	a5 e5       	ldi	r26, 0x55	; 85
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e5       	ldi	r30, 0x55	; 85
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	84 60       	ori	r24, 0x04	; 4
    1220:	8c 93       	st	X, r24
										  CLR_BIT(MCUCR , 3);
    1222:	a5 e5       	ldi	r26, 0x55	; 85
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e5       	ldi	r30, 0x55	; 85
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	87 7f       	andi	r24, 0xF7	; 247
    122e:	8c 93       	st	X, r24
    1230:	2c c0       	rjmp	.+88     	; 0x128a <EXT_voidEnable+0x1f0>
										  break;
							case RISING :
										  SET_BIT(MCUCR , 2);
    1232:	a5 e5       	ldi	r26, 0x55	; 85
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e5       	ldi	r30, 0x55	; 85
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	8c 93       	st	X, r24
										  SET_BIT(MCUCR , 3);
    1240:	a5 e5       	ldi	r26, 0x55	; 85
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e5       	ldi	r30, 0x55	; 85
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	88 60       	ori	r24, 0x08	; 8
    124c:	8c 93       	st	X, r24
    124e:	1d c0       	rjmp	.+58     	; 0x128a <EXT_voidEnable+0x1f0>
										  break;
							case FALLING :
										  CLR_BIT(MCUCR , 2);
    1250:	a5 e5       	ldi	r26, 0x55	; 85
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e5       	ldi	r30, 0x55	; 85
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8b 7f       	andi	r24, 0xFB	; 251
    125c:	8c 93       	st	X, r24
										  SET_BIT(MCUCR , 3);
    125e:	a5 e5       	ldi	r26, 0x55	; 85
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e5       	ldi	r30, 0x55	; 85
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 60       	ori	r24, 0x08	; 8
    126a:	8c 93       	st	X, r24
    126c:	0e c0       	rjmp	.+28     	; 0x128a <EXT_voidEnable+0x1f0>
										  break;
							case LOW_LEVEL :
										  CLR_BIT(MCUCR , 2);
    126e:	a5 e5       	ldi	r26, 0x55	; 85
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e5       	ldi	r30, 0x55	; 85
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8b 7f       	andi	r24, 0xFB	; 251
    127a:	8c 93       	st	X, r24
										  CLR_BIT(MCUCR , 3);
    127c:	a5 e5       	ldi	r26, 0x55	; 85
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e5       	ldi	r30, 0x55	; 85
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	87 7f       	andi	r24, 0xF7	; 247
    1288:	8c 93       	st	X, r24
										  break;
						}
						/* Enable INT1 */
						SET_BIT(GICR,7);
    128a:	ab e5       	ldi	r26, 0x5B	; 91
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e5       	ldi	r30, 0x5B	; 91
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8c 93       	st	X, r24
    1298:	2e c0       	rjmp	.+92     	; 0x12f6 <EXT_voidEnable+0x25c>
						break;
/**************************************************************************************************************************/
		case EXTINT2 :
						/* Disable INT1 */
						CLR_BIT(GICR,5);
    129a:	ab e5       	ldi	r26, 0x5B	; 91
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e5       	ldi	r30, 0x5B	; 91
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8f 7d       	andi	r24, 0xDF	; 223
    12a6:	8c 93       	st	X, r24
						/* Getting The Sense Mood of INT1 */
						copy_Sense = EXTI2_SENSE_MODE ;
    12a8:	87 e0       	ldi	r24, 0x07	; 7
    12aa:	89 83       	std	Y+1, r24	; 0x01
						/* Switch on the sense mood to configure it */
						switch (copy_Sense)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3c 83       	std	Y+4, r19	; 0x04
    12b4:	2b 83       	std	Y+3, r18	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	91 05       	cpc	r25, r1
    12be:	69 f0       	breq	.+26     	; 0x12da <EXT_voidEnable+0x240>
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	3c 81       	ldd	r19, Y+4	; 0x04
    12c4:	27 30       	cpi	r18, 0x07	; 7
    12c6:	31 05       	cpc	r19, r1
    12c8:	79 f4       	brne	.+30     	; 0x12e8 <EXT_voidEnable+0x24e>
						{
							case RISING :
								           SET_BIT(MCUCSR , 6);
    12ca:	a4 e5       	ldi	r26, 0x54	; 84
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e4 e5       	ldi	r30, 0x54	; 84
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 64       	ori	r24, 0x40	; 64
    12d6:	8c 93       	st	X, r24
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <EXT_voidEnable+0x24e>
					   					   break;
							case FALLING :
										   CLR_BIT(MCUCSR , 6);
    12da:	a4 e5       	ldi	r26, 0x54	; 84
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e4 e5       	ldi	r30, 0x54	; 84
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7b       	andi	r24, 0xBF	; 191
    12e6:	8c 93       	st	X, r24
					    				   break;
						}
						/* Enable INT1 */
						SET_BIT(GICR,5);
    12e8:	ab e5       	ldi	r26, 0x5B	; 91
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e5       	ldi	r30, 0x5B	; 91
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 62       	ori	r24, 0x20	; 32
    12f4:	8c 93       	st	X, r24
						break;
	}

}
    12f6:	2a 96       	adiw	r28, 0x0a	; 10
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <EXT_voidDisable>:
/*                      I/P Parameters: copy_EXTINT_NUM                       */
/*                        Returns:it returns no thing                         */
/*                    Desc:This Function to Enable the INT.                   */
/******************************************************************************/
void EXT_voidDisable( u8 copy_EXTINT_NUM )
	{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <EXT_voidDisable+0x6>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	89 83       	std	Y+1, r24	; 0x01
		switch (copy_EXTINT_NUM)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3b 83       	std	Y+3, r19	; 0x03
    131e:	2a 83       	std	Y+2, r18	; 0x02
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	89 f0       	breq	.+34     	; 0x134c <EXT_voidDisable+0x44>
    132a:	2a 81       	ldd	r18, Y+2	; 0x02
    132c:	3b 81       	ldd	r19, Y+3	; 0x03
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	a1 f0       	breq	.+40     	; 0x135c <EXT_voidDisable+0x54>
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	9b 81       	ldd	r25, Y+3	; 0x03
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	b9 f4       	brne	.+46     	; 0x136a <EXT_voidDisable+0x62>
			{
				case EXTINT0 : CLR_BIT(GICR,6);  break;
    133c:	ab e5       	ldi	r26, 0x5B	; 91
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	eb e5       	ldi	r30, 0x5B	; 91
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8f 7b       	andi	r24, 0xBF	; 191
    1348:	8c 93       	st	X, r24
    134a:	0f c0       	rjmp	.+30     	; 0x136a <EXT_voidDisable+0x62>
				case EXTINT1 : CLR_BIT(GICR,7);  break;
    134c:	ab e5       	ldi	r26, 0x5B	; 91
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e5       	ldi	r30, 0x5B	; 91
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8f 77       	andi	r24, 0x7F	; 127
    1358:	8c 93       	st	X, r24
    135a:	07 c0       	rjmp	.+14     	; 0x136a <EXT_voidDisable+0x62>
				case EXTINT2 : CLR_BIT(GICR,5);  break;
    135c:	ab e5       	ldi	r26, 0x5B	; 91
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e5       	ldi	r30, 0x5B	; 91
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8f 7d       	andi	r24, 0xDF	; 223
    1368:	8c 93       	st	X, r24
			}
	}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_voidSetPinDirection>:
/*         I/P Parameters: Port Number , Pin Number & Pin Direction           */
/*                 Returns:it returns no thing                                */
/*      Desc:This Function Set the direction of the pin input or output       */
/******************************************************************************/
extern void DIO_voidSetPinDirection (u8 copy_u8PortNum, u8 copy_u8PinNum, u8 copy_u8PinDirection)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_voidSetPinDirection+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_voidSetPinDirection+0x8>
    137e:	0f 92       	push	r0
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
    1388:	4b 83       	std	Y+3, r20	; 0x03
	/*   Input Validation  */
	if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	08 f0       	brcs	.+2      	; 0x1392 <DIO_voidSetPinDirection+0x1c>
    1390:	e4 c0       	rjmp	.+456    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	88 30       	cpi	r24, 0x08	; 8
    1396:	08 f0       	brcs	.+2      	; 0x139a <DIO_voidSetPinDirection+0x24>
    1398:	e0 c0       	rjmp	.+448    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
	else
	{
		/* switching on the ports to enter the required port to set the pin dir. in this port       */
		/* For all the cases the direction of the pin will be checked and that will help with the   */
		/*  clear bit for input as the bit is set to 0 or set bit for output as the bit is set to 1 */
		switch (copy_u8PortNum)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3d 83       	std	Y+5, r19	; 0x05
    13a2:	2c 83       	std	Y+4, r18	; 0x04
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_voidSetPinDirection+0x3a>
    13ae:	47 c0       	rjmp	.+142    	; 0x143e <DIO_voidSetPinDirection+0xc8>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <DIO_voidSetPinDirection+0x4e>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	71 f0       	breq	.+28     	; 0x13de <DIO_voidSetPinDirection+0x68>
    13c2:	cb c0       	rjmp	.+406    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_voidSetPinDirection+0x5a>
    13ce:	67 c0       	rjmp	.+206    	; 0x149e <DIO_voidSetPinDirection+0x128>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_voidSetPinDirection+0x66>
    13da:	91 c0       	rjmp	.+290    	; 0x14fe <DIO_voidSetPinDirection+0x188>
    13dc:	be c0       	rjmp	.+380    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
		{
			case DIO_PORTA :
							if (copy_u8PinDirection == DIO_INPUT)
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 23       	and	r24, r24
    13e2:	a9 f4       	brne	.+42     	; 0x140e <DIO_voidSetPinDirection+0x98>
							{
								CLR_BIT(DDRA_REG,copy_u8PinNum);
    13e4:	aa e3       	ldi	r26, 0x3A	; 58
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ea e3       	ldi	r30, 0x3A	; 58
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_voidSetPinDirection+0x8c>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_voidSetPinDirection+0x88>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	a6 c0       	rjmp	.+332    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <DIO_voidSetPinDirection+0xa0>
    1414:	a2 c0       	rjmp	.+324    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRA_REG,copy_u8PinNum);
    1416:	aa e3       	ldi	r26, 0x3A	; 58
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ea e3       	ldi	r30, 0x3A	; 58
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_voidSetPinDirection+0xbe>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_voidSetPinDirection+0xba>
    1438:	84 2b       	or	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	8e c0       	rjmp	.+284    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTB :
							if (copy_u8PinDirection == DIO_INPUT)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 23       	and	r24, r24
    1442:	a9 f4       	brne	.+42     	; 0x146e <DIO_voidSetPinDirection+0xf8>
							{
								CLR_BIT(DDRB_REG,copy_u8PinNum);
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_voidSetPinDirection+0xec>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_voidSetPinDirection+0xe8>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	76 c0       	rjmp	.+236    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	09 f0       	breq	.+2      	; 0x1476 <DIO_voidSetPinDirection+0x100>
    1474:	72 c0       	rjmp	.+228    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRB_REG,copy_u8PinNum);
    1476:	a7 e3       	ldi	r26, 0x37	; 55
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_voidSetPinDirection+0x11e>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_voidSetPinDirection+0x11a>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	5e c0       	rjmp	.+188    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTC :
							if (copy_u8PinDirection == DIO_INPUT)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 23       	and	r24, r24
    14a2:	a9 f4       	brne	.+42     	; 0x14ce <DIO_voidSetPinDirection+0x158>
							{
								CLR_BIT(DDRC_REG,copy_u8PinNum);
    14a4:	a4 e3       	ldi	r26, 0x34	; 52
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e4 e3       	ldi	r30, 0x34	; 52
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_voidSetPinDirection+0x14c>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_voidSetPinDirection+0x148>
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	46 c0       	rjmp	.+140    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <DIO_voidSetPinDirection+0x160>
    14d4:	42 c0       	rjmp	.+132    	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRC_REG,copy_u8PinNum);
    14d6:	a4 e3       	ldi	r26, 0x34	; 52
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e4 e3       	ldi	r30, 0x34	; 52
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_voidSetPinDirection+0x17e>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_voidSetPinDirection+0x17a>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	2e c0       	rjmp	.+92     	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTD :
							if (copy_u8PinDirection == DIO_INPUT)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	88 23       	and	r24, r24
    1502:	a9 f4       	brne	.+42     	; 0x152e <DIO_voidSetPinDirection+0x1b8>
							{
								CLR_BIT(DDRD_REG,copy_u8PinNum);
    1504:	a1 e3       	ldi	r26, 0x31	; 49
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e1 e3       	ldi	r30, 0x31	; 49
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_voidSetPinDirection+0x1ac>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_voidSetPinDirection+0x1a8>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	16 c0       	rjmp	.+44     	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	99 f4       	brne	.+38     	; 0x155a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRD_REG,copy_u8PinNum);
    1534:	a1 e3       	ldi	r26, 0x31	; 49
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e1 e3       	ldi	r30, 0x31	; 49
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_voidSetPinDirection+0x1dc>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_voidSetPinDirection+0x1d8>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
			default:
							break;
		}

	}
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <DIO_voidSetPinValue>:
/*           I/P Parameters: Port Number , Pin Number & Pin Value             */
/*                    Returns:it returns no thing                             */
/*         Desc:This Function Set the direction of the pin High or Low        */
/******************************************************************************/
extern void DIO_voidSetPinValue (u8 copy_u8PortNum, u8 copy_u8PinNum, u8 copy_u8PinValue)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_voidSetPinValue+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <DIO_voidSetPinValue+0x8>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	6a 83       	std	Y+2, r22	; 0x02
    157c:	4b 83       	std	Y+3, r20	; 0x03

		/*   Input Validation  */
		if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	08 f0       	brcs	.+2      	; 0x1586 <DIO_voidSetPinValue+0x1c>
    1584:	e4 c0       	rjmp	.+456    	; 0x174e <DIO_voidSetPinValue+0x1e4>
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	08 f0       	brcs	.+2      	; 0x158e <DIO_voidSetPinValue+0x24>
    158c:	e0 c0       	rjmp	.+448    	; 0x174e <DIO_voidSetPinValue+0x1e4>
		else
		{
			/* switching on the ports to enter the required port to set the pin value in this port      */
			/* For all the cases the value of the pin will be checked and that will help with the       */
			/*  clear bit for low as the bit is set to 0 or set bit for high as the bit is set to 1     */
			switch (copy_u8PortNum)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3d 83       	std	Y+5, r19	; 0x05
    1596:	2c 83       	std	Y+4, r18	; 0x04
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <DIO_voidSetPinValue+0x3a>
    15a2:	47 c0       	rjmp	.+142    	; 0x1632 <DIO_voidSetPinValue+0xc8>
    15a4:	2c 81       	ldd	r18, Y+4	; 0x04
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <DIO_voidSetPinValue+0x4e>
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <DIO_voidSetPinValue+0x68>
    15b6:	cb c0       	rjmp	.+406    	; 0x174e <DIO_voidSetPinValue+0x1e4>
    15b8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ba:	3d 81       	ldd	r19, Y+5	; 0x05
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <DIO_voidSetPinValue+0x5a>
    15c2:	67 c0       	rjmp	.+206    	; 0x1692 <DIO_voidSetPinValue+0x128>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <DIO_voidSetPinValue+0x66>
    15ce:	91 c0       	rjmp	.+290    	; 0x16f2 <DIO_voidSetPinValue+0x188>
    15d0:	be c0       	rjmp	.+380    	; 0x174e <DIO_voidSetPinValue+0x1e4>
			{
				case DIO_PORTA :
								if (copy_u8PinValue == DIO_LOW)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 23       	and	r24, r24
    15d6:	a9 f4       	brne	.+42     	; 0x1602 <DIO_voidSetPinValue+0x98>
								{
									CLR_BIT(PORTA_REG,copy_u8PinNum);
    15d8:	ab e3       	ldi	r26, 0x3B	; 59
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	eb e3       	ldi	r30, 0x3B	; 59
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_voidSetPinValue+0x8c>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_voidSetPinValue+0x88>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	a6 c0       	rjmp	.+332    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	09 f0       	breq	.+2      	; 0x160a <DIO_voidSetPinValue+0xa0>
    1608:	a2 c0       	rjmp	.+324    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTA_REG,copy_u8PinNum);
    160a:	ab e3       	ldi	r26, 0x3B	; 59
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e3       	ldi	r30, 0x3B	; 59
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_voidSetPinValue+0xbe>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_voidSetPinValue+0xba>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	8e c0       	rjmp	.+284    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTB :
								if (copy_u8PinValue == DIO_LOW)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 23       	and	r24, r24
    1636:	a9 f4       	brne	.+42     	; 0x1662 <DIO_voidSetPinValue+0xf8>
								{
									CLR_BIT(PORTB_REG,copy_u8PinNum);
    1638:	a8 e3       	ldi	r26, 0x38	; 56
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_voidSetPinValue+0xec>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_voidSetPinValue+0xe8>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	76 c0       	rjmp	.+236    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	09 f0       	breq	.+2      	; 0x166a <DIO_voidSetPinValue+0x100>
    1668:	72 c0       	rjmp	.+228    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTB_REG,copy_u8PinNum);
    166a:	a8 e3       	ldi	r26, 0x38	; 56
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_voidSetPinValue+0x11e>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_voidSetPinValue+0x11a>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	5e c0       	rjmp	.+188    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTC :
								if (copy_u8PinValue == DIO_LOW)
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 23       	and	r24, r24
    1696:	a9 f4       	brne	.+42     	; 0x16c2 <DIO_voidSetPinValue+0x158>
								{
									CLR_BIT(PORTC_REG,copy_u8PinNum);
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_voidSetPinValue+0x14c>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_voidSetPinValue+0x148>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	46 c0       	rjmp	.+140    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <DIO_voidSetPinValue+0x160>
    16c8:	42 c0       	rjmp	.+132    	; 0x174e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTC_REG,copy_u8PinNum);
    16ca:	a5 e3       	ldi	r26, 0x35	; 53
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e3       	ldi	r30, 0x35	; 53
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_voidSetPinValue+0x17e>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_voidSetPinValue+0x17a>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	2e c0       	rjmp	.+92     	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTD :
								if (copy_u8PinValue == DIO_LOW)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	88 23       	and	r24, r24
    16f6:	a9 f4       	brne	.+42     	; 0x1722 <DIO_voidSetPinValue+0x1b8>
								{
									CLR_BIT(PORTD_REG,copy_u8PinNum);
    16f8:	a2 e3       	ldi	r26, 0x32	; 50
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e2 e3       	ldi	r30, 0x32	; 50
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_voidSetPinValue+0x1ac>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_voidSetPinValue+0x1a8>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	16 c0       	rjmp	.+44     	; 0x174e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	99 f4       	brne	.+38     	; 0x174e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTD_REG,copy_u8PinNum);
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_voidSetPinValue+0x1dc>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_voidSetPinValue+0x1d8>
    174a:	84 2b       	or	r24, r20
    174c:	8c 93       	st	X, r24
								break;
				default:
								break;
			}
		}
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <DIO_u8GetPinValue>:
/*                 I/P Parameters: Port Number , Pin Number                   */
/*                     Returns:it returns U8 Pin Value                        */
/*                   Desc:This Function Get The Pin Value                     */
/******************************************************************************/
extern u8 DIO_u8GetPinValue (u8 copy_u8PortNum, u8 copy_u8PinNum)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_u8GetPinValue+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <DIO_u8GetPinValue+0x8>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	6a 83       	std	Y+2, r22	; 0x02
	/*   Input Validation  */
	if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	18 f4       	brcc	.+6      	; 0x177c <DIO_u8GetPinValue+0x1e>
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	18 f0       	brcs	.+6      	; 0x1782 <DIO_u8GetPinValue+0x24>
	{
			/* The Function will terminate if the input is not valid */
			return 2;
    177c:	22 e0       	ldi	r18, 0x02	; 2
    177e:	2d 83       	std	Y+5, r18	; 0x05
    1780:	6e c0       	rjmp	.+220    	; 0x185e <DIO_u8GetPinValue+0x100>
	else
	{

		/* switching on the ports to enter the required port to get the pin value from this port      */
		/* For all the cases the value of the pin will be checked and return it to the callee fuction */
		switch (copy_u8PortNum)
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	48 2f       	mov	r20, r24
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	5c 83       	std	Y+4, r21	; 0x04
    178a:	4b 83       	std	Y+3, r20	; 0x03
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	49 f1       	breq	.+82     	; 0x17e8 <DIO_u8GetPinValue+0x8a>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	34 f4       	brge	.+12     	; 0x17ac <DIO_u8GetPinValue+0x4e>
    17a0:	4b 81       	ldd	r20, Y+3	; 0x03
    17a2:	5c 81       	ldd	r21, Y+4	; 0x04
    17a4:	41 15       	cp	r20, r1
    17a6:	51 05       	cpc	r21, r1
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <DIO_u8GetPinValue+0x64>
    17aa:	57 c0       	rjmp	.+174    	; 0x185a <DIO_u8GetPinValue+0xfc>
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	91 05       	cpc	r25, r1
    17b4:	61 f1       	breq	.+88     	; 0x180e <DIO_u8GetPinValue+0xb0>
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	23 30       	cpi	r18, 0x03	; 3
    17bc:	31 05       	cpc	r19, r1
    17be:	d1 f1       	breq	.+116    	; 0x1834 <DIO_u8GetPinValue+0xd6>
    17c0:	4c c0       	rjmp	.+152    	; 0x185a <DIO_u8GetPinValue+0xfc>
			{
				case DIO_PORTA:
								return GET_BIT(PINA_REG,copy_u8PinNum);
    17c2:	e9 e3       	ldi	r30, 0x39	; 57
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_u8GetPinValue+0x7c>
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_u8GetPinValue+0x78>
    17de:	ca 01       	movw	r24, r20
    17e0:	58 2f       	mov	r21, r24
    17e2:	51 70       	andi	r21, 0x01	; 1
    17e4:	5d 83       	std	Y+5, r21	; 0x05
    17e6:	3b c0       	rjmp	.+118    	; 0x185e <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTB:
								return GET_BIT(PINB_REG,copy_u8PinNum);
    17e8:	e6 e3       	ldi	r30, 0x36	; 54
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_u8GetPinValue+0xa2>
    17fc:	55 95       	asr	r21
    17fe:	47 95       	ror	r20
    1800:	8a 95       	dec	r24
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_u8GetPinValue+0x9e>
    1804:	ca 01       	movw	r24, r20
    1806:	58 2f       	mov	r21, r24
    1808:	51 70       	andi	r21, 0x01	; 1
    180a:	5d 83       	std	Y+5, r21	; 0x05
    180c:	28 c0       	rjmp	.+80     	; 0x185e <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTC:
								return GET_BIT(PINC_REG,copy_u8PinNum);
    180e:	e3 e3       	ldi	r30, 0x33	; 51
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a9 01       	movw	r20, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_u8GetPinValue+0xc8>
    1822:	55 95       	asr	r21
    1824:	47 95       	ror	r20
    1826:	8a 95       	dec	r24
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_u8GetPinValue+0xc4>
    182a:	ca 01       	movw	r24, r20
    182c:	58 2f       	mov	r21, r24
    182e:	51 70       	andi	r21, 0x01	; 1
    1830:	5d 83       	std	Y+5, r21	; 0x05
    1832:	15 c0       	rjmp	.+42     	; 0x185e <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTD:
								return GET_BIT(PIND_REG,copy_u8PinNum);
    1834:	e0 e3       	ldi	r30, 0x30	; 48
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_u8GetPinValue+0xee>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_u8GetPinValue+0xea>
    1850:	ca 01       	movw	r24, r20
    1852:	58 2f       	mov	r21, r24
    1854:	51 70       	andi	r21, 0x01	; 1
    1856:	5d 83       	std	Y+5, r21	; 0x05
    1858:	02 c0       	rjmp	.+4      	; 0x185e <DIO_u8GetPinValue+0x100>
								break;

				default:
								return 2;
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	8d 83       	std	Y+5, r24	; 0x05
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
								break;
			}
	}
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <DIO_voidSetPortDirection>:
/*               I/P Parameters: Port Number & Port Direction                 */
/*                     Returns:it returns no thing                            */
/*      	   Desc:This Function Set the direction of the port  		      */
/******************************************************************************/
extern void DIO_voidSetPortDirection (u8 copy_u8PortNum , u8 copy_u8PortDirection )
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <DIO_voidSetPortDirection+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <DIO_voidSetPortDirection+0x8>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	6a 83       	std	Y+2, r22	; 0x02
	/*   Input Validation  */
		if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) )
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	90 f5       	brcc	.+100    	; 0x18ea <DIO_voidSetPortDirection+0x7a>
		{
			/* switching on the ports to enter the required port to set the pins dir. in this port      */
			/* For all the cases the value of the pin will be checked and that will help with the       */
			/* clear bit for input as the bit is set to 0 or set bit for output as the bit is set to 1  */
			/* This will happen using a loop to check on each pin individually						    */
			switch(copy_u8PortNum)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3c 83       	std	Y+4, r19	; 0x04
    188e:	2b 83       	std	Y+3, r18	; 0x03
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	91 05       	cpc	r25, r1
    1898:	d1 f0       	breq	.+52     	; 0x18ce <DIO_voidSetPortDirection+0x5e>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	22 30       	cpi	r18, 0x02	; 2
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f4       	brge	.+10     	; 0x18ae <DIO_voidSetPortDirection+0x3e>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	61 f0       	breq	.+24     	; 0x18c4 <DIO_voidSetPortDirection+0x54>
    18ac:	1e c0       	rjmp	.+60     	; 0x18ea <DIO_voidSetPortDirection+0x7a>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	81 f0       	breq	.+32     	; 0x18d8 <DIO_voidSetPortDirection+0x68>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	91 05       	cpc	r25, r1
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <DIO_voidSetPortDirection+0x72>
    18c2:	13 c0       	rjmp	.+38     	; 0x18ea <DIO_voidSetPortDirection+0x7a>
			{
				case DIO_PORTA:
								DDRA_REG = copy_u8PortDirection;
    18c4:	ea e3       	ldi	r30, 0x3A	; 58
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	80 83       	st	Z, r24
    18cc:	0e c0       	rjmp	.+28     	; 0x18ea <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTB:
								DDRB_REG = copy_u8PortDirection;
    18ce:	e7 e3       	ldi	r30, 0x37	; 55
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	80 83       	st	Z, r24
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTC:
								DDRC_REG = copy_u8PortDirection;
    18d8:	e4 e3       	ldi	r30, 0x34	; 52
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTD:
								DDRD_REG = copy_u8PortDirection;
    18e2:	e1 e3       	ldi	r30, 0x31	; 49
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24

						default:
								break;
					}
		}
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DIO_voidSetPortValue>:
/*               I/P Parameters: Port Number & Port Direction                 */
/*                     Returns:it returns no thing                            */
/*      		  Desc:This Function Set the value of the port   		      */
/******************************************************************************/
extern void DIO_voidSetPortValue (u8 copy_u8PortNum , u8 copy_u8PortValue )
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <DIO_voidSetPortValue+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <DIO_voidSetPortValue+0x8>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	6a 83       	std	Y+2, r22	; 0x02

	/* switching on the ports to enter the required port to set the pins val. in this port      */
	/* For all the cases the value of the pin will be checked and that will help with the       */
	/* clear bit for low as the bit is set to 0 or set bit for high as the bit is set to 1      */
	/* This will happen using a loop to check on each pin individually						    */
	switch(copy_u8PortNum)
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	3c 83       	std	Y+4, r19	; 0x04
    1910:	2b 83       	std	Y+3, r18	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	91 05       	cpc	r25, r1
    191a:	d1 f0       	breq	.+52     	; 0x1950 <DIO_voidSetPortValue+0x58>
    191c:	2b 81       	ldd	r18, Y+3	; 0x03
    191e:	3c 81       	ldd	r19, Y+4	; 0x04
    1920:	22 30       	cpi	r18, 0x02	; 2
    1922:	31 05       	cpc	r19, r1
    1924:	2c f4       	brge	.+10     	; 0x1930 <DIO_voidSetPortValue+0x38>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	61 f0       	breq	.+24     	; 0x1946 <DIO_voidSetPortValue+0x4e>
    192e:	1e c0       	rjmp	.+60     	; 0x196c <DIO_voidSetPortValue+0x74>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	81 f0       	breq	.+32     	; 0x195a <DIO_voidSetPortValue+0x62>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	91 05       	cpc	r25, r1
    1942:	81 f0       	breq	.+32     	; 0x1964 <DIO_voidSetPortValue+0x6c>
    1944:	13 c0       	rjmp	.+38     	; 0x196c <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA:
							PORTA_REG= copy_u8PortValue;
    1946:	eb e3       	ldi	r30, 0x3B	; 59
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	80 83       	st	Z, r24
    194e:	0e c0       	rjmp	.+28     	; 0x196c <DIO_voidSetPortValue+0x74>
							break;
			case DIO_PORTB:
							PORTB_REG= copy_u8PortValue;
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	80 83       	st	Z, r24
    1958:	09 c0       	rjmp	.+18     	; 0x196c <DIO_voidSetPortValue+0x74>
											break;
			case DIO_PORTC:
							PORTC_REG= copy_u8PortValue;
    195a:	e5 e3       	ldi	r30, 0x35	; 53
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
    1962:	04 c0       	rjmp	.+8      	; 0x196c <DIO_voidSetPortValue+0x74>
							break;
			case DIO_PORTD:
							PORTD_REG= copy_u8PortValue;
    1964:	e2 e3       	ldi	r30, 0x32	; 50
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
							break;

				default:
				break;
		}
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <ADC_voidInitTEMP>:
/*                          I/P Parameters: no thing                          */
/*                        Returns:it returns no thing                         */
/*             Desc:This Function to Initialize the ADC peripheral.           */
/******************************************************************************/
extern void ADC_voidInitTEMP()
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <ADC_voidInitTEMP+0x6>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationTEMP;
    1984:	8b e7       	ldi	r24, 0x7B	; 123
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    198c:	a7 e2       	ldi	r26, 0x27	; 39
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e7 e2       	ldi	r30, 0x27	; 39
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	90 81       	ld	r25, Z
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	80 81       	ld	r24, Z
    199c:	89 2b       	or	r24, r25
    199e:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    19a0:	a7 e2       	ldi	r26, 0x27	; 39
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e7 e2       	ldi	r30, 0x27	; 39
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	90 81       	ld	r25, Z
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	89 2b       	or	r24, r25
    19b2:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    19b4:	a7 e2       	ldi	r26, 0x27	; 39
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e7 e2       	ldi	r30, 0x27	; 39
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	90 81       	ld	r25, Z
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	89 2b       	or	r24, r25
    19c6:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    19c8:	a6 e2       	ldi	r26, 0x26	; 38
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e6 e2       	ldi	r30, 0x26	; 38
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	80 68       	ori	r24, 0x80	; 128
    19d4:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    19d6:	a6 e2       	ldi	r26, 0x26	; 38
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e6 e2       	ldi	r30, 0x26	; 38
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	90 81       	ld	r25, Z
    19e0:	e9 81       	ldd	r30, Y+1	; 0x01
    19e2:	fa 81       	ldd	r31, Y+2	; 0x02
    19e4:	83 81       	ldd	r24, Z+3	; 0x03
    19e6:	89 2b       	or	r24, r25
    19e8:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    19ea:	a6 e2       	ldi	r26, 0x26	; 38
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e6 e2       	ldi	r30, 0x26	; 38
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	90 81       	ld	r25, Z
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	84 81       	ldd	r24, Z+4	; 0x04
    19fa:	89 2b       	or	r24, r25
    19fc:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    19fe:	a6 e2       	ldi	r26, 0x26	; 38
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e6 e2       	ldi	r30, 0x26	; 38
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	90 81       	ld	r25, Z
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	83 81       	ldd	r24, Z+3	; 0x03
    1a0e:	89 2b       	or	r24, r25
    1a10:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1a12:	e9 81       	ldd	r30, Y+1	; 0x01
    1a14:	fa 81       	ldd	r31, Y+2	; 0x02
    1a16:	83 81       	ldd	r24, Z+3	; 0x03
    1a18:	88 30       	cpi	r24, 0x08	; 8
    1a1a:	39 f4       	brne	.+14     	; 0x1a2a <ADC_voidInitTEMP+0xb0>
		{
			SREG |= (1<<7);
    1a1c:	af e5       	ldi	r26, 0x5F	; 95
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	ef e5       	ldi	r30, 0x5F	; 95
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <ADC_voidInitTEMP2>:


extern void ADC_voidInitTEMP2()
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <ADC_voidInitTEMP2+0x6>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationTEMP2;
    1a3e:	80 e8       	ldi	r24, 0x80	; 128
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1a46:	a7 e2       	ldi	r26, 0x27	; 39
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e7 e2       	ldi	r30, 0x27	; 39
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	90 81       	ld	r25, Z
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	fa 81       	ldd	r31, Y+2	; 0x02
    1a54:	80 81       	ld	r24, Z
    1a56:	89 2b       	or	r24, r25
    1a58:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1a5a:	a7 e2       	ldi	r26, 0x27	; 39
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e7 e2       	ldi	r30, 0x27	; 39
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	90 81       	ld	r25, Z
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	81 81       	ldd	r24, Z+1	; 0x01
    1a6a:	89 2b       	or	r24, r25
    1a6c:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1a6e:	a7 e2       	ldi	r26, 0x27	; 39
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e7 e2       	ldi	r30, 0x27	; 39
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	90 81       	ld	r25, Z
    1a78:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	89 2b       	or	r24, r25
    1a80:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1a82:	a6 e2       	ldi	r26, 0x26	; 38
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e6 e2       	ldi	r30, 0x26	; 38
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 68       	ori	r24, 0x80	; 128
    1a8e:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1a90:	a6 e2       	ldi	r26, 0x26	; 38
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e6 e2       	ldi	r30, 0x26	; 38
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	90 81       	ld	r25, Z
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	83 81       	ldd	r24, Z+3	; 0x03
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1aa4:	a6 e2       	ldi	r26, 0x26	; 38
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e6 e2       	ldi	r30, 0x26	; 38
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	90 81       	ld	r25, Z
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	84 81       	ldd	r24, Z+4	; 0x04
    1ab4:	89 2b       	or	r24, r25
    1ab6:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1ab8:	a6 e2       	ldi	r26, 0x26	; 38
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e6 e2       	ldi	r30, 0x26	; 38
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	90 81       	ld	r25, Z
    1ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac6:	83 81       	ldd	r24, Z+3	; 0x03
    1ac8:	89 2b       	or	r24, r25
    1aca:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1acc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ace:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad0:	83 81       	ldd	r24, Z+3	; 0x03
    1ad2:	88 30       	cpi	r24, 0x08	; 8
    1ad4:	39 f4       	brne	.+14     	; 0x1ae4 <ADC_voidInitTEMP2+0xb0>
		{
			SREG |= (1<<7);
    1ad6:	af e5       	ldi	r26, 0x5F	; 95
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ef e5       	ldi	r30, 0x5F	; 95
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <ADC_voidInitLDR>:
extern void ADC_voidInitLDR()
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <ADC_voidInitLDR+0x6>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationLDR;
    1af8:	85 e8       	ldi	r24, 0x85	; 133
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1b00:	a7 e2       	ldi	r26, 0x27	; 39
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e2       	ldi	r30, 0x27	; 39
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	90 81       	ld	r25, Z
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	80 81       	ld	r24, Z
    1b10:	89 2b       	or	r24, r25
    1b12:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1b14:	a7 e2       	ldi	r26, 0x27	; 39
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e7 e2       	ldi	r30, 0x27	; 39
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	90 81       	ld	r25, Z
    1b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b20:	fa 81       	ldd	r31, Y+2	; 0x02
    1b22:	81 81       	ldd	r24, Z+1	; 0x01
    1b24:	89 2b       	or	r24, r25
    1b26:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1b28:	a7 e2       	ldi	r26, 0x27	; 39
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e7 e2       	ldi	r30, 0x27	; 39
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	90 81       	ld	r25, Z
    1b32:	e9 81       	ldd	r30, Y+1	; 0x01
    1b34:	fa 81       	ldd	r31, Y+2	; 0x02
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	89 2b       	or	r24, r25
    1b3a:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1b3c:	a6 e2       	ldi	r26, 0x26	; 38
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e6 e2       	ldi	r30, 0x26	; 38
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 68       	ori	r24, 0x80	; 128
    1b48:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1b4a:	a6 e2       	ldi	r26, 0x26	; 38
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e6 e2       	ldi	r30, 0x26	; 38
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	90 81       	ld	r25, Z
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	83 81       	ldd	r24, Z+3	; 0x03
    1b5a:	89 2b       	or	r24, r25
    1b5c:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1b5e:	a6 e2       	ldi	r26, 0x26	; 38
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e6 e2       	ldi	r30, 0x26	; 38
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	90 81       	ld	r25, Z
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	84 81       	ldd	r24, Z+4	; 0x04
    1b6e:	89 2b       	or	r24, r25
    1b70:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1b72:	a6 e2       	ldi	r26, 0x26	; 38
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e6 e2       	ldi	r30, 0x26	; 38
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	90 81       	ld	r25, Z
    1b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b80:	83 81       	ldd	r24, Z+3	; 0x03
    1b82:	89 2b       	or	r24, r25
    1b84:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	83 81       	ldd	r24, Z+3	; 0x03
    1b8c:	88 30       	cpi	r24, 0x08	; 8
    1b8e:	39 f4       	brne	.+14     	; 0x1b9e <ADC_voidInitLDR+0xb0>
		{
			SREG |= (1<<7);
    1b90:	af e5       	ldi	r26, 0x5F	; 95
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ef e5       	ldi	r30, 0x5F	; 95
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 68       	ori	r24, 0x80	; 128
    1b9c:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <ADC_u16GetRawData>:
/*                    I/P Parameters: ADC Channel Number                      */
/*                           Returns:it returns u16                           */
/*             		 Desc:This Function to Get a Raw of Data.                 */
/******************************************************************************/
extern u16 ADC_u16GetRawData(ADCChannels ADCCHIndex)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <ADC_u16GetRawData+0x6>
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <ADC_u16GetRawData+0x8>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
	/*Local variable to save the Raw data of the ADC conversion result*/
		u16 LOC_u16ADCResult=(u16)0x0000;
    1bb8:	1c 82       	std	Y+4, r1	; 0x04
    1bba:	1b 82       	std	Y+3, r1	; 0x03

		/*pointer to the Configuration structure*/
		ADCconfig * ptr = &ConfiurationTEMP;
    1bbc:	8b e7       	ldi	r24, 0x7B	; 123
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
		 *
		 * Selecting the ADC Channel
		 *
		 */

		CLR_BIT(ADCSRA,7);
    1bc4:	a6 e2       	ldi	r26, 0x26	; 38
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e6 e2       	ldi	r30, 0x26	; 38
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8f 77       	andi	r24, 0x7F	; 127
    1bd0:	8c 93       	st	X, r24


		/*first zeros the ADC channel bits*/
		ADMUX &=0b11100000;
    1bd2:	a7 e2       	ldi	r26, 0x27	; 39
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e7 e2       	ldi	r30, 0x27	; 39
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	80 7e       	andi	r24, 0xE0	; 224
    1bde:	8c 93       	st	X, r24
		/*second select the channel according*/
		ADMUX |= (ADCCHIndex);
    1be0:	a7 e2       	ldi	r26, 0x27	; 39
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e7 e2       	ldi	r30, 0x27	; 39
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	90 81       	ld	r25, Z
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	89 2b       	or	r24, r25
    1bee:	8c 93       	st	X, r24


		SET_BIT(ADCSRA,7);
    1bf0:	a6 e2       	ldi	r26, 0x26	; 38
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e6 e2       	ldi	r30, 0x26	; 38
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 68       	ori	r24, 0x80	; 128
    1bfc:	8c 93       	st	X, r24

		/*set ADC to start Conversion*/
		ADC_voidStartConversion();
    1bfe:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <ADC_voidStartConversion>
		/*Polling on the ADC Interrupt Flag to know if conversion complete or not yet*/
		while ( GET_BIT(ADCSRA,4)==0);
    1c02:	e6 e2       	ldi	r30, 0x26	; 38
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	82 95       	swap	r24
    1c0a:	8f 70       	andi	r24, 0x0F	; 15
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	81 70       	andi	r24, 0x01	; 1
    1c12:	90 70       	andi	r25, 0x00	; 0
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	a9 f3       	breq	.-22     	; 0x1c02 <ADC_u16GetRawData+0x5a>

		/*Clear Interrupt flag By writing Logical one to it */
		ADCSRA |= (1<<4);
    1c18:	a6 e2       	ldi	r26, 0x26	; 38
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e6 e2       	ldi	r30, 0x26	; 38
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 61       	ori	r24, 0x10	; 16
    1c24:	8c 93       	st	X, r24

		if(ptr->AdjResFormat==LeftAdjustment)
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	81 81       	ldd	r24, Z+1	; 0x01
    1c2c:	80 32       	cpi	r24, 0x20	; 32
    1c2e:	b1 f4       	brne	.+44     	; 0x1c5c <ADC_u16GetRawData+0xb4>
			/*
			 * According to the data sheet P:215 you have to read ADCL first before ADCH
			 */


			LOC_u16ADCResult =(u16) ADCL;
    1c30:	e4 e2       	ldi	r30, 0x24	; 36
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	88 2f       	mov	r24, r24
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
			LOC_u16ADCResult = (u16) ( (ADCH << 8)  |  LOC_u16ADCResult );
    1c3e:	e5 e2       	ldi	r30, 0x25	; 37
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	98 2f       	mov	r25, r24
    1c4a:	88 27       	eor	r24, r24
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	82 2b       	or	r24, r18
    1c54:	93 2b       	or	r25, r19
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	1a c0       	rjmp	.+52     	; 0x1c90 <ADC_u16GetRawData+0xe8>
		}
			else if(ptr->AdjResFormat==RightAdjutment)
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
    1c62:	88 23       	and	r24, r24
    1c64:	a9 f4       	brne	.+42     	; 0x1c90 <ADC_u16GetRawData+0xe8>
			{
				/*
				 * According to the data sheet P:215 you have to read ADCL first before ADCH
				 */

				LOC_u16ADCResult = (u16) ADCL;
    1c66:	e4 e2       	ldi	r30, 0x24	; 36
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c 83       	std	Y+4, r25	; 0x04
    1c72:	8b 83       	std	Y+3, r24	; 0x03
				LOC_u16ADCResult = (u16) ( (ADCH << 8) | (LOC_u16ADCResult) );
    1c74:	e5 e2       	ldi	r30, 0x25	; 37
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	98 2f       	mov	r25, r24
    1c80:	88 27       	eor	r24, r24
    1c82:	9c 01       	movw	r18, r24
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	82 2b       	or	r24, r18
    1c8a:	93 2b       	or	r25, r19
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
			else
			{

			}

			return LOC_u16ADCResult;
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04

}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <ADC_u16GetInterruptConvRes>:
/*                          I/P Parameters: no thing                          */
/*                     	     Returns:it returns u16                           */
/*             Desc:This Function to get the interrupt conversion res.        */
/******************************************************************************/
extern u16 ADC_u16GetInterruptConvRes(void)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ConversionResult;
    1cac:	80 91 a4 01 	lds	r24, 0x01A4
    1cb0:	90 91 a5 01 	lds	r25, 0x01A5
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <ADC_voidStartConversion>:
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
static void ADC_voidStartConversion(void)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	ADCSRA  |=  (1<<6);
    1cc2:	a6 e2       	ldi	r26, 0x26	; 38
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e6 e2       	ldi	r30, 0x26	; 38
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 64       	ori	r24, 0x40	; 64
    1cce:	8c 93       	st	X, r24
}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <__vector_16>:
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
void __vector_16 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_16(void)
{
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <__vector_16+0x1c>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	ADCconfig * ptr = &ConfiurationTEMP;
    1cf6:	8b e7       	ldi	r24, 0x7B	; 123
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01


	if(ptr->AdjResFormat==LeftAdjustment)
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	81 81       	ldd	r24, Z+1	; 0x01
    1d04:	80 32       	cpi	r24, 0x20	; 32
    1d06:	61 f5       	brne	.+88     	; 0x1d60 <__vector_16+0x8a>
		{
		ADC_u16ConversionResult =(u16) ADCH;
    1d08:	e5 e2       	ldi	r30, 0x25	; 37
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	90 93 a5 01 	sts	0x01A5, r25
    1d16:	80 93 a4 01 	sts	0x01A4, r24
		ADC_u16ConversionResult = (u16) ((ADC_u16ConversionResult << 8)  |  (ADCL));
    1d1a:	80 91 a4 01 	lds	r24, 0x01A4
    1d1e:	90 91 a5 01 	lds	r25, 0x01A5
    1d22:	38 2f       	mov	r19, r24
    1d24:	22 27       	eor	r18, r18
    1d26:	e4 e2       	ldi	r30, 0x24	; 36
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	82 2b       	or	r24, r18
    1d32:	93 2b       	or	r25, r19
    1d34:	90 93 a5 01 	sts	0x01A5, r25
    1d38:	80 93 a4 01 	sts	0x01A4, r24
		ADC_u16ConversionResult = (u16) (ADC_u16ConversionResult >> 6);
    1d3c:	80 91 a4 01 	lds	r24, 0x01A4
    1d40:	90 91 a5 01 	lds	r25, 0x01A5
    1d44:	00 24       	eor	r0, r0
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	00 1c       	adc	r0, r0
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	00 1c       	adc	r0, r0
    1d52:	89 2f       	mov	r24, r25
    1d54:	90 2d       	mov	r25, r0
    1d56:	90 93 a5 01 	sts	0x01A5, r25
    1d5a:	80 93 a4 01 	sts	0x01A4, r24
    1d5e:	1f c0       	rjmp	.+62     	; 0x1d9e <__vector_16+0xc8>
		}
		else if(ptr->AdjResFormat==RightAdjutment)
    1d60:	e9 81       	ldd	r30, Y+1	; 0x01
    1d62:	fa 81       	ldd	r31, Y+2	; 0x02
    1d64:	81 81       	ldd	r24, Z+1	; 0x01
    1d66:	88 23       	and	r24, r24
    1d68:	d1 f4       	brne	.+52     	; 0x1d9e <__vector_16+0xc8>
		{
			ADC_u16ConversionResult = (u16) ADCH;
    1d6a:	e5 e2       	ldi	r30, 0x25	; 37
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	90 93 a5 01 	sts	0x01A5, r25
    1d78:	80 93 a4 01 	sts	0x01A4, r24
			ADC_u16ConversionResult = (u16) (ADC_u16ConversionResult << 8) | (ADCL);
    1d7c:	80 91 a4 01 	lds	r24, 0x01A4
    1d80:	90 91 a5 01 	lds	r25, 0x01A5
    1d84:	38 2f       	mov	r19, r24
    1d86:	22 27       	eor	r18, r18
    1d88:	e4 e2       	ldi	r30, 0x24	; 36
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	82 2b       	or	r24, r18
    1d94:	93 2b       	or	r25, r19
    1d96:	90 93 a5 01 	sts	0x01A5, r25
    1d9a:	80 93 a4 01 	sts	0x01A4, r24
		}

}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	9f 91       	pop	r25
    1dac:	8f 91       	pop	r24
    1dae:	3f 91       	pop	r19
    1db0:	2f 91       	pop	r18
    1db2:	0f 90       	pop	r0
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	0f 90       	pop	r0
    1db8:	1f 90       	pop	r1
    1dba:	18 95       	reti

00001dbc <SevenSegmant_voidIntialization>:
/*                I/P Parameters: u8 copy_u8SegmantType                       */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Intialize the Seven Segmant                   */
/******************************************************************************/
extern void SevenSegmant_voidIntialization (u8 copy_u8SegmantType)
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the port to output */
	DIO_voidSetPortDirection(SevenSegmant_Port ,0xFF);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	6f ef       	ldi	r22, 0xFF	; 255
    1dcc:	0e 94 38 0c 	call	0x1870	; 0x1870 <DIO_voidSetPortDirection>
	/* turning all the segmants on based on the typr of the Seven Segmant */
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	21 f5       	brne	.+72     	; 0x1e1e <SevenSegmant_voidIntialization+0x62>
	{
		//DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	64 e0       	ldi	r22, 0x04	; 4
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	65 e0       	ldi	r22, 0x05	; 5
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	67 e0       	ldi	r22, 0x07	; 7
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    1e1c:	26 c0       	rjmp	.+76     	; 0x1e6a <SevenSegmant_voidIntialization+0xae>
	}

	else if (copy_u8SegmantType == SevenSegmant_Anode)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	19 f5       	brne	.+70     	; 0x1e6a <SevenSegmant_voidIntialization+0xae>
	{
		//DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	62 e0       	ldi	r22, 0x02	; 2
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	63 e0       	ldi	r22, 0x03	; 3
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	64 e0       	ldi	r22, 0x04	; 4
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	65 e0       	ldi	r22, 0x05	; 5
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	66 e0       	ldi	r22, 0x06	; 6
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	67 e0       	ldi	r22, 0x07	; 7
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	}


}
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <SevenSegmant_voidDisplayNum>:
/*     	 I/P Parameters: u8 copy_u8SegmantType & u8 copy_u8Number             */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Display on the Seven Segmant                  */
/******************************************************************************/
extern void SevenSegmant_voidDisplayNum (u8 copy_u8SegmantType,u32 copy_u8Number)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	2d 97       	sbiw	r28, 0x0d	; 13
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	4a 83       	std	Y+2, r20	; 0x02
    1e8a:	5b 83       	std	Y+3, r21	; 0x03
    1e8c:	6c 83       	std	Y+4, r22	; 0x04
    1e8e:	7d 83       	std	Y+5, r23	; 0x05
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <SevenSegmant_voidDisplayNum+0x26>
    1e96:	01 c2       	rjmp	.+1026   	; 0x229a <SevenSegmant_voidDisplayNum+0x428>
	{
		switch (copy_u8Number)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	ac 81       	ldd	r26, Y+4	; 0x04
    1e9e:	bd 81       	ldd	r27, Y+5	; 0x05
    1ea0:	8e 83       	std	Y+6, r24	; 0x06
    1ea2:	9f 83       	std	Y+7, r25	; 0x07
    1ea4:	a8 87       	std	Y+8, r26	; 0x08
    1ea6:	b9 87       	std	Y+9, r27	; 0x09
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1eac:	a8 85       	ldd	r26, Y+8	; 0x08
    1eae:	b9 85       	ldd	r27, Y+9	; 0x09
    1eb0:	84 30       	cpi	r24, 0x04	; 4
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	a1 05       	cpc	r26, r1
    1eb6:	b1 05       	cpc	r27, r1
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <SevenSegmant_voidDisplayNum+0x4a>
    1eba:	03 c1       	rjmp	.+518    	; 0x20c2 <SevenSegmant_voidDisplayNum+0x250>
    1ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ec2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ec4:	85 30       	cpi	r24, 0x05	; 5
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	a1 05       	cpc	r26, r1
    1eca:	b1 05       	cpc	r27, r1
    1ecc:	48 f5       	brcc	.+82     	; 0x1f20 <SevenSegmant_voidDisplayNum+0xae>
    1ece:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed2:	a8 85       	ldd	r26, Y+8	; 0x08
    1ed4:	b9 85       	ldd	r27, Y+9	; 0x09
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	a1 05       	cpc	r26, r1
    1edc:	b1 05       	cpc	r27, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <SevenSegmant_voidDisplayNum+0x70>
    1ee0:	80 c0       	rjmp	.+256    	; 0x1fe2 <SevenSegmant_voidDisplayNum+0x170>
    1ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee6:	a8 85       	ldd	r26, Y+8	; 0x08
    1ee8:	b9 85       	ldd	r27, Y+9	; 0x09
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	a1 05       	cpc	r26, r1
    1ef0:	b1 05       	cpc	r27, r1
    1ef2:	08 f4       	brcc	.+2      	; 0x1ef6 <SevenSegmant_voidDisplayNum+0x84>
    1ef4:	52 c0       	rjmp	.+164    	; 0x1f9a <SevenSegmant_voidDisplayNum+0x128>
    1ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    1efa:	a8 85       	ldd	r26, Y+8	; 0x08
    1efc:	b9 85       	ldd	r27, Y+9	; 0x09
    1efe:	82 30       	cpi	r24, 0x02	; 2
    1f00:	91 05       	cpc	r25, r1
    1f02:	a1 05       	cpc	r26, r1
    1f04:	b1 05       	cpc	r27, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <SevenSegmant_voidDisplayNum+0x98>
    1f08:	94 c0       	rjmp	.+296    	; 0x2032 <SevenSegmant_voidDisplayNum+0x1c0>
    1f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0e:	a8 85       	ldd	r26, Y+8	; 0x08
    1f10:	b9 85       	ldd	r27, Y+9	; 0x09
    1f12:	83 30       	cpi	r24, 0x03	; 3
    1f14:	91 05       	cpc	r25, r1
    1f16:	a1 05       	cpc	r26, r1
    1f18:	b1 05       	cpc	r27, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <SevenSegmant_voidDisplayNum+0xac>
    1f1c:	ae c0       	rjmp	.+348    	; 0x207a <SevenSegmant_voidDisplayNum+0x208>
    1f1e:	a9 c3       	rjmp	.+1874   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
    1f20:	8e 81       	ldd	r24, Y+6	; 0x06
    1f22:	9f 81       	ldd	r25, Y+7	; 0x07
    1f24:	a8 85       	ldd	r26, Y+8	; 0x08
    1f26:	b9 85       	ldd	r27, Y+9	; 0x09
    1f28:	87 30       	cpi	r24, 0x07	; 7
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	a1 05       	cpc	r26, r1
    1f2e:	b1 05       	cpc	r27, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <SevenSegmant_voidDisplayNum+0xc2>
    1f32:	3b c1       	rjmp	.+630    	; 0x21aa <SevenSegmant_voidDisplayNum+0x338>
    1f34:	8e 81       	ldd	r24, Y+6	; 0x06
    1f36:	9f 81       	ldd	r25, Y+7	; 0x07
    1f38:	a8 85       	ldd	r26, Y+8	; 0x08
    1f3a:	b9 85       	ldd	r27, Y+9	; 0x09
    1f3c:	88 30       	cpi	r24, 0x08	; 8
    1f3e:	91 05       	cpc	r25, r1
    1f40:	a1 05       	cpc	r26, r1
    1f42:	b1 05       	cpc	r27, r1
    1f44:	a8 f4       	brcc	.+42     	; 0x1f70 <SevenSegmant_voidDisplayNum+0xfe>
    1f46:	8e 81       	ldd	r24, Y+6	; 0x06
    1f48:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4a:	a8 85       	ldd	r26, Y+8	; 0x08
    1f4c:	b9 85       	ldd	r27, Y+9	; 0x09
    1f4e:	85 30       	cpi	r24, 0x05	; 5
    1f50:	91 05       	cpc	r25, r1
    1f52:	a1 05       	cpc	r26, r1
    1f54:	b1 05       	cpc	r27, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <SevenSegmant_voidDisplayNum+0xe8>
    1f58:	d8 c0       	rjmp	.+432    	; 0x210a <SevenSegmant_voidDisplayNum+0x298>
    1f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5e:	a8 85       	ldd	r26, Y+8	; 0x08
    1f60:	b9 85       	ldd	r27, Y+9	; 0x09
    1f62:	86 30       	cpi	r24, 0x06	; 6
    1f64:	91 05       	cpc	r25, r1
    1f66:	a1 05       	cpc	r26, r1
    1f68:	b1 05       	cpc	r27, r1
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <SevenSegmant_voidDisplayNum+0xfc>
    1f6c:	f6 c0       	rjmp	.+492    	; 0x215a <SevenSegmant_voidDisplayNum+0x2e8>
    1f6e:	81 c3       	rjmp	.+1794   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
    1f70:	8e 81       	ldd	r24, Y+6	; 0x06
    1f72:	9f 81       	ldd	r25, Y+7	; 0x07
    1f74:	a8 85       	ldd	r26, Y+8	; 0x08
    1f76:	b9 85       	ldd	r27, Y+9	; 0x09
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	a1 05       	cpc	r26, r1
    1f7e:	b1 05       	cpc	r27, r1
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <SevenSegmant_voidDisplayNum+0x112>
    1f82:	3b c1       	rjmp	.+630    	; 0x21fa <SevenSegmant_voidDisplayNum+0x388>
    1f84:	8e 81       	ldd	r24, Y+6	; 0x06
    1f86:	9f 81       	ldd	r25, Y+7	; 0x07
    1f88:	a8 85       	ldd	r26, Y+8	; 0x08
    1f8a:	b9 85       	ldd	r27, Y+9	; 0x09
    1f8c:	89 30       	cpi	r24, 0x09	; 9
    1f8e:	91 05       	cpc	r25, r1
    1f90:	a1 05       	cpc	r26, r1
    1f92:	b1 05       	cpc	r27, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <SevenSegmant_voidDisplayNum+0x126>
    1f96:	59 c1       	rjmp	.+690    	; 0x224a <SevenSegmant_voidDisplayNum+0x3d8>
    1f98:	6c c3       	rjmp	.+1752   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		{
		  case 0 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
			  	        DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	63 e0       	ldi	r22, 0x03	; 3
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	64 e0       	ldi	r22, 0x04	; 4
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	65 e0       	ldi	r22, 0x05	; 5
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	66 e0       	ldi	r22, 0x06	; 6
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	67 e0       	ldi	r22, 0x07	; 7
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    1fe0:	48 c3       	rjmp	.+1680   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>

			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000110);
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	66 e0       	ldi	r22, 0x06	; 6
    1fe6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
			  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	63 e0       	ldi	r22, 0x03	; 3
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	64 e0       	ldi	r22, 0x04	; 4
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	65 e0       	ldi	r22, 0x05	; 5
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	66 e0       	ldi	r22, 0x06	; 6
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	67 e0       	ldi	r22, 0x07	; 7
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2030:	20 c3       	rjmp	.+1600   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
			   	  break;
		  case 2 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01011011);
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	64 e0       	ldi	r22, 0x04	; 4
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	65 e0       	ldi	r22, 0x05	; 5
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	66 e0       	ldi	r22, 0x06	; 6
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	67 e0       	ldi	r22, 0x07	; 7
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2078:	fc c2       	rjmp	.+1528   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 3 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01001111);
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	65 e0       	ldi	r22, 0x05	; 5
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    20c0:	d8 c2       	rjmp	.+1456   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 4 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01100110);
		  	  	        DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	62 e0       	ldi	r22, 0x02	; 2
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	63 e0       	ldi	r22, 0x03	; 3
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	64 e0       	ldi	r22, 0x04	; 4
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	65 e0       	ldi	r22, 0x05	; 5
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	66 e0       	ldi	r22, 0x06	; 6
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	67 e0       	ldi	r22, 0x07	; 7
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2108:	b4 c2       	rjmp	.+1384   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101101);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	6d e6       	ldi	r22, 0x6D	; 109
    210e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
		  	  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	62 e0       	ldi	r22, 0x02	; 2
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	63 e0       	ldi	r22, 0x03	; 3
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	64 e0       	ldi	r22, 0x04	; 4
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	65 e0       	ldi	r22, 0x05	; 5
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	66 e0       	ldi	r22, 0x06	; 6
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	67 e0       	ldi	r22, 0x07	; 7
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2158:	8c c2       	rjmp	.+1304   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111101);
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	6d e7       	ldi	r22, 0x7D	; 125
    215e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	63 e0       	ldi	r22, 0x03	; 3
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	64 e0       	ldi	r22, 0x04	; 4
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	65 e0       	ldi	r22, 0x05	; 5
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	67 e0       	ldi	r22, 0x07	; 7
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    21a8:	64 c2       	rjmp	.+1224   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000111);
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	67 e0       	ldi	r22, 0x07	; 7
    21ae:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	63 e0       	ldi	r22, 0x03	; 3
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	64 e0       	ldi	r22, 0x04	; 4
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	65 e0       	ldi	r22, 0x05	; 5
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	66 e0       	ldi	r22, 0x06	; 6
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	67 e0       	ldi	r22, 0x07	; 7
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    21f8:	3c c2       	rjmp	.+1144   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111111);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	6f e7       	ldi	r22, 0x7F	; 127
    21fe:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	63 e0       	ldi	r22, 0x03	; 3
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2220:	82 e0       	ldi	r24, 0x02	; 2
    2222:	64 e0       	ldi	r22, 0x04	; 4
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	65 e0       	ldi	r22, 0x05	; 5
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	66 e0       	ldi	r22, 0x06	; 6
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	67 e0       	ldi	r22, 0x07	; 7
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2248:	14 c2       	rjmp	.+1064   	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101111);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	6f e6       	ldi	r22, 0x6F	; 111
    224e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	62 e0       	ldi	r22, 0x02	; 2
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	63 e0       	ldi	r22, 0x03	; 3
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	64 e0       	ldi	r22, 0x04	; 4
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	65 e0       	ldi	r22, 0x05	; 5
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2284:	82 e0       	ldi	r24, 0x02	; 2
    2286:	66 e0       	ldi	r22, 0x06	; 6
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	67 e0       	ldi	r22, 0x07	; 7
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2298:	ec c1       	rjmp	.+984    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		}
	}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
	else if (copy_u8SegmantType == SevenSegmant_Anode)
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	09 f0       	breq	.+2      	; 0x22a2 <SevenSegmant_voidDisplayNum+0x430>
    22a0:	e8 c1       	rjmp	.+976    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
	{
		switch (copy_u8Number)
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	ac 81       	ldd	r26, Y+4	; 0x04
    22a8:	bd 81       	ldd	r27, Y+5	; 0x05
    22aa:	8a 87       	std	Y+10, r24	; 0x0a
    22ac:	9b 87       	std	Y+11, r25	; 0x0b
    22ae:	ac 87       	std	Y+12, r26	; 0x0c
    22b0:	bd 87       	std	Y+13, r27	; 0x0d
    22b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    22b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    22ba:	84 30       	cpi	r24, 0x04	; 4
    22bc:	91 05       	cpc	r25, r1
    22be:	a1 05       	cpc	r26, r1
    22c0:	b1 05       	cpc	r27, r1
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <SevenSegmant_voidDisplayNum+0x454>
    22c4:	ff c0       	rjmp	.+510    	; 0x24c4 <SevenSegmant_voidDisplayNum+0x652>
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ca:	ac 85       	ldd	r26, Y+12	; 0x0c
    22cc:	bd 85       	ldd	r27, Y+13	; 0x0d
    22ce:	85 30       	cpi	r24, 0x05	; 5
    22d0:	91 05       	cpc	r25, r1
    22d2:	a1 05       	cpc	r26, r1
    22d4:	b1 05       	cpc	r27, r1
    22d6:	48 f5       	brcc	.+82     	; 0x232a <SevenSegmant_voidDisplayNum+0x4b8>
    22d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22da:	9b 85       	ldd	r25, Y+11	; 0x0b
    22dc:	ac 85       	ldd	r26, Y+12	; 0x0c
    22de:	bd 85       	ldd	r27, Y+13	; 0x0d
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	91 05       	cpc	r25, r1
    22e4:	a1 05       	cpc	r26, r1
    22e6:	b1 05       	cpc	r27, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <SevenSegmant_voidDisplayNum+0x47a>
    22ea:	80 c0       	rjmp	.+256    	; 0x23ec <SevenSegmant_voidDisplayNum+0x57a>
    22ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f0:	ac 85       	ldd	r26, Y+12	; 0x0c
    22f2:	bd 85       	ldd	r27, Y+13	; 0x0d
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	a1 05       	cpc	r26, r1
    22fa:	b1 05       	cpc	r27, r1
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <SevenSegmant_voidDisplayNum+0x48e>
    22fe:	52 c0       	rjmp	.+164    	; 0x23a4 <SevenSegmant_voidDisplayNum+0x532>
    2300:	8a 85       	ldd	r24, Y+10	; 0x0a
    2302:	9b 85       	ldd	r25, Y+11	; 0x0b
    2304:	ac 85       	ldd	r26, Y+12	; 0x0c
    2306:	bd 85       	ldd	r27, Y+13	; 0x0d
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	91 05       	cpc	r25, r1
    230c:	a1 05       	cpc	r26, r1
    230e:	b1 05       	cpc	r27, r1
    2310:	09 f4       	brne	.+2      	; 0x2314 <SevenSegmant_voidDisplayNum+0x4a2>
    2312:	90 c0       	rjmp	.+288    	; 0x2434 <SevenSegmant_voidDisplayNum+0x5c2>
    2314:	8a 85       	ldd	r24, Y+10	; 0x0a
    2316:	9b 85       	ldd	r25, Y+11	; 0x0b
    2318:	ac 85       	ldd	r26, Y+12	; 0x0c
    231a:	bd 85       	ldd	r27, Y+13	; 0x0d
    231c:	83 30       	cpi	r24, 0x03	; 3
    231e:	91 05       	cpc	r25, r1
    2320:	a1 05       	cpc	r26, r1
    2322:	b1 05       	cpc	r27, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <SevenSegmant_voidDisplayNum+0x4b6>
    2326:	aa c0       	rjmp	.+340    	; 0x247c <SevenSegmant_voidDisplayNum+0x60a>
    2328:	a4 c1       	rjmp	.+840    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	9b 85       	ldd	r25, Y+11	; 0x0b
    232e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2330:	bd 85       	ldd	r27, Y+13	; 0x0d
    2332:	87 30       	cpi	r24, 0x07	; 7
    2334:	91 05       	cpc	r25, r1
    2336:	a1 05       	cpc	r26, r1
    2338:	b1 05       	cpc	r27, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <SevenSegmant_voidDisplayNum+0x4cc>
    233c:	2f c1       	rjmp	.+606    	; 0x259c <SevenSegmant_voidDisplayNum+0x72a>
    233e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2340:	9b 85       	ldd	r25, Y+11	; 0x0b
    2342:	ac 85       	ldd	r26, Y+12	; 0x0c
    2344:	bd 85       	ldd	r27, Y+13	; 0x0d
    2346:	88 30       	cpi	r24, 0x08	; 8
    2348:	91 05       	cpc	r25, r1
    234a:	a1 05       	cpc	r26, r1
    234c:	b1 05       	cpc	r27, r1
    234e:	a8 f4       	brcc	.+42     	; 0x237a <SevenSegmant_voidDisplayNum+0x508>
    2350:	8a 85       	ldd	r24, Y+10	; 0x0a
    2352:	9b 85       	ldd	r25, Y+11	; 0x0b
    2354:	ac 85       	ldd	r26, Y+12	; 0x0c
    2356:	bd 85       	ldd	r27, Y+13	; 0x0d
    2358:	85 30       	cpi	r24, 0x05	; 5
    235a:	91 05       	cpc	r25, r1
    235c:	a1 05       	cpc	r26, r1
    235e:	b1 05       	cpc	r27, r1
    2360:	09 f4       	brne	.+2      	; 0x2364 <SevenSegmant_voidDisplayNum+0x4f2>
    2362:	d4 c0       	rjmp	.+424    	; 0x250c <SevenSegmant_voidDisplayNum+0x69a>
    2364:	8a 85       	ldd	r24, Y+10	; 0x0a
    2366:	9b 85       	ldd	r25, Y+11	; 0x0b
    2368:	ac 85       	ldd	r26, Y+12	; 0x0c
    236a:	bd 85       	ldd	r27, Y+13	; 0x0d
    236c:	86 30       	cpi	r24, 0x06	; 6
    236e:	91 05       	cpc	r25, r1
    2370:	a1 05       	cpc	r26, r1
    2372:	b1 05       	cpc	r27, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <SevenSegmant_voidDisplayNum+0x506>
    2376:	ee c0       	rjmp	.+476    	; 0x2554 <SevenSegmant_voidDisplayNum+0x6e2>
    2378:	7c c1       	rjmp	.+760    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
    237a:	8a 85       	ldd	r24, Y+10	; 0x0a
    237c:	9b 85       	ldd	r25, Y+11	; 0x0b
    237e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2380:	bd 85       	ldd	r27, Y+13	; 0x0d
    2382:	88 30       	cpi	r24, 0x08	; 8
    2384:	91 05       	cpc	r25, r1
    2386:	a1 05       	cpc	r26, r1
    2388:	b1 05       	cpc	r27, r1
    238a:	09 f4       	brne	.+2      	; 0x238e <SevenSegmant_voidDisplayNum+0x51c>
    238c:	2b c1       	rjmp	.+598    	; 0x25e4 <SevenSegmant_voidDisplayNum+0x772>
    238e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2390:	9b 85       	ldd	r25, Y+11	; 0x0b
    2392:	ac 85       	ldd	r26, Y+12	; 0x0c
    2394:	bd 85       	ldd	r27, Y+13	; 0x0d
    2396:	89 30       	cpi	r24, 0x09	; 9
    2398:	91 05       	cpc	r25, r1
    239a:	a1 05       	cpc	r26, r1
    239c:	b1 05       	cpc	r27, r1
    239e:	09 f4       	brne	.+2      	; 0x23a2 <SevenSegmant_voidDisplayNum+0x530>
    23a0:	45 c1       	rjmp	.+650    	; 0x262c <SevenSegmant_voidDisplayNum+0x7ba>
    23a2:	67 c1       	rjmp	.+718    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		{
		  case 0 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	64 e0       	ldi	r22, 0x04	; 4
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	65 e0       	ldi	r22, 0x05	; 5
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	66 e0       	ldi	r22, 0x06	; 6
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	67 e0       	ldi	r22, 0x07	; 7
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    23ea:	43 c1       	rjmp	.+646    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 1 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01111001);
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	62 e0       	ldi	r22, 0x02	; 2
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	63 e0       	ldi	r22, 0x03	; 3
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	64 e0       	ldi	r22, 0x04	; 4
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	65 e0       	ldi	r22, 0x05	; 5
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	66 e0       	ldi	r22, 0x06	; 6
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	67 e0       	ldi	r22, 0x07	; 7
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2432:	1f c1       	rjmp	.+574    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
			   	  break;
		  case 2 :
			  	 //DIO_voidSetPortValue(SevenSegmant_Port,0b00100100);
			  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	63 e0       	ldi	r22, 0x03	; 3
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	64 e0       	ldi	r22, 0x04	; 4
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    245c:	82 e0       	ldi	r24, 0x02	; 2
    245e:	65 e0       	ldi	r22, 0x05	; 5
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	66 e0       	ldi	r22, 0x06	; 6
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	67 e0       	ldi	r22, 0x07	; 7
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    247a:	fb c0       	rjmp	.+502    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 3 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00110000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	61 e0       	ldi	r22, 0x01	; 1
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	62 e0       	ldi	r22, 0x02	; 2
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	63 e0       	ldi	r22, 0x03	; 3
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	64 e0       	ldi	r22, 0x04	; 4
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	65 e0       	ldi	r22, 0x05	; 5
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	66 e0       	ldi	r22, 0x06	; 6
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	67 e0       	ldi	r22, 0x07	; 7
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    24c2:	d7 c0       	rjmp	.+430    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>

		  	  	  break;
		  case 4 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00011001);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	62 e0       	ldi	r22, 0x02	; 2
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	63 e0       	ldi	r22, 0x03	; 3
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	64 e0       	ldi	r22, 0x04	; 4
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	65 e0       	ldi	r22, 0x05	; 5
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	66 e0       	ldi	r22, 0x06	; 6
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	67 e0       	ldi	r22, 0x07	; 7
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    250a:	b3 c0       	rjmp	.+358    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 5 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00010010);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	63 e0       	ldi	r22, 0x03	; 3
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	64 e0       	ldi	r22, 0x04	; 4
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	65 e0       	ldi	r22, 0x05	; 5
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	66 e0       	ldi	r22, 0x06	; 6
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	67 e0       	ldi	r22, 0x07	; 7
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2552:	8f c0       	rjmp	.+286    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 6 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00000010);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	63 e0       	ldi	r22, 0x03	; 3
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	64 e0       	ldi	r22, 0x04	; 4
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	65 e0       	ldi	r22, 0x05	; 5
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	66 e0       	ldi	r22, 0x06	; 6
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	67 e0       	ldi	r22, 0x07	; 7
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    259a:	6b c0       	rjmp	.+214    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 7 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01111000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    25a6:	82 e0       	ldi	r24, 0x02	; 2
    25a8:	62 e0       	ldi	r22, 0x02	; 2
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	63 e0       	ldi	r22, 0x03	; 3
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	64 e0       	ldi	r22, 0x04	; 4
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	65 e0       	ldi	r22, 0x05	; 5
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	66 e0       	ldi	r22, 0x06	; 6
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	67 e0       	ldi	r22, 0x07	; 7
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    25e2:	47 c0       	rjmp	.+142    	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 8 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00000000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    25ee:	82 e0       	ldi	r24, 0x02	; 2
    25f0:	62 e0       	ldi	r22, 0x02	; 2
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	63 e0       	ldi	r22, 0x03	; 3
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	65 e0       	ldi	r22, 0x05	; 5
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	66 e0       	ldi	r22, 0x06	; 6
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	67 e0       	ldi	r22, 0x07	; 7
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    262a:	23 c0       	rjmp	.+70     	; 0x2672 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 9 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00010000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	62 e0       	ldi	r22, 0x02	; 2
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	64 e0       	ldi	r22, 0x04	; 4
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	65 e0       	ldi	r22, 0x05	; 5
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	66 e0       	ldi	r22, 0x06	; 6
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	67 e0       	ldi	r22, 0x07	; 7
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		  	  	  break;
		  default:
		  		  break;
		}
	}
}
    2672:	2d 96       	adiw	r28, 0x0d	; 13
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <SevenSegmantPORT_voidIntialization>:
/*                I/P Parameters: u8 copy_u8SegmantType                       */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Intialize the Seven Segmant                   */
/******************************************************************************/
extern void SevenSegmantPORT_voidIntialization (u8 copy_u8SegmantType)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	0f 92       	push	r0
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the port to output */
	DIO_voidSetPortDirection(SevenSegmant_Port ,0xFF);
    2690:	82 e0       	ldi	r24, 0x02	; 2
    2692:	6f ef       	ldi	r22, 0xFF	; 255
    2694:	0e 94 38 0c 	call	0x1870	; 0x1870 <DIO_voidSetPortDirection>
	/* turning all the segmants on based on the typr of the Seven Segmant */
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	29 f4       	brne	.+10     	; 0x26a8 <SevenSegmantPORT_voidIntialization+0x24>
	DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	6f e3       	ldi	r22, 0x3F	; 63
    26a2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    26a6:	07 c0       	rjmp	.+14     	; 0x26b6 <SevenSegmantPORT_voidIntialization+0x32>

	else if (copy_u8SegmantType == SevenSegmant_Anode)
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	82 30       	cpi	r24, 0x02	; 2
    26ac:	21 f4       	brne	.+8      	; 0x26b6 <SevenSegmantPORT_voidIntialization+0x32>
	DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	60 e4       	ldi	r22, 0x40	; 64
    26b2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>

}
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <SevenSegmantPORT_voidDisplayNum>:
/*     	 I/P Parameters: u8 copy_u8SegmantType & u8 copy_u8Number             */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Display on the Seven Segmant                  */
/******************************************************************************/
extern void SevenSegmantPORT_voidDisplayNum (u8 copy_u8SegmantType,u8 copy_u8Number)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <SevenSegmantPORT_voidDisplayNum+0x6>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <SevenSegmantPORT_voidDisplayNum+0x8>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <SevenSegmantPORT_voidDisplayNum+0xa>
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <SevenSegmantPORT_voidDisplayNum+0x1a>
    26d6:	7e c0       	rjmp	.+252    	; 0x27d4 <SevenSegmantPORT_voidDisplayNum+0x116>
	{
		switch (copy_u8Number)
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	3e 83       	std	Y+6, r19	; 0x06
    26e0:	2d 83       	std	Y+5, r18	; 0x05
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	84 30       	cpi	r24, 0x04	; 4
    26e8:	91 05       	cpc	r25, r1
    26ea:	09 f4       	brne	.+2      	; 0x26ee <SevenSegmantPORT_voidDisplayNum+0x30>
    26ec:	55 c0       	rjmp	.+170    	; 0x2798 <SevenSegmantPORT_voidDisplayNum+0xda>
    26ee:	2d 81       	ldd	r18, Y+5	; 0x05
    26f0:	3e 81       	ldd	r19, Y+6	; 0x06
    26f2:	25 30       	cpi	r18, 0x05	; 5
    26f4:	31 05       	cpc	r19, r1
    26f6:	dc f4       	brge	.+54     	; 0x272e <SevenSegmantPORT_voidDisplayNum+0x70>
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	91 05       	cpc	r25, r1
    2700:	09 f4       	brne	.+2      	; 0x2704 <SevenSegmantPORT_voidDisplayNum+0x46>
    2702:	3b c0       	rjmp	.+118    	; 0x277a <SevenSegmantPORT_voidDisplayNum+0xbc>
    2704:	2d 81       	ldd	r18, Y+5	; 0x05
    2706:	3e 81       	ldd	r19, Y+6	; 0x06
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	31 05       	cpc	r19, r1
    270c:	2c f4       	brge	.+10     	; 0x2718 <SevenSegmantPORT_voidDisplayNum+0x5a>
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f1       	breq	.+90     	; 0x2770 <SevenSegmantPORT_voidDisplayNum+0xb2>
    2716:	df c0       	rjmp	.+446    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
    2718:	2d 81       	ldd	r18, Y+5	; 0x05
    271a:	3e 81       	ldd	r19, Y+6	; 0x06
    271c:	22 30       	cpi	r18, 0x02	; 2
    271e:	31 05       	cpc	r19, r1
    2720:	89 f1       	breq	.+98     	; 0x2784 <SevenSegmantPORT_voidDisplayNum+0xc6>
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	91 05       	cpc	r25, r1
    272a:	89 f1       	breq	.+98     	; 0x278e <SevenSegmantPORT_voidDisplayNum+0xd0>
    272c:	d4 c0       	rjmp	.+424    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
    272e:	2d 81       	ldd	r18, Y+5	; 0x05
    2730:	3e 81       	ldd	r19, Y+6	; 0x06
    2732:	27 30       	cpi	r18, 0x07	; 7
    2734:	31 05       	cpc	r19, r1
    2736:	09 f4       	brne	.+2      	; 0x273a <SevenSegmantPORT_voidDisplayNum+0x7c>
    2738:	3e c0       	rjmp	.+124    	; 0x27b6 <SevenSegmantPORT_voidDisplayNum+0xf8>
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	88 30       	cpi	r24, 0x08	; 8
    2740:	91 05       	cpc	r25, r1
    2742:	5c f4       	brge	.+22     	; 0x275a <SevenSegmantPORT_voidDisplayNum+0x9c>
    2744:	2d 81       	ldd	r18, Y+5	; 0x05
    2746:	3e 81       	ldd	r19, Y+6	; 0x06
    2748:	25 30       	cpi	r18, 0x05	; 5
    274a:	31 05       	cpc	r19, r1
    274c:	51 f1       	breq	.+84     	; 0x27a2 <SevenSegmantPORT_voidDisplayNum+0xe4>
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	86 30       	cpi	r24, 0x06	; 6
    2754:	91 05       	cpc	r25, r1
    2756:	51 f1       	breq	.+84     	; 0x27ac <SevenSegmantPORT_voidDisplayNum+0xee>
    2758:	be c0       	rjmp	.+380    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
    275a:	2d 81       	ldd	r18, Y+5	; 0x05
    275c:	3e 81       	ldd	r19, Y+6	; 0x06
    275e:	28 30       	cpi	r18, 0x08	; 8
    2760:	31 05       	cpc	r19, r1
    2762:	71 f1       	breq	.+92     	; 0x27c0 <SevenSegmantPORT_voidDisplayNum+0x102>
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	89 30       	cpi	r24, 0x09	; 9
    276a:	91 05       	cpc	r25, r1
    276c:	71 f1       	breq	.+92     	; 0x27ca <SevenSegmantPORT_voidDisplayNum+0x10c>
    276e:	b3 c0       	rjmp	.+358    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		{
		  case 0 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	6f e3       	ldi	r22, 0x3F	; 63
    2774:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    2778:	ae c0       	rjmp	.+348    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000110);
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	66 e0       	ldi	r22, 0x06	; 6
    277e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    2782:	a9 c0       	rjmp	.+338    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
			   	  break;
		  case 2 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01011011);
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	6b e5       	ldi	r22, 0x5B	; 91
    2788:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    278c:	a4 c0       	rjmp	.+328    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 3 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01001111);
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	6f e4       	ldi	r22, 0x4F	; 79
    2792:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    2796:	9f c0       	rjmp	.+318    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 4 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01100110);
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	66 e6       	ldi	r22, 0x66	; 102
    279c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    27a0:	9a c0       	rjmp	.+308    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101101);
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	6d e6       	ldi	r22, 0x6D	; 109
    27a6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    27aa:	95 c0       	rjmp	.+298    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111101);
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	6d e7       	ldi	r22, 0x7D	; 125
    27b0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    27b4:	90 c0       	rjmp	.+288    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000111);
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	67 e0       	ldi	r22, 0x07	; 7
    27ba:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    27be:	8b c0       	rjmp	.+278    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111111);
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	6f e7       	ldi	r22, 0x7F	; 127
    27c4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    27c8:	86 c0       	rjmp	.+268    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101111);
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	6f e6       	ldi	r22, 0x6F	; 111
    27ce:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    27d2:	81 c0       	rjmp	.+258    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		}
	}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
	else if (copy_u8SegmantType == SevenSegmant_Anode)
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	82 30       	cpi	r24, 0x02	; 2
    27d8:	09 f0       	breq	.+2      	; 0x27dc <SevenSegmantPORT_voidDisplayNum+0x11e>
    27da:	7d c0       	rjmp	.+250    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
	{
		switch (copy_u8Number)
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	3c 83       	std	Y+4, r19	; 0x04
    27e4:	2b 83       	std	Y+3, r18	; 0x03
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ea:	84 30       	cpi	r24, 0x04	; 4
    27ec:	91 05       	cpc	r25, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <SevenSegmantPORT_voidDisplayNum+0x134>
    27f0:	55 c0       	rjmp	.+170    	; 0x289c <SevenSegmantPORT_voidDisplayNum+0x1de>
    27f2:	2b 81       	ldd	r18, Y+3	; 0x03
    27f4:	3c 81       	ldd	r19, Y+4	; 0x04
    27f6:	25 30       	cpi	r18, 0x05	; 5
    27f8:	31 05       	cpc	r19, r1
    27fa:	dc f4       	brge	.+54     	; 0x2832 <SevenSegmantPORT_voidDisplayNum+0x174>
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	09 f4       	brne	.+2      	; 0x2808 <SevenSegmantPORT_voidDisplayNum+0x14a>
    2806:	3b c0       	rjmp	.+118    	; 0x287e <SevenSegmantPORT_voidDisplayNum+0x1c0>
    2808:	2b 81       	ldd	r18, Y+3	; 0x03
    280a:	3c 81       	ldd	r19, Y+4	; 0x04
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 05       	cpc	r19, r1
    2810:	2c f4       	brge	.+10     	; 0x281c <SevenSegmantPORT_voidDisplayNum+0x15e>
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f1       	breq	.+90     	; 0x2874 <SevenSegmantPORT_voidDisplayNum+0x1b6>
    281a:	5d c0       	rjmp	.+186    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
    281c:	2b 81       	ldd	r18, Y+3	; 0x03
    281e:	3c 81       	ldd	r19, Y+4	; 0x04
    2820:	22 30       	cpi	r18, 0x02	; 2
    2822:	31 05       	cpc	r19, r1
    2824:	89 f1       	breq	.+98     	; 0x2888 <SevenSegmantPORT_voidDisplayNum+0x1ca>
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	83 30       	cpi	r24, 0x03	; 3
    282c:	91 05       	cpc	r25, r1
    282e:	89 f1       	breq	.+98     	; 0x2892 <SevenSegmantPORT_voidDisplayNum+0x1d4>
    2830:	52 c0       	rjmp	.+164    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
    2832:	2b 81       	ldd	r18, Y+3	; 0x03
    2834:	3c 81       	ldd	r19, Y+4	; 0x04
    2836:	27 30       	cpi	r18, 0x07	; 7
    2838:	31 05       	cpc	r19, r1
    283a:	09 f4       	brne	.+2      	; 0x283e <SevenSegmantPORT_voidDisplayNum+0x180>
    283c:	3e c0       	rjmp	.+124    	; 0x28ba <SevenSegmantPORT_voidDisplayNum+0x1fc>
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	88 30       	cpi	r24, 0x08	; 8
    2844:	91 05       	cpc	r25, r1
    2846:	5c f4       	brge	.+22     	; 0x285e <SevenSegmantPORT_voidDisplayNum+0x1a0>
    2848:	2b 81       	ldd	r18, Y+3	; 0x03
    284a:	3c 81       	ldd	r19, Y+4	; 0x04
    284c:	25 30       	cpi	r18, 0x05	; 5
    284e:	31 05       	cpc	r19, r1
    2850:	51 f1       	breq	.+84     	; 0x28a6 <SevenSegmantPORT_voidDisplayNum+0x1e8>
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	86 30       	cpi	r24, 0x06	; 6
    2858:	91 05       	cpc	r25, r1
    285a:	51 f1       	breq	.+84     	; 0x28b0 <SevenSegmantPORT_voidDisplayNum+0x1f2>
    285c:	3c c0       	rjmp	.+120    	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
    285e:	2b 81       	ldd	r18, Y+3	; 0x03
    2860:	3c 81       	ldd	r19, Y+4	; 0x04
    2862:	28 30       	cpi	r18, 0x08	; 8
    2864:	31 05       	cpc	r19, r1
    2866:	71 f1       	breq	.+92     	; 0x28c4 <SevenSegmantPORT_voidDisplayNum+0x206>
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	89 30       	cpi	r24, 0x09	; 9
    286e:	91 05       	cpc	r25, r1
    2870:	71 f1       	breq	.+92     	; 0x28ce <SevenSegmantPORT_voidDisplayNum+0x210>
    2872:	31 c0       	rjmp	.+98     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		{
		  case 0 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	60 e4       	ldi	r22, 0x40	; 64
    2878:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    287c:	2c c0       	rjmp	.+88     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111001);
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	69 e7       	ldi	r22, 0x79	; 121
    2882:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    2886:	27 c0       	rjmp	.+78     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
			   	  break;
		  case 2 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00100100);
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	64 e2       	ldi	r22, 0x24	; 36
    288c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    2890:	22 c0       	rjmp	.+68     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 3 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00110000);
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	60 e3       	ldi	r22, 0x30	; 48
    2896:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    289a:	1d c0       	rjmp	.+58     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 4 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00011001);
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	69 e1       	ldi	r22, 0x19	; 25
    28a0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    28a4:	18 c0       	rjmp	.+48     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00010010);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	62 e1       	ldi	r22, 0x12	; 18
    28aa:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    28ae:	13 c0       	rjmp	.+38     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000010);
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	62 e0       	ldi	r22, 0x02	; 2
    28b4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    28b8:	0e c0       	rjmp	.+28     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111000);
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	68 e7       	ldi	r22, 0x78	; 120
    28be:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    28c2:	09 c0       	rjmp	.+18     	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000000);
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00010000);
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	60 e1       	ldi	r22, 0x10	; 16
    28d2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
		  	  	  break;
		  default:
		  		  break;
		}
	}
}
    28d6:	26 96       	adiw	r28, 0x06	; 6
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <LCD_voidSend_Command>:
/***************************************************/
#include <avr\delay.h>
/*********************************************************************************************************************************/

extern void LCD_voidSend_Command (u8 copy_u8Command)
{
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	2f 97       	sbiw	r28, 0x0f	; 15
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	8f 87       	std	Y+15, r24	; 0x0f
	/***********************************/
//	DIO_voidSetPortDirection (LCD_Data_PORT,DIO_OUTPUT);
//	DIO_voidSetPortDirection (LCD_CNT_PORT,DIO_OUTPUT);


	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	64 e0       	ldi	r22, 0x04	; 4
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    2908:	83 e0       	ldi	r24, 0x03	; 3
    290a:	65 e0       	ldi	r22, 0x05	; 5
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_Data_PORT,copy_u8Command);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	6f 85       	ldd	r22, Y+15	; 0x0f
    2916:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>


	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	66 e0       	ldi	r22, 0x06	; 6
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a0 e0       	ldi	r26, 0x00	; 0
    292a:	b0 e4       	ldi	r27, 0x40	; 64
    292c:	8b 87       	std	Y+11, r24	; 0x0b
    292e:	9c 87       	std	Y+12, r25	; 0x0c
    2930:	ad 87       	std	Y+13, r26	; 0x0d
    2932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2934:	6b 85       	ldd	r22, Y+11	; 0x0b
    2936:	7c 85       	ldd	r23, Y+12	; 0x0c
    2938:	8d 85       	ldd	r24, Y+13	; 0x0d
    293a:	9e 85       	ldd	r25, Y+14	; 0x0e
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a ef       	ldi	r20, 0xFA	; 250
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8f 83       	std	Y+7, r24	; 0x07
    294e:	98 87       	std	Y+8, r25	; 0x08
    2950:	a9 87       	std	Y+9, r26	; 0x09
    2952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e8       	ldi	r20, 0x80	; 128
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2968:	88 23       	and	r24, r24
    296a:	2c f4       	brge	.+10     	; 0x2976 <LCD_voidSend_Command+0x8e>
		__ticks = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	3f c0       	rjmp	.+126    	; 0x29f4 <LCD_voidSend_Command+0x10c>
	else if (__tmp > 65535)
    2976:	6f 81       	ldd	r22, Y+7	; 0x07
    2978:	78 85       	ldd	r23, Y+8	; 0x08
    297a:	89 85       	ldd	r24, Y+9	; 0x09
    297c:	9a 85       	ldd	r25, Y+10	; 0x0a
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	3f ef       	ldi	r19, 0xFF	; 255
    2982:	4f e7       	ldi	r20, 0x7F	; 127
    2984:	57 e4       	ldi	r21, 0x47	; 71
    2986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298a:	18 16       	cp	r1, r24
    298c:	4c f5       	brge	.+82     	; 0x29e0 <LCD_voidSend_Command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2990:	7c 85       	ldd	r23, Y+12	; 0x0c
    2992:	8d 85       	ldd	r24, Y+13	; 0x0d
    2994:	9e 85       	ldd	r25, Y+14	; 0x0e
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e2       	ldi	r20, 0x20	; 32
    299c:	51 e4       	ldi	r21, 0x41	; 65
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <LCD_voidSend_Command+0xee>
    29b8:	88 ec       	ldi	r24, 0xC8	; 200
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9c 83       	std	Y+4, r25	; 0x04
    29be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	9c 81       	ldd	r25, Y+4	; 0x04
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_voidSend_Command+0xdc>
    29c8:	9c 83       	std	Y+4, r25	; 0x04
    29ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <LCD_voidSend_Command+0xd0>
    29de:	14 c0       	rjmp	.+40     	; 0x2a08 <LCD_voidSend_Command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	6f 81       	ldd	r22, Y+7	; 0x07
    29e2:	78 85       	ldd	r23, Y+8	; 0x08
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_voidSend_Command+0x118>
    2a04:	9a 83       	std	Y+2, r25	; 0x02
    2a06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    2a08:	83 e0       	ldi	r24, 0x03	; 3
    2a0a:	66 e0       	ldi	r22, 0x06	; 6
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
}
    2a12:	2f 96       	adiw	r28, 0x0f	; 15
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <LCD_voidIntialization>:


extern void LCD_voidIntialization (void)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	aa 97       	sbiw	r28, 0x2a	; 42
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(35);

	/***********************************/
	/*      Set PORT A & D output      */
	/***********************************/
	DIO_voidSetPinDirection(LCD_CNT_PORT,LCD_u8RS,DIO_OUTPUT);
    2a38:	83 e0       	ldi	r24, 0x03	; 3
    2a3a:	64 e0       	ldi	r22, 0x04	; 4
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8RW, DIO_OUTPUT);
    2a42:	83 e0       	ldi	r24, 0x03	; 3
    2a44:	65 e0       	ldi	r22, 0x05	; 5
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8EN, DIO_OUTPUT);
    2a4c:	83 e0       	ldi	r24, 0x03	; 3
    2a4e:	66 e0       	ldi	r22, 0x06	; 6
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPortDirection (LCD_Data_PORT,0b11111111);
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	6f ef       	ldi	r22, 0xFF	; 255
    2a5a:	0e 94 38 0c 	call	0x1870	; 0x1870 <DIO_voidSetPortDirection>


	/***********************************/
	/*           Function Set          */
	/***********************************/
	LCD_voidSend_Command(0b00111100);//0->1
    2a5e:	8c e3       	ldi	r24, 0x3C	; 60
    2a60:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_voidSend_Command>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a0 e8       	ldi	r26, 0x80	; 128
    2a6a:	bf e3       	ldi	r27, 0x3F	; 63
    2a6c:	8f a3       	std	Y+39, r24	; 0x27
    2a6e:	98 a7       	std	Y+40, r25	; 0x28
    2a70:	a9 a7       	std	Y+41, r26	; 0x29
    2a72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a74:	6f a1       	ldd	r22, Y+39	; 0x27
    2a76:	78 a5       	ldd	r23, Y+40	; 0x28
    2a78:	89 a5       	ldd	r24, Y+41	; 0x29
    2a7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4a ef       	ldi	r20, 0xFA	; 250
    2a82:	54 e4       	ldi	r21, 0x44	; 68
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	8b a3       	std	Y+35, r24	; 0x23
    2a8e:	9c a3       	std	Y+36, r25	; 0x24
    2a90:	ad a3       	std	Y+37, r26	; 0x25
    2a92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a94:	6b a1       	ldd	r22, Y+35	; 0x23
    2a96:	7c a1       	ldd	r23, Y+36	; 0x24
    2a98:	8d a1       	ldd	r24, Y+37	; 0x25
    2a9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa8:	88 23       	and	r24, r24
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <LCD_voidIntialization+0x92>
		__ticks = 1;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9a a3       	std	Y+34, r25	; 0x22
    2ab2:	89 a3       	std	Y+33, r24	; 0x21
    2ab4:	3f c0       	rjmp	.+126    	; 0x2b34 <LCD_voidIntialization+0x110>
	else if (__tmp > 65535)
    2ab6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aba:	8d a1       	ldd	r24, Y+37	; 0x25
    2abc:	9e a1       	ldd	r25, Y+38	; 0x26
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	3f ef       	ldi	r19, 0xFF	; 255
    2ac2:	4f e7       	ldi	r20, 0x7F	; 127
    2ac4:	57 e4       	ldi	r21, 0x47	; 71
    2ac6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aca:	18 16       	cp	r1, r24
    2acc:	4c f5       	brge	.+82     	; 0x2b20 <LCD_voidIntialization+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ace:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e2       	ldi	r20, 0x20	; 32
    2adc:	51 e4       	ldi	r21, 0x41	; 65
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9a a3       	std	Y+34, r25	; 0x22
    2af4:	89 a3       	std	Y+33, r24	; 0x21
    2af6:	0f c0       	rjmp	.+30     	; 0x2b16 <LCD_voidIntialization+0xf2>
    2af8:	88 ec       	ldi	r24, 0xC8	; 200
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	98 a3       	std	Y+32, r25	; 0x20
    2afe:	8f 8f       	std	Y+31, r24	; 0x1f
    2b00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b02:	98 a1       	ldd	r25, Y+32	; 0x20
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <LCD_voidIntialization+0xe0>
    2b08:	98 a3       	std	Y+32, r25	; 0x20
    2b0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	9a a3       	std	Y+34, r25	; 0x22
    2b14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b16:	89 a1       	ldd	r24, Y+33	; 0x21
    2b18:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	69 f7       	brne	.-38     	; 0x2af8 <LCD_voidIntialization+0xd4>
    2b1e:	14 c0       	rjmp	.+40     	; 0x2b48 <LCD_voidIntialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b20:	6b a1       	ldd	r22, Y+35	; 0x23
    2b22:	7c a1       	ldd	r23, Y+36	; 0x24
    2b24:	8d a1       	ldd	r24, Y+37	; 0x25
    2b26:	9e a1       	ldd	r25, Y+38	; 0x26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9a a3       	std	Y+34, r25	; 0x22
    2b32:	89 a3       	std	Y+33, r24	; 0x21
    2b34:	89 a1       	ldd	r24, Y+33	; 0x21
    2b36:	9a a1       	ldd	r25, Y+34	; 0x22
    2b38:	9e 8f       	std	Y+30, r25	; 0x1e
    2b3a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_voidIntialization+0x11c>
    2b44:	9e 8f       	std	Y+30, r25	; 0x1e
    2b46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/***********************************/
	/*     Display off/on control      */
	/***********************************/
	LCD_voidSend_Command(0b00001111);
    2b48:	8f e0       	ldi	r24, 0x0F	; 15
    2b4a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_voidSend_Command>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	a0 e8       	ldi	r26, 0x80	; 128
    2b54:	bf e3       	ldi	r27, 0x3F	; 63
    2b56:	89 8f       	std	Y+25, r24	; 0x19
    2b58:	9a 8f       	std	Y+26, r25	; 0x1a
    2b5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a ef       	ldi	r20, 0xFA	; 250
    2b6c:	54 e4       	ldi	r21, 0x44	; 68
    2b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	8d 8b       	std	Y+21, r24	; 0x15
    2b78:	9e 8b       	std	Y+22, r25	; 0x16
    2b7a:	af 8b       	std	Y+23, r26	; 0x17
    2b7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b80:	7e 89       	ldd	r23, Y+22	; 0x16
    2b82:	8f 89       	ldd	r24, Y+23	; 0x17
    2b84:	98 8d       	ldd	r25, Y+24	; 0x18
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	2c f4       	brge	.+10     	; 0x2ba0 <LCD_voidIntialization+0x17c>
		__ticks = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	3f c0       	rjmp	.+126    	; 0x2c1e <LCD_voidIntialization+0x1fa>
	else if (__tmp > 65535)
    2ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	4f e7       	ldi	r20, 0x7F	; 127
    2bae:	57 e4       	ldi	r21, 0x47	; 71
    2bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb4:	18 16       	cp	r1, r24
    2bb6:	4c f5       	brge	.+82     	; 0x2c0a <LCD_voidIntialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e2       	ldi	r20, 0x20	; 32
    2bc6:	51 e4       	ldi	r21, 0x41	; 65
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9c 8b       	std	Y+20, r25	; 0x14
    2bde:	8b 8b       	std	Y+19, r24	; 0x13
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <LCD_voidIntialization+0x1dc>
    2be2:	88 ec       	ldi	r24, 0xC8	; 200
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9a 8b       	std	Y+18, r25	; 0x12
    2be8:	89 8b       	std	Y+17, r24	; 0x11
    2bea:	89 89       	ldd	r24, Y+17	; 0x11
    2bec:	9a 89       	ldd	r25, Y+18	; 0x12
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_voidIntialization+0x1ca>
    2bf2:	9a 8b       	std	Y+18, r25	; 0x12
    2bf4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9c 8b       	std	Y+20, r25	; 0x14
    2bfe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c00:	8b 89       	ldd	r24, Y+19	; 0x13
    2c02:	9c 89       	ldd	r25, Y+20	; 0x14
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <LCD_voidIntialization+0x1be>
    2c08:	14 c0       	rjmp	.+40     	; 0x2c32 <LCD_voidIntialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c10:	98 8d       	ldd	r25, Y+24	; 0x18
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9c 8b       	std	Y+20, r25	; 0x14
    2c1c:	8b 8b       	std	Y+19, r24	; 0x13
    2c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c20:	9c 89       	ldd	r25, Y+20	; 0x14
    2c22:	98 8b       	std	Y+16, r25	; 0x10
    2c24:	8f 87       	std	Y+15, r24	; 0x0f
    2c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c28:	98 89       	ldd	r25, Y+16	; 0x10
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <LCD_voidIntialization+0x206>
    2c2e:	98 8b       	std	Y+16, r25	; 0x10
    2c30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/***********************************/
	/*         Display Clear           */
	/***********************************/
	LCD_voidSend_Command(0b00000001);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_voidSend_Command>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e8       	ldi	r26, 0x80	; 128
    2c3e:	bf e3       	ldi	r27, 0x3F	; 63
    2c40:	8b 87       	std	Y+11, r24	; 0x0b
    2c42:	9c 87       	std	Y+12, r25	; 0x0c
    2c44:	ad 87       	std	Y+13, r26	; 0x0d
    2c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a ef       	ldi	r20, 0xFA	; 250
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8f 83       	std	Y+7, r24	; 0x07
    2c62:	98 87       	std	Y+8, r25	; 0x08
    2c64:	a9 87       	std	Y+9, r26	; 0x09
    2c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <LCD_voidIntialization+0x266>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <LCD_voidIntialization+0x2e4>
	else if (__tmp > 65535)
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <LCD_voidIntialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <LCD_voidIntialization+0x2c6>
    2ccc:	88 ec       	ldi	r24, 0xC8	; 200
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9c 83       	std	Y+4, r25	; 0x04
    2cd2:	8b 83       	std	Y+3, r24	; 0x03
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_voidIntialization+0x2b4>
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <LCD_voidIntialization+0x2a8>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <LCD_voidIntialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf6:	78 85       	ldd	r23, Y+8	; 0x08
    2cf8:	89 85       	ldd	r24, Y+9	; 0x09
    2cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9e 83       	std	Y+6, r25	; 0x06
    2d06:	8d 83       	std	Y+5, r24	; 0x05
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_voidIntialization+0x2f0>
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
	//LCD_voidSend_Command(0x06);
	/* Wait more than 1.39 ms */
	//_delay_ms(20);


}
    2d1c:	aa 96       	adiw	r28, 0x2a	; 42
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <LCD_voidSend_Data>:

extern void LCD_voidSend_Data (u8 copy_u8data)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	2f 97       	sbiw	r28, 0x0f	; 15
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8RW, DIO_LOW);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	65 e0       	ldi	r22, 0x05	; 5
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8RS, DIO_HIGH);
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	64 e0       	ldi	r22, 0x04	; 4
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_Data_PORT,copy_u8data);
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d5c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_HIGH);
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	66 e0       	ldi	r22, 0x06	; 6
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a0 e0       	ldi	r26, 0x00	; 0
    2d70:	b0 e4       	ldi	r27, 0x40	; 64
    2d72:	8b 87       	std	Y+11, r24	; 0x0b
    2d74:	9c 87       	std	Y+12, r25	; 0x0c
    2d76:	ad 87       	std	Y+13, r26	; 0x0d
    2d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	4a ef       	ldi	r20, 0xFA	; 250
    2d88:	54 e4       	ldi	r21, 0x44	; 68
    2d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	8f 83       	std	Y+7, r24	; 0x07
    2d94:	98 87       	std	Y+8, r25	; 0x08
    2d96:	a9 87       	std	Y+9, r26	; 0x09
    2d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	2c f4       	brge	.+10     	; 0x2dbc <LCD_voidSend_Data+0x8e>
		__ticks = 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	3f c0       	rjmp	.+126    	; 0x2e3a <LCD_voidSend_Data+0x10c>
	else if (__tmp > 65535)
    2dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbe:	78 85       	ldd	r23, Y+8	; 0x08
    2dc0:	89 85       	ldd	r24, Y+9	; 0x09
    2dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f e7       	ldi	r20, 0x7F	; 127
    2dca:	57 e4       	ldi	r21, 0x47	; 71
    2dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd0:	18 16       	cp	r1, r24
    2dd2:	4c f5       	brge	.+82     	; 0x2e26 <LCD_voidSend_Data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e2       	ldi	r20, 0x20	; 32
    2de2:	51 e4       	ldi	r21, 0x41	; 65
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	0f c0       	rjmp	.+30     	; 0x2e1c <LCD_voidSend_Data+0xee>
    2dfe:	88 ec       	ldi	r24, 0xC8	; 200
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9c 83       	std	Y+4, r25	; 0x04
    2e04:	8b 83       	std	Y+3, r24	; 0x03
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <LCD_voidSend_Data+0xdc>
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	9e 83       	std	Y+6, r25	; 0x06
    2e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	69 f7       	brne	.-38     	; 0x2dfe <LCD_voidSend_Data+0xd0>
    2e24:	14 c0       	rjmp	.+40     	; 0x2e4e <LCD_voidSend_Data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e26:	6f 81       	ldd	r22, Y+7	; 0x07
    2e28:	78 85       	ldd	r23, Y+8	; 0x08
    2e2a:	89 85       	ldd	r24, Y+9	; 0x09
    2e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	9a 81       	ldd	r25, Y+2	; 0x02
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <LCD_voidSend_Data+0x118>
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_LOW);
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	66 e0       	ldi	r22, 0x06	; 6
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
}
    2e58:	2f 96       	adiw	r28, 0x0f	; 15
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <LCD_voidSend_String>:

void LCD_voidSend_String (char *copy_ptrString)
{
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <LCD_voidSend_String+0x6>
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	0b c0       	rjmp	.+22     	; 0x2e90 <LCD_voidSend_String+0x26>
	while ( *copy_ptrString > 0 )
	{
		LCD_voidSend_Data (*copy_ptrString++);
    2e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7e:	20 81       	ld	r18, Z
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	9a 81       	ldd	r25, Y+2	; 0x02
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	9a 83       	std	Y+2, r25	; 0x02
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	82 2f       	mov	r24, r18
    2e8c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_voidSend_Data>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_LOW);
}

void LCD_voidSend_String (char *copy_ptrString)
{
	while ( *copy_ptrString > 0 )
    2e90:	e9 81       	ldd	r30, Y+1	; 0x01
    2e92:	fa 81       	ldd	r31, Y+2	; 0x02
    2e94:	80 81       	ld	r24, Z
    2e96:	88 23       	and	r24, r24
    2e98:	81 f7       	brne	.-32     	; 0x2e7a <LCD_voidSend_String+0x10>
	{
		LCD_voidSend_Data (*copy_ptrString++);
	}
}
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	08 95       	ret

00002ea4 <LCD_voidSend_4bitCommand>:


extern void LCD_voidSend_4bitCommand (u8 copy_u8Command)
{
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	e5 97       	sbiw	r28, 0x35	; 53
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	8d ab       	std	Y+53, r24	; 0x35
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    2eba:	83 e0       	ldi	r24, 0x03	; 3
    2ebc:	64 e0       	ldi	r22, 0x04	; 4
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    2ec4:	83 e0       	ldi	r24, 0x03	; 3
    2ec6:	65 e0       	ldi	r22, 0x05	; 5
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8Command,4));
    2ece:	8d a9       	ldd	r24, Y+53	; 0x35
    2ed0:	82 95       	swap	r24
    2ed2:	8f 70       	andi	r24, 0x0F	; 15
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	91 70       	andi	r25, 0x01	; 1
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	64 e0       	ldi	r22, 0x04	; 4
    2edc:	49 2f       	mov	r20, r25
    2ede:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8Command,5));
    2ee2:	8d a9       	ldd	r24, Y+53	; 0x35
    2ee4:	82 95       	swap	r24
    2ee6:	86 95       	lsr	r24
    2ee8:	87 70       	andi	r24, 0x07	; 7
    2eea:	98 2f       	mov	r25, r24
    2eec:	91 70       	andi	r25, 0x01	; 1
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	65 e0       	ldi	r22, 0x05	; 5
    2ef2:	49 2f       	mov	r20, r25
    2ef4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8Command,6));
    2ef8:	8d a9       	ldd	r24, Y+53	; 0x35
    2efa:	82 95       	swap	r24
    2efc:	86 95       	lsr	r24
    2efe:	86 95       	lsr	r24
    2f00:	83 70       	andi	r24, 0x03	; 3
    2f02:	98 2f       	mov	r25, r24
    2f04:	91 70       	andi	r25, 0x01	; 1
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	66 e0       	ldi	r22, 0x06	; 6
    2f0a:	49 2f       	mov	r20, r25
    2f0c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8Command,7));
    2f10:	8d a9       	ldd	r24, Y+53	; 0x35
    2f12:	98 2f       	mov	r25, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	99 27       	eor	r25, r25
    2f18:	99 1f       	adc	r25, r25
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	67 e0       	ldi	r22, 0x07	; 7
    2f1e:	49 2f       	mov	r20, r25
    2f20:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    2f24:	83 e0       	ldi	r24, 0x03	; 3
    2f26:	66 e0       	ldi	r22, 0x06	; 6
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a0 e0       	ldi	r26, 0x00	; 0
    2f34:	b0 e4       	ldi	r27, 0x40	; 64
    2f36:	89 ab       	std	Y+49, r24	; 0x31
    2f38:	9a ab       	std	Y+50, r25	; 0x32
    2f3a:	ab ab       	std	Y+51, r26	; 0x33
    2f3c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f40:	7a a9       	ldd	r23, Y+50	; 0x32
    2f42:	8b a9       	ldd	r24, Y+51	; 0x33
    2f44:	9c a9       	ldd	r25, Y+52	; 0x34
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a ef       	ldi	r20, 0xFA	; 250
    2f4c:	54 e4       	ldi	r21, 0x44	; 68
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8d a7       	std	Y+45, r24	; 0x2d
    2f58:	9e a7       	std	Y+46, r25	; 0x2e
    2f5a:	af a7       	std	Y+47, r26	; 0x2f
    2f5c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2f5e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f60:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f64:	98 a9       	ldd	r25, Y+48	; 0x30
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <LCD_voidSend_4bitCommand+0xdc>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9c a7       	std	Y+44, r25	; 0x2c
    2f7c:	8b a7       	std	Y+43, r24	; 0x2b
    2f7e:	3f c0       	rjmp	.+126    	; 0x2ffe <LCD_voidSend_4bitCommand+0x15a>
	else if (__tmp > 65535)
    2f80:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f82:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f86:	98 a9       	ldd	r25, Y+48	; 0x30
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	4c f5       	brge	.+82     	; 0x2fea <LCD_voidSend_4bitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	69 a9       	ldd	r22, Y+49	; 0x31
    2f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9c a7       	std	Y+44, r25	; 0x2c
    2fbe:	8b a7       	std	Y+43, r24	; 0x2b
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <LCD_voidSend_4bitCommand+0x13c>
    2fc2:	88 ec       	ldi	r24, 0xC8	; 200
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9a a7       	std	Y+42, r25	; 0x2a
    2fc8:	89 a7       	std	Y+41, r24	; 0x29
    2fca:	89 a5       	ldd	r24, Y+41	; 0x29
    2fcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_voidSend_4bitCommand+0x12a>
    2fd2:	9a a7       	std	Y+42, r25	; 0x2a
    2fd4:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9c a7       	std	Y+44, r25	; 0x2c
    2fde:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <LCD_voidSend_4bitCommand+0x11e>
    2fe8:	14 c0       	rjmp	.+40     	; 0x3012 <LCD_voidSend_4bitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fec:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9c a7       	std	Y+44, r25	; 0x2c
    2ffc:	8b a7       	std	Y+43, r24	; 0x2b
    2ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3000:	9c a5       	ldd	r25, Y+44	; 0x2c
    3002:	98 a7       	std	Y+40, r25	; 0x28
    3004:	8f a3       	std	Y+39, r24	; 0x27
    3006:	8f a1       	ldd	r24, Y+39	; 0x27
    3008:	98 a5       	ldd	r25, Y+40	; 0x28
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <LCD_voidSend_4bitCommand+0x166>
    300e:	98 a7       	std	Y+40, r25	; 0x28
    3010:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	66 e0       	ldi	r22, 0x06	; 6
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a8 e4       	ldi	r26, 0x48	; 72
    3022:	b3 e4       	ldi	r27, 0x43	; 67
    3024:	8b a3       	std	Y+35, r24	; 0x23
    3026:	9c a3       	std	Y+36, r25	; 0x24
    3028:	ad a3       	std	Y+37, r26	; 0x25
    302a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    302c:	6b a1       	ldd	r22, Y+35	; 0x23
    302e:	7c a1       	ldd	r23, Y+36	; 0x24
    3030:	8d a1       	ldd	r24, Y+37	; 0x25
    3032:	9e a1       	ldd	r25, Y+38	; 0x26
    3034:	2b ea       	ldi	r18, 0xAB	; 171
    3036:	3a ea       	ldi	r19, 0xAA	; 170
    3038:	4a e2       	ldi	r20, 0x2A	; 42
    303a:	50 e4       	ldi	r21, 0x40	; 64
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	8f 8f       	std	Y+31, r24	; 0x1f
    3046:	98 a3       	std	Y+32, r25	; 0x20
    3048:	a9 a3       	std	Y+33, r26	; 0x21
    304a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    304c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    304e:	78 a1       	ldd	r23, Y+32	; 0x20
    3050:	89 a1       	ldd	r24, Y+33	; 0x21
    3052:	9a a1       	ldd	r25, Y+34	; 0x22
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3060:	88 23       	and	r24, r24
    3062:	1c f4       	brge	.+6      	; 0x306a <LCD_voidSend_4bitCommand+0x1c6>
		__ticks = 1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	8e 8f       	std	Y+30, r24	; 0x1e
    3068:	91 c0       	rjmp	.+290    	; 0x318c <LCD_voidSend_4bitCommand+0x2e8>
	else if (__tmp > 255)
    306a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    306c:	78 a1       	ldd	r23, Y+32	; 0x20
    306e:	89 a1       	ldd	r24, Y+33	; 0x21
    3070:	9a a1       	ldd	r25, Y+34	; 0x22
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	53 e4       	ldi	r21, 0x43	; 67
    307a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    307e:	18 16       	cp	r1, r24
    3080:	0c f0       	brlt	.+2      	; 0x3084 <LCD_voidSend_4bitCommand+0x1e0>
    3082:	7b c0       	rjmp	.+246    	; 0x317a <LCD_voidSend_4bitCommand+0x2d6>
	{
		_delay_ms(__us / 1000.0);
    3084:	6b a1       	ldd	r22, Y+35	; 0x23
    3086:	7c a1       	ldd	r23, Y+36	; 0x24
    3088:	8d a1       	ldd	r24, Y+37	; 0x25
    308a:	9e a1       	ldd	r25, Y+38	; 0x26
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4a e7       	ldi	r20, 0x7A	; 122
    3092:	54 e4       	ldi	r21, 0x44	; 68
    3094:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	8a 8f       	std	Y+26, r24	; 0x1a
    309e:	9b 8f       	std	Y+27, r25	; 0x1b
    30a0:	ac 8f       	std	Y+28, r26	; 0x1c
    30a2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a ef       	ldi	r20, 0xFA	; 250
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8e 8b       	std	Y+22, r24	; 0x16
    30be:	9f 8b       	std	Y+23, r25	; 0x17
    30c0:	a8 8f       	std	Y+24, r26	; 0x18
    30c2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    30c4:	6e 89       	ldd	r22, Y+22	; 0x16
    30c6:	7f 89       	ldd	r23, Y+23	; 0x17
    30c8:	88 8d       	ldd	r24, Y+24	; 0x18
    30ca:	99 8d       	ldd	r25, Y+25	; 0x19
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	2c f4       	brge	.+10     	; 0x30e6 <LCD_voidSend_4bitCommand+0x242>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9d 8b       	std	Y+21, r25	; 0x15
    30e2:	8c 8b       	std	Y+20, r24	; 0x14
    30e4:	3f c0       	rjmp	.+126    	; 0x3164 <LCD_voidSend_4bitCommand+0x2c0>
	else if (__tmp > 65535)
    30e6:	6e 89       	ldd	r22, Y+22	; 0x16
    30e8:	7f 89       	ldd	r23, Y+23	; 0x17
    30ea:	88 8d       	ldd	r24, Y+24	; 0x18
    30ec:	99 8d       	ldd	r25, Y+25	; 0x19
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	4c f5       	brge	.+82     	; 0x3150 <LCD_voidSend_4bitCommand+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3100:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3102:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3104:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9d 8b       	std	Y+21, r25	; 0x15
    3124:	8c 8b       	std	Y+20, r24	; 0x14
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <LCD_voidSend_4bitCommand+0x2a2>
    3128:	88 ec       	ldi	r24, 0xC8	; 200
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	9b 8b       	std	Y+19, r25	; 0x13
    312e:	8a 8b       	std	Y+18, r24	; 0x12
    3130:	8a 89       	ldd	r24, Y+18	; 0x12
    3132:	9b 89       	ldd	r25, Y+19	; 0x13
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <LCD_voidSend_4bitCommand+0x290>
    3138:	9b 8b       	std	Y+19, r25	; 0x13
    313a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	8c 89       	ldd	r24, Y+20	; 0x14
    313e:	9d 89       	ldd	r25, Y+21	; 0x15
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9d 8b       	std	Y+21, r25	; 0x15
    3144:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3146:	8c 89       	ldd	r24, Y+20	; 0x14
    3148:	9d 89       	ldd	r25, Y+21	; 0x15
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	69 f7       	brne	.-38     	; 0x3128 <LCD_voidSend_4bitCommand+0x284>
    314e:	24 c0       	rjmp	.+72     	; 0x3198 <LCD_voidSend_4bitCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	6e 89       	ldd	r22, Y+22	; 0x16
    3152:	7f 89       	ldd	r23, Y+23	; 0x17
    3154:	88 8d       	ldd	r24, Y+24	; 0x18
    3156:	99 8d       	ldd	r25, Y+25	; 0x19
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9d 8b       	std	Y+21, r25	; 0x15
    3162:	8c 8b       	std	Y+20, r24	; 0x14
    3164:	8c 89       	ldd	r24, Y+20	; 0x14
    3166:	9d 89       	ldd	r25, Y+21	; 0x15
    3168:	99 8b       	std	Y+17, r25	; 0x11
    316a:	88 8b       	std	Y+16, r24	; 0x10
    316c:	88 89       	ldd	r24, Y+16	; 0x10
    316e:	99 89       	ldd	r25, Y+17	; 0x11
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_voidSend_4bitCommand+0x2cc>
    3174:	99 8b       	std	Y+17, r25	; 0x11
    3176:	88 8b       	std	Y+16, r24	; 0x10
    3178:	0f c0       	rjmp	.+30     	; 0x3198 <LCD_voidSend_4bitCommand+0x2f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    317a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    317c:	78 a1       	ldd	r23, Y+32	; 0x20
    317e:	89 a1       	ldd	r24, Y+33	; 0x21
    3180:	9a a1       	ldd	r25, Y+34	; 0x22
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	8e 8f       	std	Y+30, r24	; 0x1e
    318c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    318e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3190:	8f 85       	ldd	r24, Y+15	; 0x0f
    3192:	8a 95       	dec	r24
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_voidSend_4bitCommand+0x2ee>
    3196:	8f 87       	std	Y+15, r24	; 0x0f
		/*///////////////////////////////////////////////////////////////////////////////////*/
		_delay_us(200);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    3198:	83 e0       	ldi	r24, 0x03	; 3
    319a:	64 e0       	ldi	r22, 0x04	; 4
    319c:	40 e0       	ldi	r20, 0x00	; 0
    319e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    31a2:	83 e0       	ldi	r24, 0x03	; 3
    31a4:	65 e0       	ldi	r22, 0x05	; 5
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8Command,0));
    31ac:	8d a9       	ldd	r24, Y+53	; 0x35
    31ae:	98 2f       	mov	r25, r24
    31b0:	91 70       	andi	r25, 0x01	; 1
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	64 e0       	ldi	r22, 0x04	; 4
    31b6:	49 2f       	mov	r20, r25
    31b8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8Command,1));
    31bc:	8d a9       	ldd	r24, Y+53	; 0x35
    31be:	86 95       	lsr	r24
    31c0:	98 2f       	mov	r25, r24
    31c2:	91 70       	andi	r25, 0x01	; 1
    31c4:	82 e0       	ldi	r24, 0x02	; 2
    31c6:	65 e0       	ldi	r22, 0x05	; 5
    31c8:	49 2f       	mov	r20, r25
    31ca:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8Command,2));
    31ce:	8d a9       	ldd	r24, Y+53	; 0x35
    31d0:	86 95       	lsr	r24
    31d2:	86 95       	lsr	r24
    31d4:	98 2f       	mov	r25, r24
    31d6:	91 70       	andi	r25, 0x01	; 1
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	66 e0       	ldi	r22, 0x06	; 6
    31dc:	49 2f       	mov	r20, r25
    31de:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8Command,3));
    31e2:	8d a9       	ldd	r24, Y+53	; 0x35
    31e4:	86 95       	lsr	r24
    31e6:	86 95       	lsr	r24
    31e8:	86 95       	lsr	r24
    31ea:	98 2f       	mov	r25, r24
    31ec:	91 70       	andi	r25, 0x01	; 1
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	67 e0       	ldi	r22, 0x07	; 7
    31f2:	49 2f       	mov	r20, r25
    31f4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	66 e0       	ldi	r22, 0x06	; 6
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e4       	ldi	r27, 0x40	; 64
    320a:	8b 87       	std	Y+11, r24	; 0x0b
    320c:	9c 87       	std	Y+12, r25	; 0x0c
    320e:	ad 87       	std	Y+13, r26	; 0x0d
    3210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6b 85       	ldd	r22, Y+11	; 0x0b
    3214:	7c 85       	ldd	r23, Y+12	; 0x0c
    3216:	8d 85       	ldd	r24, Y+13	; 0x0d
    3218:	9e 85       	ldd	r25, Y+14	; 0x0e
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8f 83       	std	Y+7, r24	; 0x07
    322c:	98 87       	std	Y+8, r25	; 0x08
    322e:	a9 87       	std	Y+9, r26	; 0x09
    3230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <LCD_voidSend_4bitCommand+0x3b0>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <LCD_voidSend_4bitCommand+0x42e>
	else if (__tmp > 65535)
    3254:	6f 81       	ldd	r22, Y+7	; 0x07
    3256:	78 85       	ldd	r23, Y+8	; 0x08
    3258:	89 85       	ldd	r24, Y+9	; 0x09
    325a:	9a 85       	ldd	r25, Y+10	; 0x0a
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <LCD_voidSend_4bitCommand+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6b 85       	ldd	r22, Y+11	; 0x0b
    326e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3270:	8d 85       	ldd	r24, Y+13	; 0x0d
    3272:	9e 85       	ldd	r25, Y+14	; 0x0e
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <LCD_voidSend_4bitCommand+0x410>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9c 83       	std	Y+4, r25	; 0x04
    329c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_voidSend_4bitCommand+0x3fe>
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	9e 83       	std	Y+6, r25	; 0x06
    32b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <LCD_voidSend_4bitCommand+0x3f2>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <LCD_voidSend_4bitCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	6f 81       	ldd	r22, Y+7	; 0x07
    32c0:	78 85       	ldd	r23, Y+8	; 0x08
    32c2:	89 85       	ldd	r24, Y+9	; 0x09
    32c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_voidSend_4bitCommand+0x43a>
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    32e6:	83 e0       	ldi	r24, 0x03	; 3
    32e8:	66 e0       	ldi	r22, 0x06	; 6
    32ea:	40 e0       	ldi	r20, 0x00	; 0
    32ec:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
}
    32f0:	e5 96       	adiw	r28, 0x35	; 53
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <LCD_4bitIntialization>:

extern void LCD_4bitIntialization (void)
{
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	2e 97       	sbiw	r28, 0x0e	; 14
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_CNT_PORT,LCD_u8RS,DIO_OUTPUT);
    3316:	83 e0       	ldi	r24, 0x03	; 3
    3318:	64 e0       	ldi	r22, 0x04	; 4
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8RW, DIO_OUTPUT);
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	65 e0       	ldi	r22, 0x05	; 5
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8EN, DIO_OUTPUT);
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	66 e0       	ldi	r22, 0x06	; 6
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN4,DIO_OUTPUT);
    3334:	82 e0       	ldi	r24, 0x02	; 2
    3336:	64 e0       	ldi	r22, 0x04	; 4
    3338:	41 e0       	ldi	r20, 0x01	; 1
    333a:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN5,DIO_OUTPUT);
    333e:	82 e0       	ldi	r24, 0x02	; 2
    3340:	65 e0       	ldi	r22, 0x05	; 5
    3342:	41 e0       	ldi	r20, 0x01	; 1
    3344:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN6,DIO_OUTPUT);
    3348:	82 e0       	ldi	r24, 0x02	; 2
    334a:	66 e0       	ldi	r22, 0x06	; 6
    334c:	41 e0       	ldi	r20, 0x01	; 1
    334e:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN7,DIO_OUTPUT);
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	67 e0       	ldi	r22, 0x07	; 7
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	a0 ea       	ldi	r26, 0xA0	; 160
    3362:	b1 e4       	ldi	r27, 0x41	; 65
    3364:	8b 87       	std	Y+11, r24	; 0x0b
    3366:	9c 87       	std	Y+12, r25	; 0x0c
    3368:	ad 87       	std	Y+13, r26	; 0x0d
    336a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336c:	6b 85       	ldd	r22, Y+11	; 0x0b
    336e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3370:	8d 85       	ldd	r24, Y+13	; 0x0d
    3372:	9e 85       	ldd	r25, Y+14	; 0x0e
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	4a ef       	ldi	r20, 0xFA	; 250
    337a:	54 e4       	ldi	r21, 0x44	; 68
    337c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	8f 83       	std	Y+7, r24	; 0x07
    3386:	98 87       	std	Y+8, r25	; 0x08
    3388:	a9 87       	std	Y+9, r26	; 0x09
    338a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    338c:	6f 81       	ldd	r22, Y+7	; 0x07
    338e:	78 85       	ldd	r23, Y+8	; 0x08
    3390:	89 85       	ldd	r24, Y+9	; 0x09
    3392:	9a 85       	ldd	r25, Y+10	; 0x0a
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e8       	ldi	r20, 0x80	; 128
    339a:	5f e3       	ldi	r21, 0x3F	; 63
    339c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a0:	88 23       	and	r24, r24
    33a2:	2c f4       	brge	.+10     	; 0x33ae <LCD_4bitIntialization+0xac>
		__ticks = 1;
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	9e 83       	std	Y+6, r25	; 0x06
    33aa:	8d 83       	std	Y+5, r24	; 0x05
    33ac:	3f c0       	rjmp	.+126    	; 0x342c <LCD_4bitIntialization+0x12a>
	else if (__tmp > 65535)
    33ae:	6f 81       	ldd	r22, Y+7	; 0x07
    33b0:	78 85       	ldd	r23, Y+8	; 0x08
    33b2:	89 85       	ldd	r24, Y+9	; 0x09
    33b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	3f ef       	ldi	r19, 0xFF	; 255
    33ba:	4f e7       	ldi	r20, 0x7F	; 127
    33bc:	57 e4       	ldi	r21, 0x47	; 71
    33be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c2:	18 16       	cp	r1, r24
    33c4:	4c f5       	brge	.+82     	; 0x3418 <LCD_4bitIntialization+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    33cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	40 e2       	ldi	r20, 0x20	; 32
    33d4:	51 e4       	ldi	r21, 0x41	; 65
    33d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	8d 83       	std	Y+5, r24	; 0x05
    33ee:	0f c0       	rjmp	.+30     	; 0x340e <LCD_4bitIntialization+0x10c>
    33f0:	88 ec       	ldi	r24, 0xC8	; 200
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	9c 83       	std	Y+4, r25	; 0x04
    33f6:	8b 83       	std	Y+3, r24	; 0x03
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	9c 81       	ldd	r25, Y+4	; 0x04
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <LCD_4bitIntialization+0xfa>
    3400:	9c 83       	std	Y+4, r25	; 0x04
    3402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	9e 81       	ldd	r25, Y+6	; 0x06
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	9e 83       	std	Y+6, r25	; 0x06
    340c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    340e:	8d 81       	ldd	r24, Y+5	; 0x05
    3410:	9e 81       	ldd	r25, Y+6	; 0x06
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	69 f7       	brne	.-38     	; 0x33f0 <LCD_4bitIntialization+0xee>
    3416:	14 c0       	rjmp	.+40     	; 0x3440 <LCD_4bitIntialization+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3418:	6f 81       	ldd	r22, Y+7	; 0x07
    341a:	78 85       	ldd	r23, Y+8	; 0x08
    341c:	89 85       	ldd	r24, Y+9	; 0x09
    341e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	9a 81       	ldd	r25, Y+2	; 0x02
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_4bitIntialization+0x136>
    343c:	9a 83       	std	Y+2, r25	; 0x02
    343e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

		LCD_voidSend_4bitCommand(0x33);
    3440:	83 e3       	ldi	r24, 0x33	; 51
    3442:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    3446:	82 e3       	ldi	r24, 0x32	; 50
    3448:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    344c:	88 e2       	ldi	r24, 0x28	; 40
    344e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x0c);	/* Display on cursor off */
    3452:	8c e0       	ldi	r24, 0x0C	; 12
    3454:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x06);	/* Increment cursor (shift cursor to right) */
    3458:	86 e0       	ldi	r24, 0x06	; 6
    345a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x01);	/* Clear display screen */
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
}
    3464:	2e 96       	adiw	r28, 0x0e	; 14
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <LCD_voidSend_4bitData>:


extern void LCD_voidSend_4bitData (u8 copy_u8data)
{
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	e5 97       	sbiw	r28, 0x35	; 53
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	8d ab       	std	Y+53, r24	; 0x35
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8data,4));
    348c:	8d a9       	ldd	r24, Y+53	; 0x35
    348e:	82 95       	swap	r24
    3490:	8f 70       	andi	r24, 0x0F	; 15
    3492:	98 2f       	mov	r25, r24
    3494:	91 70       	andi	r25, 0x01	; 1
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	64 e0       	ldi	r22, 0x04	; 4
    349a:	49 2f       	mov	r20, r25
    349c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8data,5));
    34a0:	8d a9       	ldd	r24, Y+53	; 0x35
    34a2:	82 95       	swap	r24
    34a4:	86 95       	lsr	r24
    34a6:	87 70       	andi	r24, 0x07	; 7
    34a8:	98 2f       	mov	r25, r24
    34aa:	91 70       	andi	r25, 0x01	; 1
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	65 e0       	ldi	r22, 0x05	; 5
    34b0:	49 2f       	mov	r20, r25
    34b2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8data,6));
    34b6:	8d a9       	ldd	r24, Y+53	; 0x35
    34b8:	82 95       	swap	r24
    34ba:	86 95       	lsr	r24
    34bc:	86 95       	lsr	r24
    34be:	83 70       	andi	r24, 0x03	; 3
    34c0:	98 2f       	mov	r25, r24
    34c2:	91 70       	andi	r25, 0x01	; 1
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	66 e0       	ldi	r22, 0x06	; 6
    34c8:	49 2f       	mov	r20, r25
    34ca:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8data,7));
    34ce:	8d a9       	ldd	r24, Y+53	; 0x35
    34d0:	98 2f       	mov	r25, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	99 27       	eor	r25, r25
    34d6:	99 1f       	adc	r25, r25
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	67 e0       	ldi	r22, 0x07	; 7
    34dc:	49 2f       	mov	r20, r25
    34de:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_HIGH);
    34e2:	83 e0       	ldi	r24, 0x03	; 3
    34e4:	64 e0       	ldi	r22, 0x04	; 4
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    34ec:	83 e0       	ldi	r24, 0x03	; 3
    34ee:	66 e0       	ldi	r22, 0x06	; 6
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	a0 e0       	ldi	r26, 0x00	; 0
    34fc:	b0 e4       	ldi	r27, 0x40	; 64
    34fe:	89 ab       	std	Y+49, r24	; 0x31
    3500:	9a ab       	std	Y+50, r25	; 0x32
    3502:	ab ab       	std	Y+51, r26	; 0x33
    3504:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3506:	69 a9       	ldd	r22, Y+49	; 0x31
    3508:	7a a9       	ldd	r23, Y+50	; 0x32
    350a:	8b a9       	ldd	r24, Y+51	; 0x33
    350c:	9c a9       	ldd	r25, Y+52	; 0x34
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	4a ef       	ldi	r20, 0xFA	; 250
    3514:	54 e4       	ldi	r21, 0x44	; 68
    3516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	8d a7       	std	Y+45, r24	; 0x2d
    3520:	9e a7       	std	Y+46, r25	; 0x2e
    3522:	af a7       	std	Y+47, r26	; 0x2f
    3524:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3526:	6d a5       	ldd	r22, Y+45	; 0x2d
    3528:	7e a5       	ldd	r23, Y+46	; 0x2e
    352a:	8f a5       	ldd	r24, Y+47	; 0x2f
    352c:	98 a9       	ldd	r25, Y+48	; 0x30
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e8       	ldi	r20, 0x80	; 128
    3534:	5f e3       	ldi	r21, 0x3F	; 63
    3536:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    353a:	88 23       	and	r24, r24
    353c:	2c f4       	brge	.+10     	; 0x3548 <LCD_voidSend_4bitData+0xd2>
		__ticks = 1;
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	9c a7       	std	Y+44, r25	; 0x2c
    3544:	8b a7       	std	Y+43, r24	; 0x2b
    3546:	3f c0       	rjmp	.+126    	; 0x35c6 <LCD_voidSend_4bitData+0x150>
	else if (__tmp > 65535)
    3548:	6d a5       	ldd	r22, Y+45	; 0x2d
    354a:	7e a5       	ldd	r23, Y+46	; 0x2e
    354c:	8f a5       	ldd	r24, Y+47	; 0x2f
    354e:	98 a9       	ldd	r25, Y+48	; 0x30
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	3f ef       	ldi	r19, 0xFF	; 255
    3554:	4f e7       	ldi	r20, 0x7F	; 127
    3556:	57 e4       	ldi	r21, 0x47	; 71
    3558:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355c:	18 16       	cp	r1, r24
    355e:	4c f5       	brge	.+82     	; 0x35b2 <LCD_voidSend_4bitData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3560:	69 a9       	ldd	r22, Y+49	; 0x31
    3562:	7a a9       	ldd	r23, Y+50	; 0x32
    3564:	8b a9       	ldd	r24, Y+51	; 0x33
    3566:	9c a9       	ldd	r25, Y+52	; 0x34
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e2       	ldi	r20, 0x20	; 32
    356e:	51 e4       	ldi	r21, 0x41	; 65
    3570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	bc 01       	movw	r22, r24
    357a:	cd 01       	movw	r24, r26
    357c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	9c a7       	std	Y+44, r25	; 0x2c
    3586:	8b a7       	std	Y+43, r24	; 0x2b
    3588:	0f c0       	rjmp	.+30     	; 0x35a8 <LCD_voidSend_4bitData+0x132>
    358a:	88 ec       	ldi	r24, 0xC8	; 200
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	9a a7       	std	Y+42, r25	; 0x2a
    3590:	89 a7       	std	Y+41, r24	; 0x29
    3592:	89 a5       	ldd	r24, Y+41	; 0x29
    3594:	9a a5       	ldd	r25, Y+42	; 0x2a
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	f1 f7       	brne	.-4      	; 0x3596 <LCD_voidSend_4bitData+0x120>
    359a:	9a a7       	std	Y+42, r25	; 0x2a
    359c:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359e:	8b a5       	ldd	r24, Y+43	; 0x2b
    35a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	9c a7       	std	Y+44, r25	; 0x2c
    35a6:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    35aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ac:	00 97       	sbiw	r24, 0x00	; 0
    35ae:	69 f7       	brne	.-38     	; 0x358a <LCD_voidSend_4bitData+0x114>
    35b0:	14 c0       	rjmp	.+40     	; 0x35da <LCD_voidSend_4bitData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    35b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    35b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b8:	98 a9       	ldd	r25, Y+48	; 0x30
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	9c a7       	std	Y+44, r25	; 0x2c
    35c4:	8b a7       	std	Y+43, r24	; 0x2b
    35c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    35c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ca:	98 a7       	std	Y+40, r25	; 0x28
    35cc:	8f a3       	std	Y+39, r24	; 0x27
    35ce:	8f a1       	ldd	r24, Y+39	; 0x27
    35d0:	98 a5       	ldd	r25, Y+40	; 0x28
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <LCD_voidSend_4bitData+0x15c>
    35d6:	98 a7       	std	Y+40, r25	; 0x28
    35d8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	66 e0       	ldi	r22, 0x06	; 6
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a8 e4       	ldi	r26, 0x48	; 72
    35ea:	b3 e4       	ldi	r27, 0x43	; 67
    35ec:	8b a3       	std	Y+35, r24	; 0x23
    35ee:	9c a3       	std	Y+36, r25	; 0x24
    35f0:	ad a3       	std	Y+37, r26	; 0x25
    35f2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35f4:	6b a1       	ldd	r22, Y+35	; 0x23
    35f6:	7c a1       	ldd	r23, Y+36	; 0x24
    35f8:	8d a1       	ldd	r24, Y+37	; 0x25
    35fa:	9e a1       	ldd	r25, Y+38	; 0x26
    35fc:	2b ea       	ldi	r18, 0xAB	; 171
    35fe:	3a ea       	ldi	r19, 0xAA	; 170
    3600:	4a e2       	ldi	r20, 0x2A	; 42
    3602:	50 e4       	ldi	r21, 0x40	; 64
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	8f 8f       	std	Y+31, r24	; 0x1f
    360e:	98 a3       	std	Y+32, r25	; 0x20
    3610:	a9 a3       	std	Y+33, r26	; 0x21
    3612:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3614:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3616:	78 a1       	ldd	r23, Y+32	; 0x20
    3618:	89 a1       	ldd	r24, Y+33	; 0x21
    361a:	9a a1       	ldd	r25, Y+34	; 0x22
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e8       	ldi	r20, 0x80	; 128
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3628:	88 23       	and	r24, r24
    362a:	1c f4       	brge	.+6      	; 0x3632 <LCD_voidSend_4bitData+0x1bc>
		__ticks = 1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	8e 8f       	std	Y+30, r24	; 0x1e
    3630:	91 c0       	rjmp	.+290    	; 0x3754 <LCD_voidSend_4bitData+0x2de>
	else if (__tmp > 255)
    3632:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3634:	78 a1       	ldd	r23, Y+32	; 0x20
    3636:	89 a1       	ldd	r24, Y+33	; 0x21
    3638:	9a a1       	ldd	r25, Y+34	; 0x22
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	53 e4       	ldi	r21, 0x43	; 67
    3642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	0c f0       	brlt	.+2      	; 0x364c <LCD_voidSend_4bitData+0x1d6>
    364a:	7b c0       	rjmp	.+246    	; 0x3742 <LCD_voidSend_4bitData+0x2cc>
	{
		_delay_ms(__us / 1000.0);
    364c:	6b a1       	ldd	r22, Y+35	; 0x23
    364e:	7c a1       	ldd	r23, Y+36	; 0x24
    3650:	8d a1       	ldd	r24, Y+37	; 0x25
    3652:	9e a1       	ldd	r25, Y+38	; 0x26
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	4a e7       	ldi	r20, 0x7A	; 122
    365a:	54 e4       	ldi	r21, 0x44	; 68
    365c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	8a 8f       	std	Y+26, r24	; 0x1a
    3666:	9b 8f       	std	Y+27, r25	; 0x1b
    3668:	ac 8f       	std	Y+28, r26	; 0x1c
    366a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    366e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3670:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3672:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4a ef       	ldi	r20, 0xFA	; 250
    367a:	54 e4       	ldi	r21, 0x44	; 68
    367c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	8e 8b       	std	Y+22, r24	; 0x16
    3686:	9f 8b       	std	Y+23, r25	; 0x17
    3688:	a8 8f       	std	Y+24, r26	; 0x18
    368a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    368c:	6e 89       	ldd	r22, Y+22	; 0x16
    368e:	7f 89       	ldd	r23, Y+23	; 0x17
    3690:	88 8d       	ldd	r24, Y+24	; 0x18
    3692:	99 8d       	ldd	r25, Y+25	; 0x19
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a0:	88 23       	and	r24, r24
    36a2:	2c f4       	brge	.+10     	; 0x36ae <LCD_voidSend_4bitData+0x238>
		__ticks = 1;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9d 8b       	std	Y+21, r25	; 0x15
    36aa:	8c 8b       	std	Y+20, r24	; 0x14
    36ac:	3f c0       	rjmp	.+126    	; 0x372c <LCD_voidSend_4bitData+0x2b6>
	else if (__tmp > 65535)
    36ae:	6e 89       	ldd	r22, Y+22	; 0x16
    36b0:	7f 89       	ldd	r23, Y+23	; 0x17
    36b2:	88 8d       	ldd	r24, Y+24	; 0x18
    36b4:	99 8d       	ldd	r25, Y+25	; 0x19
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	3f ef       	ldi	r19, 0xFF	; 255
    36ba:	4f e7       	ldi	r20, 0x7F	; 127
    36bc:	57 e4       	ldi	r21, 0x47	; 71
    36be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	4c f5       	brge	.+82     	; 0x3718 <LCD_voidSend_4bitData+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    36c8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    36ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e2       	ldi	r20, 0x20	; 32
    36d4:	51 e4       	ldi	r21, 0x41	; 65
    36d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9d 8b       	std	Y+21, r25	; 0x15
    36ec:	8c 8b       	std	Y+20, r24	; 0x14
    36ee:	0f c0       	rjmp	.+30     	; 0x370e <LCD_voidSend_4bitData+0x298>
    36f0:	88 ec       	ldi	r24, 0xC8	; 200
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9b 8b       	std	Y+19, r25	; 0x13
    36f6:	8a 8b       	std	Y+18, r24	; 0x12
    36f8:	8a 89       	ldd	r24, Y+18	; 0x12
    36fa:	9b 89       	ldd	r25, Y+19	; 0x13
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <LCD_voidSend_4bitData+0x286>
    3700:	9b 8b       	std	Y+19, r25	; 0x13
    3702:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3704:	8c 89       	ldd	r24, Y+20	; 0x14
    3706:	9d 89       	ldd	r25, Y+21	; 0x15
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	9d 8b       	std	Y+21, r25	; 0x15
    370c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370e:	8c 89       	ldd	r24, Y+20	; 0x14
    3710:	9d 89       	ldd	r25, Y+21	; 0x15
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	69 f7       	brne	.-38     	; 0x36f0 <LCD_voidSend_4bitData+0x27a>
    3716:	24 c0       	rjmp	.+72     	; 0x3760 <LCD_voidSend_4bitData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3718:	6e 89       	ldd	r22, Y+22	; 0x16
    371a:	7f 89       	ldd	r23, Y+23	; 0x17
    371c:	88 8d       	ldd	r24, Y+24	; 0x18
    371e:	99 8d       	ldd	r25, Y+25	; 0x19
    3720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9d 8b       	std	Y+21, r25	; 0x15
    372a:	8c 8b       	std	Y+20, r24	; 0x14
    372c:	8c 89       	ldd	r24, Y+20	; 0x14
    372e:	9d 89       	ldd	r25, Y+21	; 0x15
    3730:	99 8b       	std	Y+17, r25	; 0x11
    3732:	88 8b       	std	Y+16, r24	; 0x10
    3734:	88 89       	ldd	r24, Y+16	; 0x10
    3736:	99 89       	ldd	r25, Y+17	; 0x11
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <LCD_voidSend_4bitData+0x2c2>
    373c:	99 8b       	std	Y+17, r25	; 0x11
    373e:	88 8b       	std	Y+16, r24	; 0x10
    3740:	0f c0       	rjmp	.+30     	; 0x3760 <LCD_voidSend_4bitData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3742:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3744:	78 a1       	ldd	r23, Y+32	; 0x20
    3746:	89 a1       	ldd	r24, Y+33	; 0x21
    3748:	9a a1       	ldd	r25, Y+34	; 0x22
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	8e 8f       	std	Y+30, r24	; 0x1e
    3754:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3756:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3758:	8f 85       	ldd	r24, Y+15	; 0x0f
    375a:	8a 95       	dec	r24
    375c:	f1 f7       	brne	.-4      	; 0x375a <LCD_voidSend_4bitData+0x2e4>
    375e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(200);
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8data,0));
    3760:	8d a9       	ldd	r24, Y+53	; 0x35
    3762:	98 2f       	mov	r25, r24
    3764:	91 70       	andi	r25, 0x01	; 1
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	64 e0       	ldi	r22, 0x04	; 4
    376a:	49 2f       	mov	r20, r25
    376c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8data,1));
    3770:	8d a9       	ldd	r24, Y+53	; 0x35
    3772:	86 95       	lsr	r24
    3774:	98 2f       	mov	r25, r24
    3776:	91 70       	andi	r25, 0x01	; 1
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	65 e0       	ldi	r22, 0x05	; 5
    377c:	49 2f       	mov	r20, r25
    377e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8data,2));
    3782:	8d a9       	ldd	r24, Y+53	; 0x35
    3784:	86 95       	lsr	r24
    3786:	86 95       	lsr	r24
    3788:	98 2f       	mov	r25, r24
    378a:	91 70       	andi	r25, 0x01	; 1
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	66 e0       	ldi	r22, 0x06	; 6
    3790:	49 2f       	mov	r20, r25
    3792:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8data,3));
    3796:	8d a9       	ldd	r24, Y+53	; 0x35
    3798:	86 95       	lsr	r24
    379a:	86 95       	lsr	r24
    379c:	86 95       	lsr	r24
    379e:	98 2f       	mov	r25, r24
    37a0:	91 70       	andi	r25, 0x01	; 1
    37a2:	82 e0       	ldi	r24, 0x02	; 2
    37a4:	67 e0       	ldi	r22, 0x07	; 7
    37a6:	49 2f       	mov	r20, r25
    37a8:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_HIGH);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    37ac:	83 e0       	ldi	r24, 0x03	; 3
    37ae:	66 e0       	ldi	r22, 0x06	; 6
    37b0:	41 e0       	ldi	r20, 0x01	; 1
    37b2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	a0 e0       	ldi	r26, 0x00	; 0
    37bc:	b0 e4       	ldi	r27, 0x40	; 64
    37be:	8b 87       	std	Y+11, r24	; 0x0b
    37c0:	9c 87       	std	Y+12, r25	; 0x0c
    37c2:	ad 87       	std	Y+13, r26	; 0x0d
    37c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    37cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	4a ef       	ldi	r20, 0xFA	; 250
    37d4:	54 e4       	ldi	r21, 0x44	; 68
    37d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	8f 83       	std	Y+7, r24	; 0x07
    37e0:	98 87       	std	Y+8, r25	; 0x08
    37e2:	a9 87       	std	Y+9, r26	; 0x09
    37e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37e6:	6f 81       	ldd	r22, Y+7	; 0x07
    37e8:	78 85       	ldd	r23, Y+8	; 0x08
    37ea:	89 85       	ldd	r24, Y+9	; 0x09
    37ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e8       	ldi	r20, 0x80	; 128
    37f4:	5f e3       	ldi	r21, 0x3F	; 63
    37f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37fa:	88 23       	and	r24, r24
    37fc:	2c f4       	brge	.+10     	; 0x3808 <LCD_voidSend_4bitData+0x392>
		__ticks = 1;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	9e 83       	std	Y+6, r25	; 0x06
    3804:	8d 83       	std	Y+5, r24	; 0x05
    3806:	3f c0       	rjmp	.+126    	; 0x3886 <LCD_voidSend_4bitData+0x410>
	else if (__tmp > 65535)
    3808:	6f 81       	ldd	r22, Y+7	; 0x07
    380a:	78 85       	ldd	r23, Y+8	; 0x08
    380c:	89 85       	ldd	r24, Y+9	; 0x09
    380e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	3f ef       	ldi	r19, 0xFF	; 255
    3814:	4f e7       	ldi	r20, 0x7F	; 127
    3816:	57 e4       	ldi	r21, 0x47	; 71
    3818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    381c:	18 16       	cp	r1, r24
    381e:	4c f5       	brge	.+82     	; 0x3872 <LCD_voidSend_4bitData+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3820:	6b 85       	ldd	r22, Y+11	; 0x0b
    3822:	7c 85       	ldd	r23, Y+12	; 0x0c
    3824:	8d 85       	ldd	r24, Y+13	; 0x0d
    3826:	9e 85       	ldd	r25, Y+14	; 0x0e
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e2       	ldi	r20, 0x20	; 32
    382e:	51 e4       	ldi	r21, 0x41	; 65
    3830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	bc 01       	movw	r22, r24
    383a:	cd 01       	movw	r24, r26
    383c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	9e 83       	std	Y+6, r25	; 0x06
    3846:	8d 83       	std	Y+5, r24	; 0x05
    3848:	0f c0       	rjmp	.+30     	; 0x3868 <LCD_voidSend_4bitData+0x3f2>
    384a:	88 ec       	ldi	r24, 0xC8	; 200
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	9c 83       	std	Y+4, r25	; 0x04
    3850:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3852:	8b 81       	ldd	r24, Y+3	; 0x03
    3854:	9c 81       	ldd	r25, Y+4	; 0x04
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <LCD_voidSend_4bitData+0x3e0>
    385a:	9c 83       	std	Y+4, r25	; 0x04
    385c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385e:	8d 81       	ldd	r24, Y+5	; 0x05
    3860:	9e 81       	ldd	r25, Y+6	; 0x06
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	9e 83       	std	Y+6, r25	; 0x06
    3866:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3868:	8d 81       	ldd	r24, Y+5	; 0x05
    386a:	9e 81       	ldd	r25, Y+6	; 0x06
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	69 f7       	brne	.-38     	; 0x384a <LCD_voidSend_4bitData+0x3d4>
    3870:	14 c0       	rjmp	.+40     	; 0x389a <LCD_voidSend_4bitData+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3872:	6f 81       	ldd	r22, Y+7	; 0x07
    3874:	78 85       	ldd	r23, Y+8	; 0x08
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	9e 83       	std	Y+6, r25	; 0x06
    3884:	8d 83       	std	Y+5, r24	; 0x05
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	9a 83       	std	Y+2, r25	; 0x02
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	9a 81       	ldd	r25, Y+2	; 0x02
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <LCD_voidSend_4bitData+0x41c>
    3896:	9a 83       	std	Y+2, r25	; 0x02
    3898:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    389a:	83 e0       	ldi	r24, 0x03	; 3
    389c:	66 e0       	ldi	r22, 0x06	; 6
    389e:	40 e0       	ldi	r20, 0x00	; 0
    38a0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
}
    38a4:	e5 96       	adiw	r28, 0x35	; 53
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <LCD_voidSend_4bitString>:


void LCD_voidSend_4bitString (char *copy_ptrString)
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	00 d0       	rcall	.+0      	; 0x38bc <LCD_voidSend_4bitString+0x6>
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	9a 83       	std	Y+2, r25	; 0x02
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	0b c0       	rjmp	.+22     	; 0x38dc <LCD_voidSend_4bitString+0x26>
	while ( *copy_ptrString > 0 )
	{
		LCD_voidSend_4bitData (*copy_ptrString++);
    38c6:	e9 81       	ldd	r30, Y+1	; 0x01
    38c8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ca:	20 81       	ld	r18, Z
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	9a 81       	ldd	r25, Y+2	; 0x02
    38d0:	01 96       	adiw	r24, 0x01	; 1
    38d2:	9a 83       	std	Y+2, r25	; 0x02
    38d4:	89 83       	std	Y+1, r24	; 0x01
    38d6:	82 2f       	mov	r24, r18
    38d8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_voidSend_4bitData>
}


void LCD_voidSend_4bitString (char *copy_ptrString)
{
	while ( *copy_ptrString > 0 )
    38dc:	e9 81       	ldd	r30, Y+1	; 0x01
    38de:	fa 81       	ldd	r31, Y+2	; 0x02
    38e0:	80 81       	ld	r24, Z
    38e2:	88 23       	and	r24, r24
    38e4:	81 f7       	brne	.-32     	; 0x38c6 <LCD_voidSend_4bitString+0x10>
	{
		LCD_voidSend_4bitData (*copy_ptrString++);
	}
}
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	cf 91       	pop	r28
    38ec:	df 91       	pop	r29
    38ee:	08 95       	ret

000038f0 <LCD_void4bitDisplayNumber>:

extern void LCD_void4bitDisplayNumber(u32 x)
{
    38f0:	ef 92       	push	r14
    38f2:	ff 92       	push	r15
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	28 97       	sbiw	r28, 0x08	; 8
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	6d 83       	std	Y+5, r22	; 0x05
    390e:	7e 83       	std	Y+6, r23	; 0x06
    3910:	8f 83       	std	Y+7, r24	; 0x07
    3912:	98 87       	std	Y+8, r25	; 0x08
	u32 y = 1;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	a0 e0       	ldi	r26, 0x00	; 0
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	9a 83       	std	Y+2, r25	; 0x02
    3920:	ab 83       	std	Y+3, r26	; 0x03
    3922:	bc 83       	std	Y+4, r27	; 0x04
	if (x == 0)
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
    3926:	9e 81       	ldd	r25, Y+6	; 0x06
    3928:	af 81       	ldd	r26, Y+7	; 0x07
    392a:	b8 85       	ldd	r27, Y+8	; 0x08
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	a1 05       	cpc	r26, r1
    3930:	b1 05       	cpc	r27, r1
    3932:	d1 f5       	brne	.+116    	; 0x39a8 <LCD_void4bitDisplayNumber+0xb8>
	{
		LCD_voidSend_4bitData('0');
    3934:	80 e3       	ldi	r24, 0x30	; 48
    3936:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_voidSend_4bitData>
    393a:	36 c0       	rjmp	.+108    	; 0x39a8 <LCD_void4bitDisplayNumber+0xb8>
	if (x < 0) {
		LCD_voidSend_4bitData('-');
		x *= -1;
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
    393c:	89 81       	ldd	r24, Y+1	; 0x01
    393e:	9a 81       	ldd	r25, Y+2	; 0x02
    3940:	ab 81       	ldd	r26, Y+3	; 0x03
    3942:	bc 81       	ldd	r27, Y+4	; 0x04
    3944:	2a e0       	ldi	r18, 0x0A	; 10
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <__mulsi3>
    3954:	7b 01       	movw	r14, r22
    3956:	8c 01       	movw	r16, r24
    3958:	8d 81       	ldd	r24, Y+5	; 0x05
    395a:	9e 81       	ldd	r25, Y+6	; 0x06
    395c:	af 81       	ldd	r26, Y+7	; 0x07
    395e:	b8 85       	ldd	r27, Y+8	; 0x08
    3960:	2a e0       	ldi	r18, 0x0A	; 10
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	bc 01       	movw	r22, r24
    396a:	cd 01       	movw	r24, r26
    396c:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivmodsi4>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	8e 0d       	add	r24, r14
    3976:	9f 1d       	adc	r25, r15
    3978:	a0 1f       	adc	r26, r16
    397a:	b1 1f       	adc	r27, r17
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	ab 83       	std	Y+3, r26	; 0x03
    3982:	bc 83       	std	Y+4, r27	; 0x04
		x = (x / 10);
    3984:	8d 81       	ldd	r24, Y+5	; 0x05
    3986:	9e 81       	ldd	r25, Y+6	; 0x06
    3988:	af 81       	ldd	r26, Y+7	; 0x07
    398a:	b8 85       	ldd	r27, Y+8	; 0x08
    398c:	2a e0       	ldi	r18, 0x0A	; 10
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivmodsi4>
    399c:	da 01       	movw	r26, r20
    399e:	c9 01       	movw	r24, r18
    39a0:	8d 83       	std	Y+5, r24	; 0x05
    39a2:	9e 83       	std	Y+6, r25	; 0x06
    39a4:	af 83       	std	Y+7, r26	; 0x07
    39a6:	b8 87       	std	Y+8, r27	; 0x08
	}
	if (x < 0) {
		LCD_voidSend_4bitData('-');
		x *= -1;
	}
	while (x != 0) {
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	af 81       	ldd	r26, Y+7	; 0x07
    39ae:	b8 85       	ldd	r27, Y+8	; 0x08
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	a1 05       	cpc	r26, r1
    39b4:	b1 05       	cpc	r27, r1
    39b6:	11 f6       	brne	.-124    	; 0x393c <LCD_void4bitDisplayNumber+0x4c>
    39b8:	23 c0       	rjmp	.+70     	; 0x3a00 <LCD_void4bitDisplayNumber+0x110>
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
		LCD_voidSend_4bitData((y % 10) + 48);
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	ab 81       	ldd	r26, Y+3	; 0x03
    39c0:	bc 81       	ldd	r27, Y+4	; 0x04
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e0       	ldi	r20, 0x00	; 0
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivmodsi4>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	80 5d       	subi	r24, 0xD0	; 208
    39d8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_voidSend_4bitData>
		y = (y / 10);
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	9a 81       	ldd	r25, Y+2	; 0x02
    39e0:	ab 81       	ldd	r26, Y+3	; 0x03
    39e2:	bc 81       	ldd	r27, Y+4	; 0x04
    39e4:	2a e0       	ldi	r18, 0x0A	; 10
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	50 e0       	ldi	r21, 0x00	; 0
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivmodsi4>
    39f4:	da 01       	movw	r26, r20
    39f6:	c9 01       	movw	r24, r18
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	ab 83       	std	Y+3, r26	; 0x03
    39fe:	bc 83       	std	Y+4, r27	; 0x04
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	9a 81       	ldd	r25, Y+2	; 0x02
    3a04:	ab 81       	ldd	r26, Y+3	; 0x03
    3a06:	bc 81       	ldd	r27, Y+4	; 0x04
    3a08:	81 30       	cpi	r24, 0x01	; 1
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	a1 05       	cpc	r26, r1
    3a0e:	b1 05       	cpc	r27, r1
    3a10:	a1 f6       	brne	.-88     	; 0x39ba <LCD_void4bitDisplayNumber+0xca>
		LCD_voidSend_4bitData((y % 10) + 48);
		y = (y / 10);
	}
}
    3a12:	28 96       	adiw	r28, 0x08	; 8
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ff 90       	pop	r15
    3a28:	ef 90       	pop	r14
    3a2a:	08 95       	ret

00003a2c <LCD_voidGoToPos>:


void LCD_voidGoToPos(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <LCD_voidGoToPos+0x6>
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSend_Command(0b10000000);
    3a3a:	80 e8       	ldi	r24, 0x80	; 128
    3a3c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_voidSend_Command>
		if(Copy_u8RowNum==1)
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	81 30       	cpi	r24, 0x01	; 1
    3a44:	59 f4       	brne	.+22     	; 0x3a5c <LCD_voidGoToPos+0x30>
		{
			if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	88 23       	and	r24, r24
    3a4a:	a9 f0       	breq	.+42     	; 0x3a76 <LCD_voidGoToPos+0x4a>
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	81 31       	cpi	r24, 0x11	; 17
    3a50:	90 f4       	brcc	.+36     	; 0x3a76 <LCD_voidGoToPos+0x4a>
			{LCD_voidSend_Command(127+Copy_u8ColNum);}
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	81 58       	subi	r24, 0x81	; 129
    3a56:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_voidSend_Command>
    3a5a:	0d c0       	rjmp	.+26     	; 0x3a76 <LCD_voidGoToPos+0x4a>
		}
		else if (Copy_u8RowNum==2)
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	82 30       	cpi	r24, 0x02	; 2
    3a60:	51 f4       	brne	.+20     	; 0x3a76 <LCD_voidGoToPos+0x4a>
		{
			if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3a62:	8a 81       	ldd	r24, Y+2	; 0x02
    3a64:	88 23       	and	r24, r24
    3a66:	39 f0       	breq	.+14     	; 0x3a76 <LCD_voidGoToPos+0x4a>
    3a68:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6a:	81 31       	cpi	r24, 0x11	; 17
    3a6c:	20 f4       	brcc	.+8      	; 0x3a76 <LCD_voidGoToPos+0x4a>
			{LCD_voidSend_Command(191+Copy_u8ColNum);}
    3a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a70:	81 54       	subi	r24, 0x41	; 65
    3a72:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_voidSend_Command>
		}
}
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <LCD_void4bitGoToPos>:
void LCD_void4bitGoToPos(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <LCD_void4bitGoToPos+0x6>
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    3a8c:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSend_4bitCommand(0b10000000);
    3a8e:	80 e8       	ldi	r24, 0x80	; 128
    3a90:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
			if(Copy_u8RowNum==1)
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	81 30       	cpi	r24, 0x01	; 1
    3a98:	59 f4       	brne	.+22     	; 0x3ab0 <LCD_void4bitGoToPos+0x30>
			{
				if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	88 23       	and	r24, r24
    3a9e:	a9 f0       	breq	.+42     	; 0x3aca <LCD_void4bitGoToPos+0x4a>
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	81 31       	cpi	r24, 0x11	; 17
    3aa4:	90 f4       	brcc	.+36     	; 0x3aca <LCD_void4bitGoToPos+0x4a>
				{LCD_voidSend_4bitCommand(127+Copy_u8ColNum);}
    3aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa8:	81 58       	subi	r24, 0x81	; 129
    3aaa:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
    3aae:	0d c0       	rjmp	.+26     	; 0x3aca <LCD_void4bitGoToPos+0x4a>
			}
			else if (Copy_u8RowNum==2)
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	82 30       	cpi	r24, 0x02	; 2
    3ab4:	51 f4       	brne	.+20     	; 0x3aca <LCD_void4bitGoToPos+0x4a>
			{
				if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	88 23       	and	r24, r24
    3aba:	39 f0       	breq	.+14     	; 0x3aca <LCD_void4bitGoToPos+0x4a>
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	81 31       	cpi	r24, 0x11	; 17
    3ac0:	20 f4       	brcc	.+8      	; 0x3aca <LCD_void4bitGoToPos+0x4a>
				{LCD_voidSend_4bitCommand(191+Copy_u8ColNum);}
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	81 54       	subi	r24, 0x41	; 65
    3ac6:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
			}
}
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	cf 91       	pop	r28
    3ad0:	df 91       	pop	r29
    3ad2:	08 95       	ret

00003ad4 <KBD_voidInitialization>:
											{ '@', '0', '*'}
                                          };
/*********************************************************************************************************************************/
/* Initialization to set the keypad pins and ports */
extern void KBD_voidInitialization (void)
{
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
	/* This instruction is to set half of pins to be input ant the other half to be output */
	DIO_voidSetPortDirection(KBD_PORT_HW, 0b11110000 );
    3adc:	83 e0       	ldi	r24, 0x03	; 3
    3ade:	60 ef       	ldi	r22, 0xF0	; 240
    3ae0:	0e 94 38 0c 	call	0x1870	; 0x1870 <DIO_voidSetPortDirection>
	/* This instruction is to out high on the pins which are o/p and to switch the pull up resistors on for the i/p pins  */
	DIO_voidSetPortValue(KBD_PORT_HW ,0b01111111);
    3ae4:	83 e0       	ldi	r24, 0x03	; 3
    3ae6:	6f e7       	ldi	r22, 0x7F	; 127
    3ae8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_voidSetPortValue>
}
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <KBD_u8GetKeyPressed>:


extern u8 KBD_u8GetKeyPressed(void)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	63 97       	sbiw	r28, 0x13	; 19
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{

		/* The first for loop is to check on each column individually to set it as 0 */
		for (u8 i=0 ; i < KBD_COL_NUM ; i++)
    3b06:	18 8a       	std	Y+16, r1	; 0x10
    3b08:	00 c1       	rjmp	.+512    	; 0x3d0a <KBD_u8GetKeyPressed+0x218>
			{
					/* activate only one column, then read all rows  */
					CLR_BIT( KBD_PORT, KBD_u8Cols[i] );
    3b0a:	a2 e3       	ldi	r26, 0x32	; 50
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	e2 e3       	ldi	r30, 0x32	; 50
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	48 2f       	mov	r20, r24
    3b16:	88 89       	ldd	r24, Y+16	; 0x10
    3b18:	88 2f       	mov	r24, r24
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 57       	subi	r30, 0x72	; 114
    3b20:	fe 4f       	sbci	r31, 0xFE	; 254
    3b22:	80 81       	ld	r24, Z
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	02 2e       	mov	r0, r18
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <KBD_u8GetKeyPressed+0x42>
    3b30:	88 0f       	add	r24, r24
    3b32:	99 1f       	adc	r25, r25
    3b34:	0a 94       	dec	r0
    3b36:	e2 f7       	brpl	.-8      	; 0x3b30 <KBD_u8GetKeyPressed+0x3e>
    3b38:	80 95       	com	r24
    3b3a:	84 23       	and	r24, r20
    3b3c:	8c 93       	st	X, r24
					/* Store the column index which is the counter of the for loop */
					Local_u8ColumnIndex=i;
    3b3e:	88 89       	ldd	r24, Y+16	; 0x10
    3b40:	8a 8b       	std	Y+18, r24	; 0x12

					/* The second for loop is to check on each row to cofirm if it is the one or not */
					for(u8 j=0; j<KBD_ROW_NUM; j++)
    3b42:	1f 86       	std	Y+15, r1	; 0x0f
    3b44:	c2 c0       	rjmp	.+388    	; 0x3cca <KBD_u8GetKeyPressed+0x1d8>
					{
						/* Get the value of the row to check if it is pressed or not */
						Local_u8val = GET_BIT( KBD_PIN, KBD_u8Rows[j] );
    3b46:	e0 e3       	ldi	r30, 0x30	; 48
    3b48:	f0 e0       	ldi	r31, 0x00	; 0
    3b4a:	80 81       	ld	r24, Z
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b52:	88 2f       	mov	r24, r24
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	fc 01       	movw	r30, r24
    3b58:	e6 57       	subi	r30, 0x76	; 118
    3b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b5c:	80 81       	ld	r24, Z
    3b5e:	88 2f       	mov	r24, r24
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	a9 01       	movw	r20, r18
    3b64:	02 c0       	rjmp	.+4      	; 0x3b6a <KBD_u8GetKeyPressed+0x78>
    3b66:	55 95       	asr	r21
    3b68:	47 95       	ror	r20
    3b6a:	8a 95       	dec	r24
    3b6c:	e2 f7       	brpl	.-8      	; 0x3b66 <KBD_u8GetKeyPressed+0x74>
    3b6e:	ca 01       	movw	r24, r20
    3b70:	81 70       	andi	r24, 0x01	; 1
    3b72:	89 8b       	std	Y+17, r24	; 0x11
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	a0 ea       	ldi	r26, 0xA0	; 160
    3b7a:	b1 e4       	ldi	r27, 0x41	; 65
    3b7c:	8b 87       	std	Y+11, r24	; 0x0b
    3b7e:	9c 87       	std	Y+12, r25	; 0x0c
    3b80:	ad 87       	std	Y+13, r26	; 0x0d
    3b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	4a ef       	ldi	r20, 0xFA	; 250
    3b92:	54 e4       	ldi	r21, 0x44	; 68
    3b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	8f 83       	std	Y+7, r24	; 0x07
    3b9e:	98 87       	std	Y+8, r25	; 0x08
    3ba0:	a9 87       	std	Y+9, r26	; 0x09
    3ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba6:	78 85       	ldd	r23, Y+8	; 0x08
    3ba8:	89 85       	ldd	r24, Y+9	; 0x09
    3baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e8       	ldi	r20, 0x80	; 128
    3bb2:	5f e3       	ldi	r21, 0x3F	; 63
    3bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb8:	88 23       	and	r24, r24
    3bba:	2c f4       	brge	.+10     	; 0x3bc6 <KBD_u8GetKeyPressed+0xd4>
		__ticks = 1;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
    3bc4:	3f c0       	rjmp	.+126    	; 0x3c44 <KBD_u8GetKeyPressed+0x152>
	else if (__tmp > 65535)
    3bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc8:	78 85       	ldd	r23, Y+8	; 0x08
    3bca:	89 85       	ldd	r24, Y+9	; 0x09
    3bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	3f ef       	ldi	r19, 0xFF	; 255
    3bd2:	4f e7       	ldi	r20, 0x7F	; 127
    3bd4:	57 e4       	ldi	r21, 0x47	; 71
    3bd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bda:	18 16       	cp	r1, r24
    3bdc:	4c f5       	brge	.+82     	; 0x3c30 <KBD_u8GetKeyPressed+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e2       	ldi	r20, 0x20	; 32
    3bec:	51 e4       	ldi	r21, 0x41	; 65
    3bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	bc 01       	movw	r22, r24
    3bf8:	cd 01       	movw	r24, r26
    3bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	9e 83       	std	Y+6, r25	; 0x06
    3c04:	8d 83       	std	Y+5, r24	; 0x05
    3c06:	0f c0       	rjmp	.+30     	; 0x3c26 <KBD_u8GetKeyPressed+0x134>
    3c08:	88 ec       	ldi	r24, 0xC8	; 200
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	9c 83       	std	Y+4, r25	; 0x04
    3c0e:	8b 83       	std	Y+3, r24	; 0x03
    3c10:	8b 81       	ldd	r24, Y+3	; 0x03
    3c12:	9c 81       	ldd	r25, Y+4	; 0x04
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	f1 f7       	brne	.-4      	; 0x3c14 <KBD_u8GetKeyPressed+0x122>
    3c18:	9c 83       	std	Y+4, r25	; 0x04
    3c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	9e 83       	std	Y+6, r25	; 0x06
    3c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c26:	8d 81       	ldd	r24, Y+5	; 0x05
    3c28:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	69 f7       	brne	.-38     	; 0x3c08 <KBD_u8GetKeyPressed+0x116>
    3c2e:	14 c0       	rjmp	.+40     	; 0x3c58 <KBD_u8GetKeyPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c30:	6f 81       	ldd	r22, Y+7	; 0x07
    3c32:	78 85       	ldd	r23, Y+8	; 0x08
    3c34:	89 85       	ldd	r24, Y+9	; 0x09
    3c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	9e 83       	std	Y+6, r25	; 0x06
    3c42:	8d 83       	std	Y+5, r24	; 0x05
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	9a 83       	std	Y+2, r25	; 0x02
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	f1 f7       	brne	.-4      	; 0x3c50 <KBD_u8GetKeyPressed+0x15e>
    3c54:	9a 83       	std	Y+2, r25	; 0x02
    3c56:	89 83       	std	Y+1, r24	; 0x01
						/*This delay is to fix The bouncing Effect  */
						_delay_ms(20);
						/* Get the value again to make sure it is right after avoiding The Debouncing Effect  */
						Local_u8val = GET_BIT( KBD_PIN, KBD_u8Rows[j] );
    3c58:	e0 e3       	ldi	r30, 0x30	; 48
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	28 2f       	mov	r18, r24
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c64:	88 2f       	mov	r24, r24
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	fc 01       	movw	r30, r24
    3c6a:	e6 57       	subi	r30, 0x76	; 118
    3c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6e:	80 81       	ld	r24, Z
    3c70:	88 2f       	mov	r24, r24
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	a9 01       	movw	r20, r18
    3c76:	02 c0       	rjmp	.+4      	; 0x3c7c <KBD_u8GetKeyPressed+0x18a>
    3c78:	55 95       	asr	r21
    3c7a:	47 95       	ror	r20
    3c7c:	8a 95       	dec	r24
    3c7e:	e2 f7       	brpl	.-8      	; 0x3c78 <KBD_u8GetKeyPressed+0x186>
    3c80:	ca 01       	movw	r24, r20
    3c82:	81 70       	andi	r24, 0x01	; 1
    3c84:	89 8b       	std	Y+17, r24	; 0x11
						/* Store the row index which is the counter of the for loop */
						Local_u8RowIndex = j;
    3c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c88:	8b 8b       	std	Y+19, r24	; 0x13

						/* Check if the key is pressed or not by getting the pin value of the row */
						if (Local_u8val==KBD_KEY_PRESSED)
    3c8a:	89 89       	ldd	r24, Y+17	; 0x11
    3c8c:	88 23       	and	r24, r24
    3c8e:	d1 f4       	brne	.+52     	; 0x3cc4 <KBD_u8GetKeyPressed+0x1d2>
						{
							/* Return a value from the global array  */
							return KBD_u8Keys[Local_u8RowIndex][Local_u8ColumnIndex];
    3c90:	8b 89       	ldd	r24, Y+19	; 0x13
    3c92:	28 2f       	mov	r18, r24
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	8a 89       	ldd	r24, Y+18	; 0x12
    3c98:	48 2f       	mov	r20, r24
    3c9a:	50 e0       	ldi	r21, 0x00	; 0
    3c9c:	c9 01       	movw	r24, r18
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	82 0f       	add	r24, r18
    3ca4:	93 1f       	adc	r25, r19
    3ca6:	84 0f       	add	r24, r20
    3ca8:	95 1f       	adc	r25, r21
    3caa:	fc 01       	movw	r30, r24
    3cac:	ef 56       	subi	r30, 0x6F	; 111
    3cae:	fe 4f       	sbci	r31, 0xFE	; 254
    3cb0:	80 81       	ld	r24, Z

					/* Deactivate the column again, to activate another column in the next iteration  */
					SET_BIT( KBD_PORT, KBD_u8Cols[i] );
			}
	}
}
    3cb2:	63 96       	adiw	r28, 0x13	; 19
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	08 95       	ret
					CLR_BIT( KBD_PORT, KBD_u8Cols[i] );
					/* Store the column index which is the counter of the for loop */
					Local_u8ColumnIndex=i;

					/* The second for loop is to check on each row to cofirm if it is the one or not */
					for(u8 j=0; j<KBD_ROW_NUM; j++)
    3cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc6:	8f 5f       	subi	r24, 0xFF	; 255
    3cc8:	8f 87       	std	Y+15, r24	; 0x0f
    3cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ccc:	84 30       	cpi	r24, 0x04	; 4
    3cce:	08 f4       	brcc	.+2      	; 0x3cd2 <KBD_u8GetKeyPressed+0x1e0>
    3cd0:	3a cf       	rjmp	.-396    	; 0x3b46 <KBD_u8GetKeyPressed+0x54>
							return KBD_u8Keys[Local_u8RowIndex][Local_u8ColumnIndex];
						}
					}

					/* Deactivate the column again, to activate another column in the next iteration  */
					SET_BIT( KBD_PORT, KBD_u8Cols[i] );
    3cd2:	a2 e3       	ldi	r26, 0x32	; 50
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	e2 e3       	ldi	r30, 0x32	; 50
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	80 81       	ld	r24, Z
    3cdc:	48 2f       	mov	r20, r24
    3cde:	88 89       	ldd	r24, Y+16	; 0x10
    3ce0:	88 2f       	mov	r24, r24
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e2 57       	subi	r30, 0x72	; 114
    3ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cea:	80 81       	ld	r24, Z
    3cec:	28 2f       	mov	r18, r24
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	02 2e       	mov	r0, r18
    3cf6:	02 c0       	rjmp	.+4      	; 0x3cfc <KBD_u8GetKeyPressed+0x20a>
    3cf8:	88 0f       	add	r24, r24
    3cfa:	99 1f       	adc	r25, r25
    3cfc:	0a 94       	dec	r0
    3cfe:	e2 f7       	brpl	.-8      	; 0x3cf8 <KBD_u8GetKeyPressed+0x206>
    3d00:	84 2b       	or	r24, r20
    3d02:	8c 93       	st	X, r24

	while (1)
	{

		/* The first for loop is to check on each column individually to set it as 0 */
		for (u8 i=0 ; i < KBD_COL_NUM ; i++)
    3d04:	88 89       	ldd	r24, Y+16	; 0x10
    3d06:	8f 5f       	subi	r24, 0xFF	; 255
    3d08:	88 8b       	std	Y+16, r24	; 0x10
    3d0a:	88 89       	ldd	r24, Y+16	; 0x10
    3d0c:	83 30       	cpi	r24, 0x03	; 3
    3d0e:	08 f4       	brcc	.+2      	; 0x3d12 <KBD_u8GetKeyPressed+0x220>
    3d10:	fc ce       	rjmp	.-520    	; 0x3b0a <KBD_u8GetKeyPressed+0x18>
    3d12:	f9 ce       	rjmp	.-526    	; 0x3b06 <KBD_u8GetKeyPressed+0x14>

00003d14 <timer0_init>:
* PARAMETERS  : Nothing.
*
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
    3d14:	df 93       	push	r29
    3d16:	cf 93       	push	r28
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
	    	/* Disable Timer 0 */
	    	TCCR0 = 0x00;
    3d1c:	e3 e5       	ldi	r30, 0x53	; 83
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	10 82       	st	Z, r1
	    	/* Setting pre scaler */
	    	TCCR0 = (0x01);
    3d22:	e3 e5       	ldi	r30, 0x53	; 83
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	80 83       	st	Z, r24
	    	/* Initializing the timer with zero */
	    	TCNT0 = 0x00;
    3d2a:	e2 e5       	ldi	r30, 0x52	; 82
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	10 82       	st	Z, r1
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<0);
    3d30:	a9 e5       	ldi	r26, 0x59	; 89
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	e9 e5       	ldi	r30, 0x59	; 89
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	80 81       	ld	r24, Z
    3d3a:	81 60       	ori	r24, 0x01	; 1
    3d3c:	8c 93       	st	X, r24

	return;
}
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <lcd_init>:
*purpose       	: initialize LCD pins as output
*				 		and seting up the operation mode(4-bit)
*						default setting (cursor on)
*/
void lcd_init(void)
{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	e8 97       	sbiw	r28, 0x38	; 56
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61

	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
    3d58:	ea e3       	ldi	r30, 0x3A	; 58
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 ef       	ldi	r24, 0xF0	; 240
    3d5e:	80 83       	st	Z, r24
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
    3d60:	a7 e3       	ldi	r26, 0x37	; 55
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	e7 e3       	ldi	r30, 0x37	; 55
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	80 81       	ld	r24, Z
    3d6a:	8e 60       	ori	r24, 0x0E	; 14
    3d6c:	8c 93       	st	X, r24

	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
    3d6e:	eb e3       	ldi	r30, 0x3B	; 59
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 e2       	ldi	r24, 0x20	; 32
    3d74:	80 83       	st	Z, r24
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
    3d76:	a8 e3       	ldi	r26, 0x38	; 56
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e8 e3       	ldi	r30, 0x38	; 56
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	88 60       	ori	r24, 0x08	; 8
    3d82:	8c 93       	st	X, r24
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	a0 ea       	ldi	r26, 0xA0	; 160
    3d8a:	b0 e4       	ldi	r27, 0x40	; 64
    3d8c:	8d ab       	std	Y+53, r24	; 0x35
    3d8e:	9e ab       	std	Y+54, r25	; 0x36
    3d90:	af ab       	std	Y+55, r26	; 0x37
    3d92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d94:	6d a9       	ldd	r22, Y+53	; 0x35
    3d96:	7e a9       	ldd	r23, Y+54	; 0x36
    3d98:	8f a9       	ldd	r24, Y+55	; 0x37
    3d9a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	4a ef       	ldi	r20, 0xFA	; 250
    3da2:	54 e4       	ldi	r21, 0x44	; 68
    3da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	89 ab       	std	Y+49, r24	; 0x31
    3dae:	9a ab       	std	Y+50, r25	; 0x32
    3db0:	ab ab       	std	Y+51, r26	; 0x33
    3db2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3db4:	69 a9       	ldd	r22, Y+49	; 0x31
    3db6:	7a a9       	ldd	r23, Y+50	; 0x32
    3db8:	8b a9       	ldd	r24, Y+51	; 0x33
    3dba:	9c a9       	ldd	r25, Y+52	; 0x34
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e8       	ldi	r20, 0x80	; 128
    3dc2:	5f e3       	ldi	r21, 0x3F	; 63
    3dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dc8:	88 23       	and	r24, r24
    3dca:	2c f4       	brge	.+10     	; 0x3dd6 <lcd_init+0x92>
		__ticks = 1;
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	98 ab       	std	Y+48, r25	; 0x30
    3dd2:	8f a7       	std	Y+47, r24	; 0x2f
    3dd4:	3f c0       	rjmp	.+126    	; 0x3e54 <lcd_init+0x110>
	else if (__tmp > 65535)
    3dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    3dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    3dda:	8b a9       	ldd	r24, Y+51	; 0x33
    3ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	3f ef       	ldi	r19, 0xFF	; 255
    3de2:	4f e7       	ldi	r20, 0x7F	; 127
    3de4:	57 e4       	ldi	r21, 0x47	; 71
    3de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dea:	18 16       	cp	r1, r24
    3dec:	4c f5       	brge	.+82     	; 0x3e40 <lcd_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dee:	6d a9       	ldd	r22, Y+53	; 0x35
    3df0:	7e a9       	ldd	r23, Y+54	; 0x36
    3df2:	8f a9       	ldd	r24, Y+55	; 0x37
    3df4:	98 ad       	ldd	r25, Y+56	; 0x38
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e2       	ldi	r20, 0x20	; 32
    3dfc:	51 e4       	ldi	r21, 0x41	; 65
    3dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	98 ab       	std	Y+48, r25	; 0x30
    3e14:	8f a7       	std	Y+47, r24	; 0x2f
    3e16:	0f c0       	rjmp	.+30     	; 0x3e36 <lcd_init+0xf2>
    3e18:	88 ec       	ldi	r24, 0xC8	; 200
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	9e a7       	std	Y+46, r25	; 0x2e
    3e1e:	8d a7       	std	Y+45, r24	; 0x2d
    3e20:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e22:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <lcd_init+0xe0>
    3e28:	9e a7       	std	Y+46, r25	; 0x2e
    3e2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	98 ab       	std	Y+48, r25	; 0x30
    3e34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e38:	98 a9       	ldd	r25, Y+48	; 0x30
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	69 f7       	brne	.-38     	; 0x3e18 <lcd_init+0xd4>
    3e3e:	14 c0       	rjmp	.+40     	; 0x3e68 <lcd_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e40:	69 a9       	ldd	r22, Y+49	; 0x31
    3e42:	7a a9       	ldd	r23, Y+50	; 0x32
    3e44:	8b a9       	ldd	r24, Y+51	; 0x33
    3e46:	9c a9       	ldd	r25, Y+52	; 0x34
    3e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	98 ab       	std	Y+48, r25	; 0x30
    3e52:	8f a7       	std	Y+47, r24	; 0x2f
    3e54:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e56:	98 a9       	ldd	r25, Y+48	; 0x30
    3e58:	9c a7       	std	Y+44, r25	; 0x2c
    3e5a:	8b a7       	std	Y+43, r24	; 0x2b
    3e5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <lcd_init+0x11c>
    3e64:	9c a7       	std	Y+44, r25	; 0x2c
    3e66:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    3e68:	a8 e3       	ldi	r26, 0x38	; 56
    3e6a:	b0 e0       	ldi	r27, 0x00	; 0
    3e6c:	e8 e3       	ldi	r30, 0x38	; 56
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	80 81       	ld	r24, Z
    3e72:	87 7f       	andi	r24, 0xF7	; 247
    3e74:	8c 93       	st	X, r24
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e7c:	b0 e4       	ldi	r27, 0x40	; 64
    3e7e:	8f a3       	std	Y+39, r24	; 0x27
    3e80:	98 a7       	std	Y+40, r25	; 0x28
    3e82:	a9 a7       	std	Y+41, r26	; 0x29
    3e84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e86:	6f a1       	ldd	r22, Y+39	; 0x27
    3e88:	78 a5       	ldd	r23, Y+40	; 0x28
    3e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    3e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	4a ef       	ldi	r20, 0xFA	; 250
    3e94:	54 e4       	ldi	r21, 0x44	; 68
    3e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	8b a3       	std	Y+35, r24	; 0x23
    3ea0:	9c a3       	std	Y+36, r25	; 0x24
    3ea2:	ad a3       	std	Y+37, r26	; 0x25
    3ea4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    3eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    3eac:	9e a1       	ldd	r25, Y+38	; 0x26
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	40 e8       	ldi	r20, 0x80	; 128
    3eb4:	5f e3       	ldi	r21, 0x3F	; 63
    3eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eba:	88 23       	and	r24, r24
    3ebc:	2c f4       	brge	.+10     	; 0x3ec8 <lcd_init+0x184>
		__ticks = 1;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	9a a3       	std	Y+34, r25	; 0x22
    3ec4:	89 a3       	std	Y+33, r24	; 0x21
    3ec6:	3f c0       	rjmp	.+126    	; 0x3f46 <lcd_init+0x202>
	else if (__tmp > 65535)
    3ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    3eca:	7c a1       	ldd	r23, Y+36	; 0x24
    3ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ece:	9e a1       	ldd	r25, Y+38	; 0x26
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	3f ef       	ldi	r19, 0xFF	; 255
    3ed4:	4f e7       	ldi	r20, 0x7F	; 127
    3ed6:	57 e4       	ldi	r21, 0x47	; 71
    3ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3edc:	18 16       	cp	r1, r24
    3ede:	4c f5       	brge	.+82     	; 0x3f32 <lcd_init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ee2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ee4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e2       	ldi	r20, 0x20	; 32
    3eee:	51 e4       	ldi	r21, 0x41	; 65
    3ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	9a a3       	std	Y+34, r25	; 0x22
    3f06:	89 a3       	std	Y+33, r24	; 0x21
    3f08:	0f c0       	rjmp	.+30     	; 0x3f28 <lcd_init+0x1e4>
    3f0a:	88 ec       	ldi	r24, 0xC8	; 200
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	98 a3       	std	Y+32, r25	; 0x20
    3f10:	8f 8f       	std	Y+31, r24	; 0x1f
    3f12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f14:	98 a1       	ldd	r25, Y+32	; 0x20
    3f16:	01 97       	sbiw	r24, 0x01	; 1
    3f18:	f1 f7       	brne	.-4      	; 0x3f16 <lcd_init+0x1d2>
    3f1a:	98 a3       	std	Y+32, r25	; 0x20
    3f1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f20:	9a a1       	ldd	r25, Y+34	; 0x22
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	9a a3       	std	Y+34, r25	; 0x22
    3f26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f28:	89 a1       	ldd	r24, Y+33	; 0x21
    3f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	69 f7       	brne	.-38     	; 0x3f0a <lcd_init+0x1c6>
    3f30:	14 c0       	rjmp	.+40     	; 0x3f5a <lcd_init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f32:	6b a1       	ldd	r22, Y+35	; 0x23
    3f34:	7c a1       	ldd	r23, Y+36	; 0x24
    3f36:	8d a1       	ldd	r24, Y+37	; 0x25
    3f38:	9e a1       	ldd	r25, Y+38	; 0x26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	9a a3       	std	Y+34, r25	; 0x22
    3f44:	89 a3       	std	Y+33, r24	; 0x21
    3f46:	89 a1       	ldd	r24, Y+33	; 0x21
    3f48:	9a a1       	ldd	r25, Y+34	; 0x22
    3f4a:	9e 8f       	std	Y+30, r25	; 0x1e
    3f4c:	8d 8f       	std	Y+29, r24	; 0x1d
    3f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f52:	01 97       	sbiw	r24, 0x01	; 1
    3f54:	f1 f7       	brne	.-4      	; 0x3f52 <lcd_init+0x20e>
    3f56:	9e 8f       	std	Y+30, r25	; 0x1e
    3f58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
    3f5a:	88 e2       	ldi	r24, 0x28	; 40
    3f5c:	0e 94 a3 20 	call	0x4146	; 0x4146 <lcd_send_command>
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	a0 ea       	ldi	r26, 0xA0	; 160
    3f66:	b0 e4       	ldi	r27, 0x40	; 64
    3f68:	89 8f       	std	Y+25, r24	; 0x19
    3f6a:	9a 8f       	std	Y+26, r25	; 0x1a
    3f6c:	ab 8f       	std	Y+27, r26	; 0x1b
    3f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f70:	69 8d       	ldd	r22, Y+25	; 0x19
    3f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	4a ef       	ldi	r20, 0xFA	; 250
    3f7e:	54 e4       	ldi	r21, 0x44	; 68
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	8d 8b       	std	Y+21, r24	; 0x15
    3f8a:	9e 8b       	std	Y+22, r25	; 0x16
    3f8c:	af 8b       	std	Y+23, r26	; 0x17
    3f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f90:	6d 89       	ldd	r22, Y+21	; 0x15
    3f92:	7e 89       	ldd	r23, Y+22	; 0x16
    3f94:	8f 89       	ldd	r24, Y+23	; 0x17
    3f96:	98 8d       	ldd	r25, Y+24	; 0x18
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	40 e8       	ldi	r20, 0x80	; 128
    3f9e:	5f e3       	ldi	r21, 0x3F	; 63
    3fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fa4:	88 23       	and	r24, r24
    3fa6:	2c f4       	brge	.+10     	; 0x3fb2 <lcd_init+0x26e>
		__ticks = 1;
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9c 8b       	std	Y+20, r25	; 0x14
    3fae:	8b 8b       	std	Y+19, r24	; 0x13
    3fb0:	3f c0       	rjmp	.+126    	; 0x4030 <lcd_init+0x2ec>
	else if (__tmp > 65535)
    3fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    3fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	3f ef       	ldi	r19, 0xFF	; 255
    3fbe:	4f e7       	ldi	r20, 0x7F	; 127
    3fc0:	57 e4       	ldi	r21, 0x47	; 71
    3fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fc6:	18 16       	cp	r1, r24
    3fc8:	4c f5       	brge	.+82     	; 0x401c <lcd_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fca:	69 8d       	ldd	r22, Y+25	; 0x19
    3fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e2       	ldi	r20, 0x20	; 32
    3fd8:	51 e4       	ldi	r21, 0x41	; 65
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	9c 8b       	std	Y+20, r25	; 0x14
    3ff0:	8b 8b       	std	Y+19, r24	; 0x13
    3ff2:	0f c0       	rjmp	.+30     	; 0x4012 <lcd_init+0x2ce>
    3ff4:	88 ec       	ldi	r24, 0xC8	; 200
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	9a 8b       	std	Y+18, r25	; 0x12
    3ffa:	89 8b       	std	Y+17, r24	; 0x11
    3ffc:	89 89       	ldd	r24, Y+17	; 0x11
    3ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <lcd_init+0x2bc>
    4004:	9a 8b       	std	Y+18, r25	; 0x12
    4006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4008:	8b 89       	ldd	r24, Y+19	; 0x13
    400a:	9c 89       	ldd	r25, Y+20	; 0x14
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	9c 8b       	std	Y+20, r25	; 0x14
    4010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4012:	8b 89       	ldd	r24, Y+19	; 0x13
    4014:	9c 89       	ldd	r25, Y+20	; 0x14
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	69 f7       	brne	.-38     	; 0x3ff4 <lcd_init+0x2b0>
    401a:	14 c0       	rjmp	.+40     	; 0x4044 <lcd_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401c:	6d 89       	ldd	r22, Y+21	; 0x15
    401e:	7e 89       	ldd	r23, Y+22	; 0x16
    4020:	8f 89       	ldd	r24, Y+23	; 0x17
    4022:	98 8d       	ldd	r25, Y+24	; 0x18
    4024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9c 8b       	std	Y+20, r25	; 0x14
    402e:	8b 8b       	std	Y+19, r24	; 0x13
    4030:	8b 89       	ldd	r24, Y+19	; 0x13
    4032:	9c 89       	ldd	r25, Y+20	; 0x14
    4034:	98 8b       	std	Y+16, r25	; 0x10
    4036:	8f 87       	std	Y+15, r24	; 0x0f
    4038:	8f 85       	ldd	r24, Y+15	; 0x0f
    403a:	98 89       	ldd	r25, Y+16	; 0x10
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <lcd_init+0x2f8>
    4040:	98 8b       	std	Y+16, r25	; 0x10
    4042:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
    4044:	8f e0       	ldi	r24, 0x0F	; 15
    4046:	0e 94 a3 20 	call	0x4146	; 0x4146 <lcd_send_command>
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	a0 ea       	ldi	r26, 0xA0	; 160
    4050:	b0 e4       	ldi	r27, 0x40	; 64
    4052:	8b 87       	std	Y+11, r24	; 0x0b
    4054:	9c 87       	std	Y+12, r25	; 0x0c
    4056:	ad 87       	std	Y+13, r26	; 0x0d
    4058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405a:	6b 85       	ldd	r22, Y+11	; 0x0b
    405c:	7c 85       	ldd	r23, Y+12	; 0x0c
    405e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4060:	9e 85       	ldd	r25, Y+14	; 0x0e
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	4a ef       	ldi	r20, 0xFA	; 250
    4068:	54 e4       	ldi	r21, 0x44	; 68
    406a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	8f 83       	std	Y+7, r24	; 0x07
    4074:	98 87       	std	Y+8, r25	; 0x08
    4076:	a9 87       	std	Y+9, r26	; 0x09
    4078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    407a:	6f 81       	ldd	r22, Y+7	; 0x07
    407c:	78 85       	ldd	r23, Y+8	; 0x08
    407e:	89 85       	ldd	r24, Y+9	; 0x09
    4080:	9a 85       	ldd	r25, Y+10	; 0x0a
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	40 e8       	ldi	r20, 0x80	; 128
    4088:	5f e3       	ldi	r21, 0x3F	; 63
    408a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    408e:	88 23       	and	r24, r24
    4090:	2c f4       	brge	.+10     	; 0x409c <lcd_init+0x358>
		__ticks = 1;
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	9e 83       	std	Y+6, r25	; 0x06
    4098:	8d 83       	std	Y+5, r24	; 0x05
    409a:	3f c0       	rjmp	.+126    	; 0x411a <lcd_init+0x3d6>
	else if (__tmp > 65535)
    409c:	6f 81       	ldd	r22, Y+7	; 0x07
    409e:	78 85       	ldd	r23, Y+8	; 0x08
    40a0:	89 85       	ldd	r24, Y+9	; 0x09
    40a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	3f ef       	ldi	r19, 0xFF	; 255
    40a8:	4f e7       	ldi	r20, 0x7F	; 127
    40aa:	57 e4       	ldi	r21, 0x47	; 71
    40ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b0:	18 16       	cp	r1, r24
    40b2:	4c f5       	brge	.+82     	; 0x4106 <lcd_init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    40b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    40b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e2       	ldi	r20, 0x20	; 32
    40c2:	51 e4       	ldi	r21, 0x41	; 65
    40c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d4:	dc 01       	movw	r26, r24
    40d6:	cb 01       	movw	r24, r22
    40d8:	9e 83       	std	Y+6, r25	; 0x06
    40da:	8d 83       	std	Y+5, r24	; 0x05
    40dc:	0f c0       	rjmp	.+30     	; 0x40fc <lcd_init+0x3b8>
    40de:	88 ec       	ldi	r24, 0xC8	; 200
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	9c 83       	std	Y+4, r25	; 0x04
    40e4:	8b 83       	std	Y+3, r24	; 0x03
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <lcd_init+0x3a6>
    40ee:	9c 83       	std	Y+4, r25	; 0x04
    40f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	9e 81       	ldd	r25, Y+6	; 0x06
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	9e 83       	std	Y+6, r25	; 0x06
    40fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fc:	8d 81       	ldd	r24, Y+5	; 0x05
    40fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4100:	00 97       	sbiw	r24, 0x00	; 0
    4102:	69 f7       	brne	.-38     	; 0x40de <lcd_init+0x39a>
    4104:	14 c0       	rjmp	.+40     	; 0x412e <lcd_init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4106:	6f 81       	ldd	r22, Y+7	; 0x07
    4108:	78 85       	ldd	r23, Y+8	; 0x08
    410a:	89 85       	ldd	r24, Y+9	; 0x09
    410c:	9a 85       	ldd	r25, Y+10	; 0x0a
    410e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	9e 83       	std	Y+6, r25	; 0x06
    4118:	8d 83       	std	Y+5, r24	; 0x05
    411a:	8d 81       	ldd	r24, Y+5	; 0x05
    411c:	9e 81       	ldd	r25, Y+6	; 0x06
    411e:	9a 83       	std	Y+2, r25	; 0x02
    4120:	89 83       	std	Y+1, r24	; 0x01
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	9a 81       	ldd	r25, Y+2	; 0x02
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	f1 f7       	brne	.-4      	; 0x4126 <lcd_init+0x3e2>
    412a:	9a 83       	std	Y+2, r25	; 0x02
    412c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	lcd_send_command(0x80);
    412e:	80 e8       	ldi	r24, 0x80	; 128
    4130:	0e 94 a3 20 	call	0x4146	; 0x4146 <lcd_send_command>

}
    4134:	e8 96       	adiw	r28, 0x38	; 56
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <lcd_send_command>:
*purpose       	: sending a command to LCD by sending
*				 		the first nibble then the second nibble
*						enabling and disabling the LCD in between
*/
void lcd_send_command (uint8_t command)
{
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
    414e:	e9 97       	sbiw	r28, 0x39	; 57
    4150:	0f b6       	in	r0, 0x3f	; 63
    4152:	f8 94       	cli
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	0f be       	out	0x3f, r0	; 63
    4158:	cd bf       	out	0x3d, r28	; 61
    415a:	89 af       	std	Y+57, r24	; 0x39
	DATA_BUS=((command&0b11110000));
    415c:	eb e3       	ldi	r30, 0x3B	; 59
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	89 ad       	ldd	r24, Y+57	; 0x39
    4162:	80 7f       	andi	r24, 0xF0	; 240
    4164:	80 83       	st	Z, r24
	CTL_BUS &=~(1<<LCD_RS);
    4166:	a8 e3       	ldi	r26, 0x38	; 56
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e8 e3       	ldi	r30, 0x38	; 56
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	8d 7f       	andi	r24, 0xFD	; 253
    4172:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    4174:	a8 e3       	ldi	r26, 0x38	; 56
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	e8 e3       	ldi	r30, 0x38	; 56
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	88 60       	ori	r24, 0x08	; 8
    4180:	8c 93       	st	X, r24
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	a0 ea       	ldi	r26, 0xA0	; 160
    4188:	b0 e4       	ldi	r27, 0x40	; 64
    418a:	8d ab       	std	Y+53, r24	; 0x35
    418c:	9e ab       	std	Y+54, r25	; 0x36
    418e:	af ab       	std	Y+55, r26	; 0x37
    4190:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4192:	6d a9       	ldd	r22, Y+53	; 0x35
    4194:	7e a9       	ldd	r23, Y+54	; 0x36
    4196:	8f a9       	ldd	r24, Y+55	; 0x37
    4198:	98 ad       	ldd	r25, Y+56	; 0x38
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	4a ef       	ldi	r20, 0xFA	; 250
    41a0:	54 e4       	ldi	r21, 0x44	; 68
    41a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	89 ab       	std	Y+49, r24	; 0x31
    41ac:	9a ab       	std	Y+50, r25	; 0x32
    41ae:	ab ab       	std	Y+51, r26	; 0x33
    41b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    41b2:	69 a9       	ldd	r22, Y+49	; 0x31
    41b4:	7a a9       	ldd	r23, Y+50	; 0x32
    41b6:	8b a9       	ldd	r24, Y+51	; 0x33
    41b8:	9c a9       	ldd	r25, Y+52	; 0x34
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 e8       	ldi	r20, 0x80	; 128
    41c0:	5f e3       	ldi	r21, 0x3F	; 63
    41c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c6:	88 23       	and	r24, r24
    41c8:	2c f4       	brge	.+10     	; 0x41d4 <lcd_send_command+0x8e>
		__ticks = 1;
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	98 ab       	std	Y+48, r25	; 0x30
    41d0:	8f a7       	std	Y+47, r24	; 0x2f
    41d2:	3f c0       	rjmp	.+126    	; 0x4252 <lcd_send_command+0x10c>
	else if (__tmp > 65535)
    41d4:	69 a9       	ldd	r22, Y+49	; 0x31
    41d6:	7a a9       	ldd	r23, Y+50	; 0x32
    41d8:	8b a9       	ldd	r24, Y+51	; 0x33
    41da:	9c a9       	ldd	r25, Y+52	; 0x34
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	3f ef       	ldi	r19, 0xFF	; 255
    41e0:	4f e7       	ldi	r20, 0x7F	; 127
    41e2:	57 e4       	ldi	r21, 0x47	; 71
    41e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e8:	18 16       	cp	r1, r24
    41ea:	4c f5       	brge	.+82     	; 0x423e <lcd_send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ec:	6d a9       	ldd	r22, Y+53	; 0x35
    41ee:	7e a9       	ldd	r23, Y+54	; 0x36
    41f0:	8f a9       	ldd	r24, Y+55	; 0x37
    41f2:	98 ad       	ldd	r25, Y+56	; 0x38
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e2       	ldi	r20, 0x20	; 32
    41fa:	51 e4       	ldi	r21, 0x41	; 65
    41fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	bc 01       	movw	r22, r24
    4206:	cd 01       	movw	r24, r26
    4208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	98 ab       	std	Y+48, r25	; 0x30
    4212:	8f a7       	std	Y+47, r24	; 0x2f
    4214:	0f c0       	rjmp	.+30     	; 0x4234 <lcd_send_command+0xee>
    4216:	88 ec       	ldi	r24, 0xC8	; 200
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	9e a7       	std	Y+46, r25	; 0x2e
    421c:	8d a7       	std	Y+45, r24	; 0x2d
    421e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4220:	9e a5       	ldd	r25, Y+46	; 0x2e
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <lcd_send_command+0xdc>
    4226:	9e a7       	std	Y+46, r25	; 0x2e
    4228:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    422a:	8f a5       	ldd	r24, Y+47	; 0x2f
    422c:	98 a9       	ldd	r25, Y+48	; 0x30
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	98 ab       	std	Y+48, r25	; 0x30
    4232:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4234:	8f a5       	ldd	r24, Y+47	; 0x2f
    4236:	98 a9       	ldd	r25, Y+48	; 0x30
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	69 f7       	brne	.-38     	; 0x4216 <lcd_send_command+0xd0>
    423c:	14 c0       	rjmp	.+40     	; 0x4266 <lcd_send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    423e:	69 a9       	ldd	r22, Y+49	; 0x31
    4240:	7a a9       	ldd	r23, Y+50	; 0x32
    4242:	8b a9       	ldd	r24, Y+51	; 0x33
    4244:	9c a9       	ldd	r25, Y+52	; 0x34
    4246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	98 ab       	std	Y+48, r25	; 0x30
    4250:	8f a7       	std	Y+47, r24	; 0x2f
    4252:	8f a5       	ldd	r24, Y+47	; 0x2f
    4254:	98 a9       	ldd	r25, Y+48	; 0x30
    4256:	9c a7       	std	Y+44, r25	; 0x2c
    4258:	8b a7       	std	Y+43, r24	; 0x2b
    425a:	8b a5       	ldd	r24, Y+43	; 0x2b
    425c:	9c a5       	ldd	r25, Y+44	; 0x2c
    425e:	01 97       	sbiw	r24, 0x01	; 1
    4260:	f1 f7       	brne	.-4      	; 0x425e <lcd_send_command+0x118>
    4262:	9c a7       	std	Y+44, r25	; 0x2c
    4264:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    4266:	a8 e3       	ldi	r26, 0x38	; 56
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	e8 e3       	ldi	r30, 0x38	; 56
    426c:	f0 e0       	ldi	r31, 0x00	; 0
    426e:	80 81       	ld	r24, Z
    4270:	87 7f       	andi	r24, 0xF7	; 247
    4272:	8c 93       	st	X, r24
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	a0 ea       	ldi	r26, 0xA0	; 160
    427a:	b0 e4       	ldi	r27, 0x40	; 64
    427c:	8f a3       	std	Y+39, r24	; 0x27
    427e:	98 a7       	std	Y+40, r25	; 0x28
    4280:	a9 a7       	std	Y+41, r26	; 0x29
    4282:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4284:	6f a1       	ldd	r22, Y+39	; 0x27
    4286:	78 a5       	ldd	r23, Y+40	; 0x28
    4288:	89 a5       	ldd	r24, Y+41	; 0x29
    428a:	9a a5       	ldd	r25, Y+42	; 0x2a
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	4a ef       	ldi	r20, 0xFA	; 250
    4292:	54 e4       	ldi	r21, 0x44	; 68
    4294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	8b a3       	std	Y+35, r24	; 0x23
    429e:	9c a3       	std	Y+36, r25	; 0x24
    42a0:	ad a3       	std	Y+37, r26	; 0x25
    42a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42a4:	6b a1       	ldd	r22, Y+35	; 0x23
    42a6:	7c a1       	ldd	r23, Y+36	; 0x24
    42a8:	8d a1       	ldd	r24, Y+37	; 0x25
    42aa:	9e a1       	ldd	r25, Y+38	; 0x26
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e8       	ldi	r20, 0x80	; 128
    42b2:	5f e3       	ldi	r21, 0x3F	; 63
    42b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42b8:	88 23       	and	r24, r24
    42ba:	2c f4       	brge	.+10     	; 0x42c6 <lcd_send_command+0x180>
		__ticks = 1;
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	9a a3       	std	Y+34, r25	; 0x22
    42c2:	89 a3       	std	Y+33, r24	; 0x21
    42c4:	3f c0       	rjmp	.+126    	; 0x4344 <lcd_send_command+0x1fe>
	else if (__tmp > 65535)
    42c6:	6b a1       	ldd	r22, Y+35	; 0x23
    42c8:	7c a1       	ldd	r23, Y+36	; 0x24
    42ca:	8d a1       	ldd	r24, Y+37	; 0x25
    42cc:	9e a1       	ldd	r25, Y+38	; 0x26
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	3f ef       	ldi	r19, 0xFF	; 255
    42d2:	4f e7       	ldi	r20, 0x7F	; 127
    42d4:	57 e4       	ldi	r21, 0x47	; 71
    42d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42da:	18 16       	cp	r1, r24
    42dc:	4c f5       	brge	.+82     	; 0x4330 <lcd_send_command+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42de:	6f a1       	ldd	r22, Y+39	; 0x27
    42e0:	78 a5       	ldd	r23, Y+40	; 0x28
    42e2:	89 a5       	ldd	r24, Y+41	; 0x29
    42e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	40 e2       	ldi	r20, 0x20	; 32
    42ec:	51 e4       	ldi	r21, 0x41	; 65
    42ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	bc 01       	movw	r22, r24
    42f8:	cd 01       	movw	r24, r26
    42fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	9a a3       	std	Y+34, r25	; 0x22
    4304:	89 a3       	std	Y+33, r24	; 0x21
    4306:	0f c0       	rjmp	.+30     	; 0x4326 <lcd_send_command+0x1e0>
    4308:	88 ec       	ldi	r24, 0xC8	; 200
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	98 a3       	std	Y+32, r25	; 0x20
    430e:	8f 8f       	std	Y+31, r24	; 0x1f
    4310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4312:	98 a1       	ldd	r25, Y+32	; 0x20
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	f1 f7       	brne	.-4      	; 0x4314 <lcd_send_command+0x1ce>
    4318:	98 a3       	std	Y+32, r25	; 0x20
    431a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431c:	89 a1       	ldd	r24, Y+33	; 0x21
    431e:	9a a1       	ldd	r25, Y+34	; 0x22
    4320:	01 97       	sbiw	r24, 0x01	; 1
    4322:	9a a3       	std	Y+34, r25	; 0x22
    4324:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4326:	89 a1       	ldd	r24, Y+33	; 0x21
    4328:	9a a1       	ldd	r25, Y+34	; 0x22
    432a:	00 97       	sbiw	r24, 0x00	; 0
    432c:	69 f7       	brne	.-38     	; 0x4308 <lcd_send_command+0x1c2>
    432e:	14 c0       	rjmp	.+40     	; 0x4358 <lcd_send_command+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4330:	6b a1       	ldd	r22, Y+35	; 0x23
    4332:	7c a1       	ldd	r23, Y+36	; 0x24
    4334:	8d a1       	ldd	r24, Y+37	; 0x25
    4336:	9e a1       	ldd	r25, Y+38	; 0x26
    4338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	9a a3       	std	Y+34, r25	; 0x22
    4342:	89 a3       	std	Y+33, r24	; 0x21
    4344:	89 a1       	ldd	r24, Y+33	; 0x21
    4346:	9a a1       	ldd	r25, Y+34	; 0x22
    4348:	9e 8f       	std	Y+30, r25	; 0x1e
    434a:	8d 8f       	std	Y+29, r24	; 0x1d
    434c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    434e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	f1 f7       	brne	.-4      	; 0x4350 <lcd_send_command+0x20a>
    4354:	9e 8f       	std	Y+30, r25	; 0x1e
    4356:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((command&0b00001111)<<4);
    4358:	eb e3       	ldi	r30, 0x3B	; 59
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	89 ad       	ldd	r24, Y+57	; 0x39
    435e:	88 2f       	mov	r24, r24
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	82 95       	swap	r24
    4364:	92 95       	swap	r25
    4366:	90 7f       	andi	r25, 0xF0	; 240
    4368:	98 27       	eor	r25, r24
    436a:	80 7f       	andi	r24, 0xF0	; 240
    436c:	98 27       	eor	r25, r24
    436e:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    4370:	a8 e3       	ldi	r26, 0x38	; 56
    4372:	b0 e0       	ldi	r27, 0x00	; 0
    4374:	e8 e3       	ldi	r30, 0x38	; 56
    4376:	f0 e0       	ldi	r31, 0x00	; 0
    4378:	80 81       	ld	r24, Z
    437a:	88 60       	ori	r24, 0x08	; 8
    437c:	8c 93       	st	X, r24
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	a0 ea       	ldi	r26, 0xA0	; 160
    4384:	b0 e4       	ldi	r27, 0x40	; 64
    4386:	89 8f       	std	Y+25, r24	; 0x19
    4388:	9a 8f       	std	Y+26, r25	; 0x1a
    438a:	ab 8f       	std	Y+27, r26	; 0x1b
    438c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438e:	69 8d       	ldd	r22, Y+25	; 0x19
    4390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	4a ef       	ldi	r20, 0xFA	; 250
    439c:	54 e4       	ldi	r21, 0x44	; 68
    439e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a2:	dc 01       	movw	r26, r24
    43a4:	cb 01       	movw	r24, r22
    43a6:	8d 8b       	std	Y+21, r24	; 0x15
    43a8:	9e 8b       	std	Y+22, r25	; 0x16
    43aa:	af 8b       	std	Y+23, r26	; 0x17
    43ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43ae:	6d 89       	ldd	r22, Y+21	; 0x15
    43b0:	7e 89       	ldd	r23, Y+22	; 0x16
    43b2:	8f 89       	ldd	r24, Y+23	; 0x17
    43b4:	98 8d       	ldd	r25, Y+24	; 0x18
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	40 e8       	ldi	r20, 0x80	; 128
    43bc:	5f e3       	ldi	r21, 0x3F	; 63
    43be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43c2:	88 23       	and	r24, r24
    43c4:	2c f4       	brge	.+10     	; 0x43d0 <lcd_send_command+0x28a>
		__ticks = 1;
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	9c 8b       	std	Y+20, r25	; 0x14
    43cc:	8b 8b       	std	Y+19, r24	; 0x13
    43ce:	3f c0       	rjmp	.+126    	; 0x444e <lcd_send_command+0x308>
	else if (__tmp > 65535)
    43d0:	6d 89       	ldd	r22, Y+21	; 0x15
    43d2:	7e 89       	ldd	r23, Y+22	; 0x16
    43d4:	8f 89       	ldd	r24, Y+23	; 0x17
    43d6:	98 8d       	ldd	r25, Y+24	; 0x18
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	3f ef       	ldi	r19, 0xFF	; 255
    43dc:	4f e7       	ldi	r20, 0x7F	; 127
    43de:	57 e4       	ldi	r21, 0x47	; 71
    43e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43e4:	18 16       	cp	r1, r24
    43e6:	4c f5       	brge	.+82     	; 0x443a <lcd_send_command+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e8:	69 8d       	ldd	r22, Y+25	; 0x19
    43ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	40 e2       	ldi	r20, 0x20	; 32
    43f6:	51 e4       	ldi	r21, 0x41	; 65
    43f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4408:	dc 01       	movw	r26, r24
    440a:	cb 01       	movw	r24, r22
    440c:	9c 8b       	std	Y+20, r25	; 0x14
    440e:	8b 8b       	std	Y+19, r24	; 0x13
    4410:	0f c0       	rjmp	.+30     	; 0x4430 <lcd_send_command+0x2ea>
    4412:	88 ec       	ldi	r24, 0xC8	; 200
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	9a 8b       	std	Y+18, r25	; 0x12
    4418:	89 8b       	std	Y+17, r24	; 0x11
    441a:	89 89       	ldd	r24, Y+17	; 0x11
    441c:	9a 89       	ldd	r25, Y+18	; 0x12
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	f1 f7       	brne	.-4      	; 0x441e <lcd_send_command+0x2d8>
    4422:	9a 8b       	std	Y+18, r25	; 0x12
    4424:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4426:	8b 89       	ldd	r24, Y+19	; 0x13
    4428:	9c 89       	ldd	r25, Y+20	; 0x14
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	9c 8b       	std	Y+20, r25	; 0x14
    442e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4430:	8b 89       	ldd	r24, Y+19	; 0x13
    4432:	9c 89       	ldd	r25, Y+20	; 0x14
    4434:	00 97       	sbiw	r24, 0x00	; 0
    4436:	69 f7       	brne	.-38     	; 0x4412 <lcd_send_command+0x2cc>
    4438:	14 c0       	rjmp	.+40     	; 0x4462 <lcd_send_command+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    443a:	6d 89       	ldd	r22, Y+21	; 0x15
    443c:	7e 89       	ldd	r23, Y+22	; 0x16
    443e:	8f 89       	ldd	r24, Y+23	; 0x17
    4440:	98 8d       	ldd	r25, Y+24	; 0x18
    4442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	9c 8b       	std	Y+20, r25	; 0x14
    444c:	8b 8b       	std	Y+19, r24	; 0x13
    444e:	8b 89       	ldd	r24, Y+19	; 0x13
    4450:	9c 89       	ldd	r25, Y+20	; 0x14
    4452:	98 8b       	std	Y+16, r25	; 0x10
    4454:	8f 87       	std	Y+15, r24	; 0x0f
    4456:	8f 85       	ldd	r24, Y+15	; 0x0f
    4458:	98 89       	ldd	r25, Y+16	; 0x10
    445a:	01 97       	sbiw	r24, 0x01	; 1
    445c:	f1 f7       	brne	.-4      	; 0x445a <lcd_send_command+0x314>
    445e:	98 8b       	std	Y+16, r25	; 0x10
    4460:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    4462:	a8 e3       	ldi	r26, 0x38	; 56
    4464:	b0 e0       	ldi	r27, 0x00	; 0
    4466:	e8 e3       	ldi	r30, 0x38	; 56
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	87 7f       	andi	r24, 0xF7	; 247
    446e:	8c 93       	st	X, r24
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	a0 ea       	ldi	r26, 0xA0	; 160
    4476:	b0 e4       	ldi	r27, 0x40	; 64
    4478:	8b 87       	std	Y+11, r24	; 0x0b
    447a:	9c 87       	std	Y+12, r25	; 0x0c
    447c:	ad 87       	std	Y+13, r26	; 0x0d
    447e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4480:	6b 85       	ldd	r22, Y+11	; 0x0b
    4482:	7c 85       	ldd	r23, Y+12	; 0x0c
    4484:	8d 85       	ldd	r24, Y+13	; 0x0d
    4486:	9e 85       	ldd	r25, Y+14	; 0x0e
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	4a ef       	ldi	r20, 0xFA	; 250
    448e:	54 e4       	ldi	r21, 0x44	; 68
    4490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	8f 83       	std	Y+7, r24	; 0x07
    449a:	98 87       	std	Y+8, r25	; 0x08
    449c:	a9 87       	std	Y+9, r26	; 0x09
    449e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44a0:	6f 81       	ldd	r22, Y+7	; 0x07
    44a2:	78 85       	ldd	r23, Y+8	; 0x08
    44a4:	89 85       	ldd	r24, Y+9	; 0x09
    44a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e8       	ldi	r20, 0x80	; 128
    44ae:	5f e3       	ldi	r21, 0x3F	; 63
    44b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44b4:	88 23       	and	r24, r24
    44b6:	2c f4       	brge	.+10     	; 0x44c2 <lcd_send_command+0x37c>
		__ticks = 1;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	9e 83       	std	Y+6, r25	; 0x06
    44be:	8d 83       	std	Y+5, r24	; 0x05
    44c0:	3f c0       	rjmp	.+126    	; 0x4540 <lcd_send_command+0x3fa>
	else if (__tmp > 65535)
    44c2:	6f 81       	ldd	r22, Y+7	; 0x07
    44c4:	78 85       	ldd	r23, Y+8	; 0x08
    44c6:	89 85       	ldd	r24, Y+9	; 0x09
    44c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	3f ef       	ldi	r19, 0xFF	; 255
    44ce:	4f e7       	ldi	r20, 0x7F	; 127
    44d0:	57 e4       	ldi	r21, 0x47	; 71
    44d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44d6:	18 16       	cp	r1, r24
    44d8:	4c f5       	brge	.+82     	; 0x452c <lcd_send_command+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44da:	6b 85       	ldd	r22, Y+11	; 0x0b
    44dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    44de:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e2       	ldi	r20, 0x20	; 32
    44e8:	51 e4       	ldi	r21, 0x41	; 65
    44ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	bc 01       	movw	r22, r24
    44f4:	cd 01       	movw	r24, r26
    44f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9e 83       	std	Y+6, r25	; 0x06
    4500:	8d 83       	std	Y+5, r24	; 0x05
    4502:	0f c0       	rjmp	.+30     	; 0x4522 <lcd_send_command+0x3dc>
    4504:	88 ec       	ldi	r24, 0xC8	; 200
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	9c 83       	std	Y+4, r25	; 0x04
    450a:	8b 83       	std	Y+3, r24	; 0x03
    450c:	8b 81       	ldd	r24, Y+3	; 0x03
    450e:	9c 81       	ldd	r25, Y+4	; 0x04
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	f1 f7       	brne	.-4      	; 0x4510 <lcd_send_command+0x3ca>
    4514:	9c 83       	std	Y+4, r25	; 0x04
    4516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4518:	8d 81       	ldd	r24, Y+5	; 0x05
    451a:	9e 81       	ldd	r25, Y+6	; 0x06
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	9e 83       	std	Y+6, r25	; 0x06
    4520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4522:	8d 81       	ldd	r24, Y+5	; 0x05
    4524:	9e 81       	ldd	r25, Y+6	; 0x06
    4526:	00 97       	sbiw	r24, 0x00	; 0
    4528:	69 f7       	brne	.-38     	; 0x4504 <lcd_send_command+0x3be>
    452a:	14 c0       	rjmp	.+40     	; 0x4554 <lcd_send_command+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    452c:	6f 81       	ldd	r22, Y+7	; 0x07
    452e:	78 85       	ldd	r23, Y+8	; 0x08
    4530:	89 85       	ldd	r24, Y+9	; 0x09
    4532:	9a 85       	ldd	r25, Y+10	; 0x0a
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	9e 83       	std	Y+6, r25	; 0x06
    453e:	8d 83       	std	Y+5, r24	; 0x05
    4540:	8d 81       	ldd	r24, Y+5	; 0x05
    4542:	9e 81       	ldd	r25, Y+6	; 0x06
    4544:	9a 83       	std	Y+2, r25	; 0x02
    4546:	89 83       	std	Y+1, r24	; 0x01
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <lcd_send_command+0x406>
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    4554:	e9 96       	adiw	r28, 0x39	; 57
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	de bf       	out	0x3e, r29	; 62
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	08 95       	ret

00004566 <lcd_write_word>:
*return		   		: void
*purpose       	: printing a full word to the
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
    4566:	df 93       	push	r29
    4568:	cf 93       	push	r28
    456a:	00 d0       	rcall	.+0      	; 0x456c <lcd_write_word+0x6>
    456c:	00 d0       	rcall	.+0      	; 0x456e <lcd_write_word+0x8>
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	9c 83       	std	Y+4, r25	; 0x04
    4574:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    4576:	1a 82       	std	Y+2, r1	; 0x02
    4578:	19 82       	std	Y+1, r1	; 0x01
    457a:	0f c0       	rjmp	.+30     	; 0x459a <lcd_write_word+0x34>
	while(word[i]!='\0')
	{
		lcd_write_character(word[i]);
    457c:	29 81       	ldd	r18, Y+1	; 0x01
    457e:	3a 81       	ldd	r19, Y+2	; 0x02
    4580:	8b 81       	ldd	r24, Y+3	; 0x03
    4582:	9c 81       	ldd	r25, Y+4	; 0x04
    4584:	fc 01       	movw	r30, r24
    4586:	e2 0f       	add	r30, r18
    4588:	f3 1f       	adc	r31, r19
    458a:	80 81       	ld	r24, Z
    458c:	0e 94 de 22 	call	0x45bc	; 0x45bc <lcd_write_character>
		i++;
    4590:	89 81       	ldd	r24, Y+1	; 0x01
    4592:	9a 81       	ldd	r25, Y+2	; 0x02
    4594:	01 96       	adiw	r24, 0x01	; 1
    4596:	9a 83       	std	Y+2, r25	; 0x02
    4598:	89 83       	std	Y+1, r24	; 0x01
*				 		LCD (Maximun 20 characters)
*/
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
    459a:	29 81       	ldd	r18, Y+1	; 0x01
    459c:	3a 81       	ldd	r19, Y+2	; 0x02
    459e:	8b 81       	ldd	r24, Y+3	; 0x03
    45a0:	9c 81       	ldd	r25, Y+4	; 0x04
    45a2:	fc 01       	movw	r30, r24
    45a4:	e2 0f       	add	r30, r18
    45a6:	f3 1f       	adc	r31, r19
    45a8:	80 81       	ld	r24, Z
    45aa:	88 23       	and	r24, r24
    45ac:	39 f7       	brne	.-50     	; 0x457c <lcd_write_word+0x16>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	08 95       	ret

000045bc <lcd_write_character>:
*purpose       	: sending one characterto LCD by sending
*				 		 the first nibble first then the second nibble
*						 enabling and disabling the LCD in between
*/
void lcd_write_character(uint8_t character)
{
    45bc:	df 93       	push	r29
    45be:	cf 93       	push	r28
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	e9 97       	sbiw	r28, 0x39	; 57
    45c6:	0f b6       	in	r0, 0x3f	; 63
    45c8:	f8 94       	cli
    45ca:	de bf       	out	0x3e, r29	; 62
    45cc:	0f be       	out	0x3f, r0	; 63
    45ce:	cd bf       	out	0x3d, r28	; 61
    45d0:	89 af       	std	Y+57, r24	; 0x39

	DATA_BUS=((character & 0b11110000));
    45d2:	eb e3       	ldi	r30, 0x3B	; 59
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	89 ad       	ldd	r24, Y+57	; 0x39
    45d8:	80 7f       	andi	r24, 0xF0	; 240
    45da:	80 83       	st	Z, r24
	CTL_BUS|=(1<<LCD_RS);
    45dc:	a8 e3       	ldi	r26, 0x38	; 56
    45de:	b0 e0       	ldi	r27, 0x00	; 0
    45e0:	e8 e3       	ldi	r30, 0x38	; 56
    45e2:	f0 e0       	ldi	r31, 0x00	; 0
    45e4:	80 81       	ld	r24, Z
    45e6:	82 60       	ori	r24, 0x02	; 2
    45e8:	8c 93       	st	X, r24
	CTL_BUS |=(1<<LCD_EN);
    45ea:	a8 e3       	ldi	r26, 0x38	; 56
    45ec:	b0 e0       	ldi	r27, 0x00	; 0
    45ee:	e8 e3       	ldi	r30, 0x38	; 56
    45f0:	f0 e0       	ldi	r31, 0x00	; 0
    45f2:	80 81       	ld	r24, Z
    45f4:	88 60       	ori	r24, 0x08	; 8
    45f6:	8c 93       	st	X, r24
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	a0 ea       	ldi	r26, 0xA0	; 160
    45fe:	b0 e4       	ldi	r27, 0x40	; 64
    4600:	8d ab       	std	Y+53, r24	; 0x35
    4602:	9e ab       	std	Y+54, r25	; 0x36
    4604:	af ab       	std	Y+55, r26	; 0x37
    4606:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4608:	6d a9       	ldd	r22, Y+53	; 0x35
    460a:	7e a9       	ldd	r23, Y+54	; 0x36
    460c:	8f a9       	ldd	r24, Y+55	; 0x37
    460e:	98 ad       	ldd	r25, Y+56	; 0x38
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	4a ef       	ldi	r20, 0xFA	; 250
    4616:	54 e4       	ldi	r21, 0x44	; 68
    4618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	89 ab       	std	Y+49, r24	; 0x31
    4622:	9a ab       	std	Y+50, r25	; 0x32
    4624:	ab ab       	std	Y+51, r26	; 0x33
    4626:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4628:	69 a9       	ldd	r22, Y+49	; 0x31
    462a:	7a a9       	ldd	r23, Y+50	; 0x32
    462c:	8b a9       	ldd	r24, Y+51	; 0x33
    462e:	9c a9       	ldd	r25, Y+52	; 0x34
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	40 e8       	ldi	r20, 0x80	; 128
    4636:	5f e3       	ldi	r21, 0x3F	; 63
    4638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    463c:	88 23       	and	r24, r24
    463e:	2c f4       	brge	.+10     	; 0x464a <lcd_write_character+0x8e>
		__ticks = 1;
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	98 ab       	std	Y+48, r25	; 0x30
    4646:	8f a7       	std	Y+47, r24	; 0x2f
    4648:	3f c0       	rjmp	.+126    	; 0x46c8 <lcd_write_character+0x10c>
	else if (__tmp > 65535)
    464a:	69 a9       	ldd	r22, Y+49	; 0x31
    464c:	7a a9       	ldd	r23, Y+50	; 0x32
    464e:	8b a9       	ldd	r24, Y+51	; 0x33
    4650:	9c a9       	ldd	r25, Y+52	; 0x34
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	3f ef       	ldi	r19, 0xFF	; 255
    4656:	4f e7       	ldi	r20, 0x7F	; 127
    4658:	57 e4       	ldi	r21, 0x47	; 71
    465a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    465e:	18 16       	cp	r1, r24
    4660:	4c f5       	brge	.+82     	; 0x46b4 <lcd_write_character+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4662:	6d a9       	ldd	r22, Y+53	; 0x35
    4664:	7e a9       	ldd	r23, Y+54	; 0x36
    4666:	8f a9       	ldd	r24, Y+55	; 0x37
    4668:	98 ad       	ldd	r25, Y+56	; 0x38
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e2       	ldi	r20, 0x20	; 32
    4670:	51 e4       	ldi	r21, 0x41	; 65
    4672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	bc 01       	movw	r22, r24
    467c:	cd 01       	movw	r24, r26
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	98 ab       	std	Y+48, r25	; 0x30
    4688:	8f a7       	std	Y+47, r24	; 0x2f
    468a:	0f c0       	rjmp	.+30     	; 0x46aa <lcd_write_character+0xee>
    468c:	88 ec       	ldi	r24, 0xC8	; 200
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	9e a7       	std	Y+46, r25	; 0x2e
    4692:	8d a7       	std	Y+45, r24	; 0x2d
    4694:	8d a5       	ldd	r24, Y+45	; 0x2d
    4696:	9e a5       	ldd	r25, Y+46	; 0x2e
    4698:	01 97       	sbiw	r24, 0x01	; 1
    469a:	f1 f7       	brne	.-4      	; 0x4698 <lcd_write_character+0xdc>
    469c:	9e a7       	std	Y+46, r25	; 0x2e
    469e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    46a2:	98 a9       	ldd	r25, Y+48	; 0x30
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	98 ab       	std	Y+48, r25	; 0x30
    46a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    46ac:	98 a9       	ldd	r25, Y+48	; 0x30
    46ae:	00 97       	sbiw	r24, 0x00	; 0
    46b0:	69 f7       	brne	.-38     	; 0x468c <lcd_write_character+0xd0>
    46b2:	14 c0       	rjmp	.+40     	; 0x46dc <lcd_write_character+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b4:	69 a9       	ldd	r22, Y+49	; 0x31
    46b6:	7a a9       	ldd	r23, Y+50	; 0x32
    46b8:	8b a9       	ldd	r24, Y+51	; 0x33
    46ba:	9c a9       	ldd	r25, Y+52	; 0x34
    46bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	98 ab       	std	Y+48, r25	; 0x30
    46c6:	8f a7       	std	Y+47, r24	; 0x2f
    46c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    46ca:	98 a9       	ldd	r25, Y+48	; 0x30
    46cc:	9c a7       	std	Y+44, r25	; 0x2c
    46ce:	8b a7       	std	Y+43, r24	; 0x2b
    46d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    46d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    46d4:	01 97       	sbiw	r24, 0x01	; 1
    46d6:	f1 f7       	brne	.-4      	; 0x46d4 <lcd_write_character+0x118>
    46d8:	9c a7       	std	Y+44, r25	; 0x2c
    46da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    46dc:	a8 e3       	ldi	r26, 0x38	; 56
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	e8 e3       	ldi	r30, 0x38	; 56
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	87 7f       	andi	r24, 0xF7	; 247
    46e8:	8c 93       	st	X, r24
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	a0 ea       	ldi	r26, 0xA0	; 160
    46f0:	b0 e4       	ldi	r27, 0x40	; 64
    46f2:	8f a3       	std	Y+39, r24	; 0x27
    46f4:	98 a7       	std	Y+40, r25	; 0x28
    46f6:	a9 a7       	std	Y+41, r26	; 0x29
    46f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fa:	6f a1       	ldd	r22, Y+39	; 0x27
    46fc:	78 a5       	ldd	r23, Y+40	; 0x28
    46fe:	89 a5       	ldd	r24, Y+41	; 0x29
    4700:	9a a5       	ldd	r25, Y+42	; 0x2a
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	4a ef       	ldi	r20, 0xFA	; 250
    4708:	54 e4       	ldi	r21, 0x44	; 68
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	8b a3       	std	Y+35, r24	; 0x23
    4714:	9c a3       	std	Y+36, r25	; 0x24
    4716:	ad a3       	std	Y+37, r26	; 0x25
    4718:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    471a:	6b a1       	ldd	r22, Y+35	; 0x23
    471c:	7c a1       	ldd	r23, Y+36	; 0x24
    471e:	8d a1       	ldd	r24, Y+37	; 0x25
    4720:	9e a1       	ldd	r25, Y+38	; 0x26
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	40 e8       	ldi	r20, 0x80	; 128
    4728:	5f e3       	ldi	r21, 0x3F	; 63
    472a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    472e:	88 23       	and	r24, r24
    4730:	2c f4       	brge	.+10     	; 0x473c <lcd_write_character+0x180>
		__ticks = 1;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9a a3       	std	Y+34, r25	; 0x22
    4738:	89 a3       	std	Y+33, r24	; 0x21
    473a:	3f c0       	rjmp	.+126    	; 0x47ba <lcd_write_character+0x1fe>
	else if (__tmp > 65535)
    473c:	6b a1       	ldd	r22, Y+35	; 0x23
    473e:	7c a1       	ldd	r23, Y+36	; 0x24
    4740:	8d a1       	ldd	r24, Y+37	; 0x25
    4742:	9e a1       	ldd	r25, Y+38	; 0x26
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	3f ef       	ldi	r19, 0xFF	; 255
    4748:	4f e7       	ldi	r20, 0x7F	; 127
    474a:	57 e4       	ldi	r21, 0x47	; 71
    474c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4750:	18 16       	cp	r1, r24
    4752:	4c f5       	brge	.+82     	; 0x47a6 <lcd_write_character+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4754:	6f a1       	ldd	r22, Y+39	; 0x27
    4756:	78 a5       	ldd	r23, Y+40	; 0x28
    4758:	89 a5       	ldd	r24, Y+41	; 0x29
    475a:	9a a5       	ldd	r25, Y+42	; 0x2a
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	40 e2       	ldi	r20, 0x20	; 32
    4762:	51 e4       	ldi	r21, 0x41	; 65
    4764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	bc 01       	movw	r22, r24
    476e:	cd 01       	movw	r24, r26
    4770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	9a a3       	std	Y+34, r25	; 0x22
    477a:	89 a3       	std	Y+33, r24	; 0x21
    477c:	0f c0       	rjmp	.+30     	; 0x479c <lcd_write_character+0x1e0>
    477e:	88 ec       	ldi	r24, 0xC8	; 200
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	98 a3       	std	Y+32, r25	; 0x20
    4784:	8f 8f       	std	Y+31, r24	; 0x1f
    4786:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4788:	98 a1       	ldd	r25, Y+32	; 0x20
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <lcd_write_character+0x1ce>
    478e:	98 a3       	std	Y+32, r25	; 0x20
    4790:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4792:	89 a1       	ldd	r24, Y+33	; 0x21
    4794:	9a a1       	ldd	r25, Y+34	; 0x22
    4796:	01 97       	sbiw	r24, 0x01	; 1
    4798:	9a a3       	std	Y+34, r25	; 0x22
    479a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479c:	89 a1       	ldd	r24, Y+33	; 0x21
    479e:	9a a1       	ldd	r25, Y+34	; 0x22
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	69 f7       	brne	.-38     	; 0x477e <lcd_write_character+0x1c2>
    47a4:	14 c0       	rjmp	.+40     	; 0x47ce <lcd_write_character+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a6:	6b a1       	ldd	r22, Y+35	; 0x23
    47a8:	7c a1       	ldd	r23, Y+36	; 0x24
    47aa:	8d a1       	ldd	r24, Y+37	; 0x25
    47ac:	9e a1       	ldd	r25, Y+38	; 0x26
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	9a a3       	std	Y+34, r25	; 0x22
    47b8:	89 a3       	std	Y+33, r24	; 0x21
    47ba:	89 a1       	ldd	r24, Y+33	; 0x21
    47bc:	9a a1       	ldd	r25, Y+34	; 0x22
    47be:	9e 8f       	std	Y+30, r25	; 0x1e
    47c0:	8d 8f       	std	Y+29, r24	; 0x1d
    47c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <lcd_write_character+0x20a>
    47ca:	9e 8f       	std	Y+30, r25	; 0x1e
    47cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	DATA_BUS=((character & 0b00001111)<<4);
    47ce:	eb e3       	ldi	r30, 0x3B	; 59
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	89 ad       	ldd	r24, Y+57	; 0x39
    47d4:	88 2f       	mov	r24, r24
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	82 95       	swap	r24
    47da:	92 95       	swap	r25
    47dc:	90 7f       	andi	r25, 0xF0	; 240
    47de:	98 27       	eor	r25, r24
    47e0:	80 7f       	andi	r24, 0xF0	; 240
    47e2:	98 27       	eor	r25, r24
    47e4:	80 83       	st	Z, r24
	CTL_BUS |=(1<<LCD_EN);
    47e6:	a8 e3       	ldi	r26, 0x38	; 56
    47e8:	b0 e0       	ldi	r27, 0x00	; 0
    47ea:	e8 e3       	ldi	r30, 0x38	; 56
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	80 81       	ld	r24, Z
    47f0:	88 60       	ori	r24, 0x08	; 8
    47f2:	8c 93       	st	X, r24
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	a0 ea       	ldi	r26, 0xA0	; 160
    47fa:	b0 e4       	ldi	r27, 0x40	; 64
    47fc:	89 8f       	std	Y+25, r24	; 0x19
    47fe:	9a 8f       	std	Y+26, r25	; 0x1a
    4800:	ab 8f       	std	Y+27, r26	; 0x1b
    4802:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4804:	69 8d       	ldd	r22, Y+25	; 0x19
    4806:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    480a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	4a ef       	ldi	r20, 0xFA	; 250
    4812:	54 e4       	ldi	r21, 0x44	; 68
    4814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	8d 8b       	std	Y+21, r24	; 0x15
    481e:	9e 8b       	std	Y+22, r25	; 0x16
    4820:	af 8b       	std	Y+23, r26	; 0x17
    4822:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4824:	6d 89       	ldd	r22, Y+21	; 0x15
    4826:	7e 89       	ldd	r23, Y+22	; 0x16
    4828:	8f 89       	ldd	r24, Y+23	; 0x17
    482a:	98 8d       	ldd	r25, Y+24	; 0x18
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	40 e8       	ldi	r20, 0x80	; 128
    4832:	5f e3       	ldi	r21, 0x3F	; 63
    4834:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4838:	88 23       	and	r24, r24
    483a:	2c f4       	brge	.+10     	; 0x4846 <lcd_write_character+0x28a>
		__ticks = 1;
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	9c 8b       	std	Y+20, r25	; 0x14
    4842:	8b 8b       	std	Y+19, r24	; 0x13
    4844:	3f c0       	rjmp	.+126    	; 0x48c4 <lcd_write_character+0x308>
	else if (__tmp > 65535)
    4846:	6d 89       	ldd	r22, Y+21	; 0x15
    4848:	7e 89       	ldd	r23, Y+22	; 0x16
    484a:	8f 89       	ldd	r24, Y+23	; 0x17
    484c:	98 8d       	ldd	r25, Y+24	; 0x18
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	3f ef       	ldi	r19, 0xFF	; 255
    4852:	4f e7       	ldi	r20, 0x7F	; 127
    4854:	57 e4       	ldi	r21, 0x47	; 71
    4856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    485a:	18 16       	cp	r1, r24
    485c:	4c f5       	brge	.+82     	; 0x48b0 <lcd_write_character+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    485e:	69 8d       	ldd	r22, Y+25	; 0x19
    4860:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	40 e2       	ldi	r20, 0x20	; 32
    486c:	51 e4       	ldi	r21, 0x41	; 65
    486e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	bc 01       	movw	r22, r24
    4878:	cd 01       	movw	r24, r26
    487a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487e:	dc 01       	movw	r26, r24
    4880:	cb 01       	movw	r24, r22
    4882:	9c 8b       	std	Y+20, r25	; 0x14
    4884:	8b 8b       	std	Y+19, r24	; 0x13
    4886:	0f c0       	rjmp	.+30     	; 0x48a6 <lcd_write_character+0x2ea>
    4888:	88 ec       	ldi	r24, 0xC8	; 200
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	9a 8b       	std	Y+18, r25	; 0x12
    488e:	89 8b       	std	Y+17, r24	; 0x11
    4890:	89 89       	ldd	r24, Y+17	; 0x11
    4892:	9a 89       	ldd	r25, Y+18	; 0x12
    4894:	01 97       	sbiw	r24, 0x01	; 1
    4896:	f1 f7       	brne	.-4      	; 0x4894 <lcd_write_character+0x2d8>
    4898:	9a 8b       	std	Y+18, r25	; 0x12
    489a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    489c:	8b 89       	ldd	r24, Y+19	; 0x13
    489e:	9c 89       	ldd	r25, Y+20	; 0x14
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	9c 8b       	std	Y+20, r25	; 0x14
    48a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48a6:	8b 89       	ldd	r24, Y+19	; 0x13
    48a8:	9c 89       	ldd	r25, Y+20	; 0x14
    48aa:	00 97       	sbiw	r24, 0x00	; 0
    48ac:	69 f7       	brne	.-38     	; 0x4888 <lcd_write_character+0x2cc>
    48ae:	14 c0       	rjmp	.+40     	; 0x48d8 <lcd_write_character+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b0:	6d 89       	ldd	r22, Y+21	; 0x15
    48b2:	7e 89       	ldd	r23, Y+22	; 0x16
    48b4:	8f 89       	ldd	r24, Y+23	; 0x17
    48b6:	98 8d       	ldd	r25, Y+24	; 0x18
    48b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48bc:	dc 01       	movw	r26, r24
    48be:	cb 01       	movw	r24, r22
    48c0:	9c 8b       	std	Y+20, r25	; 0x14
    48c2:	8b 8b       	std	Y+19, r24	; 0x13
    48c4:	8b 89       	ldd	r24, Y+19	; 0x13
    48c6:	9c 89       	ldd	r25, Y+20	; 0x14
    48c8:	98 8b       	std	Y+16, r25	; 0x10
    48ca:	8f 87       	std	Y+15, r24	; 0x0f
    48cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    48ce:	98 89       	ldd	r25, Y+16	; 0x10
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	f1 f7       	brne	.-4      	; 0x48d0 <lcd_write_character+0x314>
    48d4:	98 8b       	std	Y+16, r25	; 0x10
    48d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	CTL_BUS &=~(1<<LCD_EN);
    48d8:	a8 e3       	ldi	r26, 0x38	; 56
    48da:	b0 e0       	ldi	r27, 0x00	; 0
    48dc:	e8 e3       	ldi	r30, 0x38	; 56
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	87 7f       	andi	r24, 0xF7	; 247
    48e4:	8c 93       	st	X, r24
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	a0 ea       	ldi	r26, 0xA0	; 160
    48ec:	b0 e4       	ldi	r27, 0x40	; 64
    48ee:	8b 87       	std	Y+11, r24	; 0x0b
    48f0:	9c 87       	std	Y+12, r25	; 0x0c
    48f2:	ad 87       	std	Y+13, r26	; 0x0d
    48f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    48f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    48fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    48fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	4a ef       	ldi	r20, 0xFA	; 250
    4904:	54 e4       	ldi	r21, 0x44	; 68
    4906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	8f 83       	std	Y+7, r24	; 0x07
    4910:	98 87       	std	Y+8, r25	; 0x08
    4912:	a9 87       	std	Y+9, r26	; 0x09
    4914:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4916:	6f 81       	ldd	r22, Y+7	; 0x07
    4918:	78 85       	ldd	r23, Y+8	; 0x08
    491a:	89 85       	ldd	r24, Y+9	; 0x09
    491c:	9a 85       	ldd	r25, Y+10	; 0x0a
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	40 e8       	ldi	r20, 0x80	; 128
    4924:	5f e3       	ldi	r21, 0x3F	; 63
    4926:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    492a:	88 23       	and	r24, r24
    492c:	2c f4       	brge	.+10     	; 0x4938 <lcd_write_character+0x37c>
		__ticks = 1;
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	9e 83       	std	Y+6, r25	; 0x06
    4934:	8d 83       	std	Y+5, r24	; 0x05
    4936:	3f c0       	rjmp	.+126    	; 0x49b6 <lcd_write_character+0x3fa>
	else if (__tmp > 65535)
    4938:	6f 81       	ldd	r22, Y+7	; 0x07
    493a:	78 85       	ldd	r23, Y+8	; 0x08
    493c:	89 85       	ldd	r24, Y+9	; 0x09
    493e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	3f ef       	ldi	r19, 0xFF	; 255
    4944:	4f e7       	ldi	r20, 0x7F	; 127
    4946:	57 e4       	ldi	r21, 0x47	; 71
    4948:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    494c:	18 16       	cp	r1, r24
    494e:	4c f5       	brge	.+82     	; 0x49a2 <lcd_write_character+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4950:	6b 85       	ldd	r22, Y+11	; 0x0b
    4952:	7c 85       	ldd	r23, Y+12	; 0x0c
    4954:	8d 85       	ldd	r24, Y+13	; 0x0d
    4956:	9e 85       	ldd	r25, Y+14	; 0x0e
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e2       	ldi	r20, 0x20	; 32
    495e:	51 e4       	ldi	r21, 0x41	; 65
    4960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	bc 01       	movw	r22, r24
    496a:	cd 01       	movw	r24, r26
    496c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4970:	dc 01       	movw	r26, r24
    4972:	cb 01       	movw	r24, r22
    4974:	9e 83       	std	Y+6, r25	; 0x06
    4976:	8d 83       	std	Y+5, r24	; 0x05
    4978:	0f c0       	rjmp	.+30     	; 0x4998 <lcd_write_character+0x3dc>
    497a:	88 ec       	ldi	r24, 0xC8	; 200
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	9c 83       	std	Y+4, r25	; 0x04
    4980:	8b 83       	std	Y+3, r24	; 0x03
    4982:	8b 81       	ldd	r24, Y+3	; 0x03
    4984:	9c 81       	ldd	r25, Y+4	; 0x04
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	f1 f7       	brne	.-4      	; 0x4986 <lcd_write_character+0x3ca>
    498a:	9c 83       	std	Y+4, r25	; 0x04
    498c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498e:	8d 81       	ldd	r24, Y+5	; 0x05
    4990:	9e 81       	ldd	r25, Y+6	; 0x06
    4992:	01 97       	sbiw	r24, 0x01	; 1
    4994:	9e 83       	std	Y+6, r25	; 0x06
    4996:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4998:	8d 81       	ldd	r24, Y+5	; 0x05
    499a:	9e 81       	ldd	r25, Y+6	; 0x06
    499c:	00 97       	sbiw	r24, 0x00	; 0
    499e:	69 f7       	brne	.-38     	; 0x497a <lcd_write_character+0x3be>
    49a0:	14 c0       	rjmp	.+40     	; 0x49ca <lcd_write_character+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a2:	6f 81       	ldd	r22, Y+7	; 0x07
    49a4:	78 85       	ldd	r23, Y+8	; 0x08
    49a6:	89 85       	ldd	r24, Y+9	; 0x09
    49a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	9e 83       	std	Y+6, r25	; 0x06
    49b4:	8d 83       	std	Y+5, r24	; 0x05
    49b6:	8d 81       	ldd	r24, Y+5	; 0x05
    49b8:	9e 81       	ldd	r25, Y+6	; 0x06
    49ba:	9a 83       	std	Y+2, r25	; 0x02
    49bc:	89 83       	std	Y+1, r24	; 0x01
    49be:	89 81       	ldd	r24, Y+1	; 0x01
    49c0:	9a 81       	ldd	r25, Y+2	; 0x02
    49c2:	01 97       	sbiw	r24, 0x01	; 1
    49c4:	f1 f7       	brne	.-4      	; 0x49c2 <lcd_write_character+0x406>
    49c6:	9a 83       	std	Y+2, r25	; 0x02
    49c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    49ca:	e9 96       	adiw	r28, 0x39	; 57
    49cc:	0f b6       	in	r0, 0x3f	; 63
    49ce:	f8 94       	cli
    49d0:	de bf       	out	0x3e, r29	; 62
    49d2:	0f be       	out	0x3f, r0	; 63
    49d4:	cd bf       	out	0x3d, r28	; 61
    49d6:	cf 91       	pop	r28
    49d8:	df 91       	pop	r29
    49da:	08 95       	ret

000049dc <lcd_clear>:
*return		   		: void
*purpose       	: Clearing the lcd screen by sending
*				 	the LCD_CMD_CLEAR_DISPLAY command to LCD
*/
void lcd_clear(void)
{
    49dc:	df 93       	push	r29
    49de:	cf 93       	push	r28
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
    49e4:	2e 97       	sbiw	r28, 0x0e	; 14
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	f8 94       	cli
    49ea:	de bf       	out	0x3e, r29	; 62
    49ec:	0f be       	out	0x3f, r0	; 63
    49ee:	cd bf       	out	0x3d, r28	; 61
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	0e 94 a3 20 	call	0x4146	; 0x4146 <lcd_send_command>
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	a0 ea       	ldi	r26, 0xA0	; 160
    49fc:	b0 e4       	ldi	r27, 0x40	; 64
    49fe:	8b 87       	std	Y+11, r24	; 0x0b
    4a00:	9c 87       	std	Y+12, r25	; 0x0c
    4a02:	ad 87       	std	Y+13, r26	; 0x0d
    4a04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	4a ef       	ldi	r20, 0xFA	; 250
    4a14:	54 e4       	ldi	r21, 0x44	; 68
    4a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a1a:	dc 01       	movw	r26, r24
    4a1c:	cb 01       	movw	r24, r22
    4a1e:	8f 83       	std	Y+7, r24	; 0x07
    4a20:	98 87       	std	Y+8, r25	; 0x08
    4a22:	a9 87       	std	Y+9, r26	; 0x09
    4a24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a26:	6f 81       	ldd	r22, Y+7	; 0x07
    4a28:	78 85       	ldd	r23, Y+8	; 0x08
    4a2a:	89 85       	ldd	r24, Y+9	; 0x09
    4a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	40 e8       	ldi	r20, 0x80	; 128
    4a34:	5f e3       	ldi	r21, 0x3F	; 63
    4a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a3a:	88 23       	and	r24, r24
    4a3c:	2c f4       	brge	.+10     	; 0x4a48 <lcd_clear+0x6c>
		__ticks = 1;
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	9e 83       	std	Y+6, r25	; 0x06
    4a44:	8d 83       	std	Y+5, r24	; 0x05
    4a46:	3f c0       	rjmp	.+126    	; 0x4ac6 <lcd_clear+0xea>
	else if (__tmp > 65535)
    4a48:	6f 81       	ldd	r22, Y+7	; 0x07
    4a4a:	78 85       	ldd	r23, Y+8	; 0x08
    4a4c:	89 85       	ldd	r24, Y+9	; 0x09
    4a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	3f ef       	ldi	r19, 0xFF	; 255
    4a54:	4f e7       	ldi	r20, 0x7F	; 127
    4a56:	57 e4       	ldi	r21, 0x47	; 71
    4a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a5c:	18 16       	cp	r1, r24
    4a5e:	4c f5       	brge	.+82     	; 0x4ab2 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	40 e2       	ldi	r20, 0x20	; 32
    4a6e:	51 e4       	ldi	r21, 0x41	; 65
    4a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	bc 01       	movw	r22, r24
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	9e 83       	std	Y+6, r25	; 0x06
    4a86:	8d 83       	std	Y+5, r24	; 0x05
    4a88:	0f c0       	rjmp	.+30     	; 0x4aa8 <lcd_clear+0xcc>
    4a8a:	88 ec       	ldi	r24, 0xC8	; 200
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9c 83       	std	Y+4, r25	; 0x04
    4a90:	8b 83       	std	Y+3, r24	; 0x03
    4a92:	8b 81       	ldd	r24, Y+3	; 0x03
    4a94:	9c 81       	ldd	r25, Y+4	; 0x04
    4a96:	01 97       	sbiw	r24, 0x01	; 1
    4a98:	f1 f7       	brne	.-4      	; 0x4a96 <lcd_clear+0xba>
    4a9a:	9c 83       	std	Y+4, r25	; 0x04
    4a9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	9e 83       	std	Y+6, r25	; 0x06
    4aa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	69 f7       	brne	.-38     	; 0x4a8a <lcd_clear+0xae>
    4ab0:	14 c0       	rjmp	.+40     	; 0x4ada <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ab4:	78 85       	ldd	r23, Y+8	; 0x08
    4ab6:	89 85       	ldd	r24, Y+9	; 0x09
    4ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	9e 83       	std	Y+6, r25	; 0x06
    4ac4:	8d 83       	std	Y+5, r24	; 0x05
    4ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aca:	9a 83       	std	Y+2, r25	; 0x02
    4acc:	89 83       	std	Y+1, r24	; 0x01
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad2:	01 97       	sbiw	r24, 0x01	; 1
    4ad4:	f1 f7       	brne	.-4      	; 0x4ad2 <lcd_clear+0xf6>
    4ad6:	9a 83       	std	Y+2, r25	; 0x02
    4ad8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    4ada:	2e 96       	adiw	r28, 0x0e	; 14
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	0f be       	out	0x3f, r0	; 63
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	08 95       	ret

00004aec <lcd_goto_xy>:
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62
    4af4:	6a 97       	sbiw	r28, 0x1a	; 26
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	f8 94       	cli
    4afa:	de bf       	out	0x3e, r29	; 62
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	cd bf       	out	0x3d, r28	; 61
    4b00:	89 8f       	std	Y+25, r24	; 0x19
    4b02:	6a 8f       	std	Y+26, r22	; 0x1a
	lcd_send_command((0x80|(line<<6))+pos);
    4b04:	89 8d       	ldd	r24, Y+25	; 0x19
    4b06:	88 2f       	mov	r24, r24
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	00 24       	eor	r0, r0
    4b0c:	96 95       	lsr	r25
    4b0e:	87 95       	ror	r24
    4b10:	07 94       	ror	r0
    4b12:	96 95       	lsr	r25
    4b14:	87 95       	ror	r24
    4b16:	07 94       	ror	r0
    4b18:	98 2f       	mov	r25, r24
    4b1a:	80 2d       	mov	r24, r0
    4b1c:	80 68       	ori	r24, 0x80	; 128
    4b1e:	98 2f       	mov	r25, r24
    4b20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b22:	89 0f       	add	r24, r25
    4b24:	0e 94 a3 20 	call	0x4146	; 0x4146 <lcd_send_command>
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	a8 e4       	ldi	r26, 0x48	; 72
    4b2e:	b2 e4       	ldi	r27, 0x42	; 66
    4b30:	8d 8b       	std	Y+21, r24	; 0x15
    4b32:	9e 8b       	std	Y+22, r25	; 0x16
    4b34:	af 8b       	std	Y+23, r26	; 0x17
    4b36:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b38:	6d 89       	ldd	r22, Y+21	; 0x15
    4b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4b40:	2b ea       	ldi	r18, 0xAB	; 171
    4b42:	3a ea       	ldi	r19, 0xAA	; 170
    4b44:	4a e2       	ldi	r20, 0x2A	; 42
    4b46:	50 e4       	ldi	r21, 0x40	; 64
    4b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	89 8b       	std	Y+17, r24	; 0x11
    4b52:	9a 8b       	std	Y+18, r25	; 0x12
    4b54:	ab 8b       	std	Y+19, r26	; 0x13
    4b56:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4b58:	69 89       	ldd	r22, Y+17	; 0x11
    4b5a:	7a 89       	ldd	r23, Y+18	; 0x12
    4b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    4b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e8       	ldi	r20, 0x80	; 128
    4b66:	5f e3       	ldi	r21, 0x3F	; 63
    4b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b6c:	88 23       	and	r24, r24
    4b6e:	1c f4       	brge	.+6      	; 0x4b76 <lcd_goto_xy+0x8a>
		__ticks = 1;
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	88 8b       	std	Y+16, r24	; 0x10
    4b74:	91 c0       	rjmp	.+290    	; 0x4c98 <lcd_goto_xy+0x1ac>
	else if (__tmp > 255)
    4b76:	69 89       	ldd	r22, Y+17	; 0x11
    4b78:	7a 89       	ldd	r23, Y+18	; 0x12
    4b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    4b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	4f e7       	ldi	r20, 0x7F	; 127
    4b84:	53 e4       	ldi	r21, 0x43	; 67
    4b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b8a:	18 16       	cp	r1, r24
    4b8c:	0c f0       	brlt	.+2      	; 0x4b90 <lcd_goto_xy+0xa4>
    4b8e:	7b c0       	rjmp	.+246    	; 0x4c86 <lcd_goto_xy+0x19a>
	{
		_delay_ms(__us / 1000.0);
    4b90:	6d 89       	ldd	r22, Y+21	; 0x15
    4b92:	7e 89       	ldd	r23, Y+22	; 0x16
    4b94:	8f 89       	ldd	r24, Y+23	; 0x17
    4b96:	98 8d       	ldd	r25, Y+24	; 0x18
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	4a e7       	ldi	r20, 0x7A	; 122
    4b9e:	54 e4       	ldi	r21, 0x44	; 68
    4ba0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	8c 87       	std	Y+12, r24	; 0x0c
    4baa:	9d 87       	std	Y+13, r25	; 0x0d
    4bac:	ae 87       	std	Y+14, r26	; 0x0e
    4bae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    4bb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    4bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	4a ef       	ldi	r20, 0xFA	; 250
    4bbe:	54 e4       	ldi	r21, 0x44	; 68
    4bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	88 87       	std	Y+8, r24	; 0x08
    4bca:	99 87       	std	Y+9, r25	; 0x09
    4bcc:	aa 87       	std	Y+10, r26	; 0x0a
    4bce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4bd0:	68 85       	ldd	r22, Y+8	; 0x08
    4bd2:	79 85       	ldd	r23, Y+9	; 0x09
    4bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	40 e8       	ldi	r20, 0x80	; 128
    4bde:	5f e3       	ldi	r21, 0x3F	; 63
    4be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4be4:	88 23       	and	r24, r24
    4be6:	2c f4       	brge	.+10     	; 0x4bf2 <lcd_goto_xy+0x106>
		__ticks = 1;
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	9f 83       	std	Y+7, r25	; 0x07
    4bee:	8e 83       	std	Y+6, r24	; 0x06
    4bf0:	3f c0       	rjmp	.+126    	; 0x4c70 <lcd_goto_xy+0x184>
	else if (__tmp > 65535)
    4bf2:	68 85       	ldd	r22, Y+8	; 0x08
    4bf4:	79 85       	ldd	r23, Y+9	; 0x09
    4bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	3f ef       	ldi	r19, 0xFF	; 255
    4bfe:	4f e7       	ldi	r20, 0x7F	; 127
    4c00:	57 e4       	ldi	r21, 0x47	; 71
    4c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c06:	18 16       	cp	r1, r24
    4c08:	4c f5       	brge	.+82     	; 0x4c5c <lcd_goto_xy+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c10:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e2       	ldi	r20, 0x20	; 32
    4c18:	51 e4       	ldi	r21, 0x41	; 65
    4c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	bc 01       	movw	r22, r24
    4c24:	cd 01       	movw	r24, r26
    4c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2a:	dc 01       	movw	r26, r24
    4c2c:	cb 01       	movw	r24, r22
    4c2e:	9f 83       	std	Y+7, r25	; 0x07
    4c30:	8e 83       	std	Y+6, r24	; 0x06
    4c32:	0f c0       	rjmp	.+30     	; 0x4c52 <lcd_goto_xy+0x166>
    4c34:	88 ec       	ldi	r24, 0xC8	; 200
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	9d 83       	std	Y+5, r25	; 0x05
    4c3a:	8c 83       	std	Y+4, r24	; 0x04
    4c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	f1 f7       	brne	.-4      	; 0x4c40 <lcd_goto_xy+0x154>
    4c44:	9d 83       	std	Y+5, r25	; 0x05
    4c46:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c48:	8e 81       	ldd	r24, Y+6	; 0x06
    4c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c4c:	01 97       	sbiw	r24, 0x01	; 1
    4c4e:	9f 83       	std	Y+7, r25	; 0x07
    4c50:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c52:	8e 81       	ldd	r24, Y+6	; 0x06
    4c54:	9f 81       	ldd	r25, Y+7	; 0x07
    4c56:	00 97       	sbiw	r24, 0x00	; 0
    4c58:	69 f7       	brne	.-38     	; 0x4c34 <lcd_goto_xy+0x148>
    4c5a:	24 c0       	rjmp	.+72     	; 0x4ca4 <lcd_goto_xy+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c5c:	68 85       	ldd	r22, Y+8	; 0x08
    4c5e:	79 85       	ldd	r23, Y+9	; 0x09
    4c60:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c62:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	9f 83       	std	Y+7, r25	; 0x07
    4c6e:	8e 83       	std	Y+6, r24	; 0x06
    4c70:	8e 81       	ldd	r24, Y+6	; 0x06
    4c72:	9f 81       	ldd	r25, Y+7	; 0x07
    4c74:	9b 83       	std	Y+3, r25	; 0x03
    4c76:	8a 83       	std	Y+2, r24	; 0x02
    4c78:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c7c:	01 97       	sbiw	r24, 0x01	; 1
    4c7e:	f1 f7       	brne	.-4      	; 0x4c7c <lcd_goto_xy+0x190>
    4c80:	9b 83       	std	Y+3, r25	; 0x03
    4c82:	8a 83       	std	Y+2, r24	; 0x02
    4c84:	0f c0       	rjmp	.+30     	; 0x4ca4 <lcd_goto_xy+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4c86:	69 89       	ldd	r22, Y+17	; 0x11
    4c88:	7a 89       	ldd	r23, Y+18	; 0x12
    4c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c92:	dc 01       	movw	r26, r24
    4c94:	cb 01       	movw	r24, r22
    4c96:	88 8b       	std	Y+16, r24	; 0x10
    4c98:	88 89       	ldd	r24, Y+16	; 0x10
    4c9a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
    4c9e:	8a 95       	dec	r24
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <lcd_goto_xy+0x1b2>
    4ca2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us (50);
}
    4ca4:	6a 96       	adiw	r28, 0x1a	; 26
    4ca6:	0f b6       	in	r0, 0x3f	; 63
    4ca8:	f8 94       	cli
    4caa:	de bf       	out	0x3e, r29	; 62
    4cac:	0f be       	out	0x3f, r0	; 63
    4cae:	cd bf       	out	0x3d, r28	; 61
    4cb0:	cf 91       	pop	r28
    4cb2:	df 91       	pop	r29
    4cb4:	08 95       	ret

00004cb6 <main>:
uint32_t timer_counter=0;
uint32_t distance;
uint8_t distance_str[10];


void main(void){
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
    4cba:	df 93       	push	r29
    4cbc:	cf 93       	push	r28
    4cbe:	cd b7       	in	r28, 0x3d	; 61
    4cc0:	de b7       	in	r29, 0x3e	; 62
    4cc2:	c6 54       	subi	r28, 0x46	; 70
    4cc4:	d0 40       	sbci	r29, 0x00	; 0
    4cc6:	0f b6       	in	r0, 0x3f	; 63
    4cc8:	f8 94       	cli
    4cca:	de bf       	out	0x3e, r29	; 62
    4ccc:	0f be       	out	0x3f, r0	; 63
    4cce:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    4cd0:	83 e0       	ldi	r24, 0x03	; 3
    4cd2:	62 e0       	ldi	r22, 0x02	; 2
    4cd4:	40 e0       	ldi	r20, 0x00	; 0
    4cd6:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_OUTPUT);
    4cda:	83 e0       	ldi	r24, 0x03	; 3
    4cdc:	62 e0       	ldi	r22, 0x02	; 2
    4cde:	41 e0       	ldi	r20, 0x01	; 1
    4ce0:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	EXT_voidEnable(EXTINT0);
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	0e 94 4d 08 	call	0x109a	; 0x109a <EXT_voidEnable>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN0,DIO_OUTPUT);
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	60 e0       	ldi	r22, 0x00	; 0
    4cee:	41 e0       	ldi	r20, 0x01	; 1
    4cf0:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN1,DIO_OUTPUT);
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	61 e0       	ldi	r22, 0x01	; 1
    4cf8:	41 e0       	ldi	r20, 0x01	; 1
    4cfa:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN2,DIO_OUTPUT);
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	62 e0       	ldi	r22, 0x02	; 2
    4d02:	41 e0       	ldi	r20, 0x01	; 1
    4d04:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	63 e0       	ldi	r22, 0x03	; 3
    4d0c:	41 e0       	ldi	r20, 0x01	; 1
    4d0e:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_voidSetPinDirection>
	LCD_4bitIntialization ();
    4d12:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_4bitIntialization>
    ultrasonic_init();
    4d16:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <ultrasonic_init>
    sei();
    4d1a:	78 94       	sei
    ADC_voidInitTEMP();
    4d1c:	0e 94 bd 0c 	call	0x197a	; 0x197a <ADC_voidInitTEMP>
    4d20:	fe 01       	movw	r30, r28
    4d22:	ed 5b       	subi	r30, 0xBD	; 189
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	a0 e2       	ldi	r26, 0x20	; 32
    4d2c:	b1 e4       	ldi	r27, 0x41	; 65
    4d2e:	80 83       	st	Z, r24
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	a2 83       	std	Z+2, r26	; 0x02
    4d34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d36:	8e 01       	movw	r16, r28
    4d38:	01 5c       	subi	r16, 0xC1	; 193
    4d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	ed 5b       	subi	r30, 0xBD	; 189
    4d40:	ff 4f       	sbci	r31, 0xFF	; 255
    4d42:	60 81       	ld	r22, Z
    4d44:	71 81       	ldd	r23, Z+1	; 0x01
    4d46:	82 81       	ldd	r24, Z+2	; 0x02
    4d48:	93 81       	ldd	r25, Z+3	; 0x03
    4d4a:	20 e0       	ldi	r18, 0x00	; 0
    4d4c:	30 e0       	ldi	r19, 0x00	; 0
    4d4e:	4a ef       	ldi	r20, 0xFA	; 250
    4d50:	54 e4       	ldi	r21, 0x44	; 68
    4d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22
    4d5a:	f8 01       	movw	r30, r16
    4d5c:	80 83       	st	Z, r24
    4d5e:	91 83       	std	Z+1, r25	; 0x01
    4d60:	a2 83       	std	Z+2, r26	; 0x02
    4d62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d64:	fe 01       	movw	r30, r28
    4d66:	ff 96       	adiw	r30, 0x3f	; 63
    4d68:	60 81       	ld	r22, Z
    4d6a:	71 81       	ldd	r23, Z+1	; 0x01
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	93 81       	ldd	r25, Z+3	; 0x03
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	5f e3       	ldi	r21, 0x3F	; 63
    4d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d7c:	88 23       	and	r24, r24
    4d7e:	2c f4       	brge	.+10     	; 0x4d8a <main+0xd4>
		__ticks = 1;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	9e af       	std	Y+62, r25	; 0x3e
    4d86:	8d af       	std	Y+61, r24	; 0x3d
    4d88:	46 c0       	rjmp	.+140    	; 0x4e16 <main+0x160>
	else if (__tmp > 65535)
    4d8a:	fe 01       	movw	r30, r28
    4d8c:	ff 96       	adiw	r30, 0x3f	; 63
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	3f ef       	ldi	r19, 0xFF	; 255
    4d9a:	4f e7       	ldi	r20, 0x7F	; 127
    4d9c:	57 e4       	ldi	r21, 0x47	; 71
    4d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4da2:	18 16       	cp	r1, r24
    4da4:	64 f5       	brge	.+88     	; 0x4dfe <main+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da6:	fe 01       	movw	r30, r28
    4da8:	ed 5b       	subi	r30, 0xBD	; 189
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	60 81       	ld	r22, Z
    4dae:	71 81       	ldd	r23, Z+1	; 0x01
    4db0:	82 81       	ldd	r24, Z+2	; 0x02
    4db2:	93 81       	ldd	r25, Z+3	; 0x03
    4db4:	20 e0       	ldi	r18, 0x00	; 0
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	40 e2       	ldi	r20, 0x20	; 32
    4dba:	51 e4       	ldi	r21, 0x41	; 65
    4dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	bc 01       	movw	r22, r24
    4dc6:	cd 01       	movw	r24, r26
    4dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	9e af       	std	Y+62, r25	; 0x3e
    4dd2:	8d af       	std	Y+61, r24	; 0x3d
    4dd4:	0f c0       	rjmp	.+30     	; 0x4df4 <main+0x13e>
    4dd6:	88 ec       	ldi	r24, 0xC8	; 200
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	9c af       	std	Y+60, r25	; 0x3c
    4ddc:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4dde:	8b ad       	ldd	r24, Y+59	; 0x3b
    4de0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	f1 f7       	brne	.-4      	; 0x4de2 <main+0x12c>
    4de6:	9c af       	std	Y+60, r25	; 0x3c
    4de8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dea:	8d ad       	ldd	r24, Y+61	; 0x3d
    4dec:	9e ad       	ldd	r25, Y+62	; 0x3e
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	9e af       	std	Y+62, r25	; 0x3e
    4df2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4df4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4df6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4df8:	00 97       	sbiw	r24, 0x00	; 0
    4dfa:	69 f7       	brne	.-38     	; 0x4dd6 <main+0x120>
    4dfc:	16 c0       	rjmp	.+44     	; 0x4e2a <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dfe:	fe 01       	movw	r30, r28
    4e00:	ff 96       	adiw	r30, 0x3f	; 63
    4e02:	60 81       	ld	r22, Z
    4e04:	71 81       	ldd	r23, Z+1	; 0x01
    4e06:	82 81       	ldd	r24, Z+2	; 0x02
    4e08:	93 81       	ldd	r25, Z+3	; 0x03
    4e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	9e af       	std	Y+62, r25	; 0x3e
    4e14:	8d af       	std	Y+61, r24	; 0x3d
    4e16:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e18:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e1a:	9a af       	std	Y+58, r25	; 0x3a
    4e1c:	89 af       	std	Y+57, r24	; 0x39
    4e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    4e20:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e22:	01 97       	sbiw	r24, 0x01	; 1
    4e24:	f1 f7       	brne	.-4      	; 0x4e22 <main+0x16c>
    4e26:	9a af       	std	Y+58, r25	; 0x3a
    4e28:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(10);
	while(1){
		adc_value1=ADC_u16GetRawData(ADCCH0);
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <ADC_u16GetRawData>
    4e32:	aa 27       	eor	r26, r26
    4e34:	97 fd       	sbrc	r25, 7
    4e36:	a0 95       	com	r26
    4e38:	ba 2f       	mov	r27, r26
    4e3a:	bc 01       	movw	r22, r24
    4e3c:	cd 01       	movw	r24, r26
    4e3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	80 93 a6 01 	sts	0x01A6, r24
    4e4a:	90 93 a7 01 	sts	0x01A7, r25
    4e4e:	a0 93 a8 01 	sts	0x01A8, r26
    4e52:	b0 93 a9 01 	sts	0x01A9, r27
		adc_value2=ADC_u16GetRawData(ADCCH1);
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <ADC_u16GetRawData>
    4e5e:	aa 27       	eor	r26, r26
    4e60:	97 fd       	sbrc	r25, 7
    4e62:	a0 95       	com	r26
    4e64:	ba 2f       	mov	r27, r26
    4e66:	bc 01       	movw	r22, r24
    4e68:	cd 01       	movw	r24, r26
    4e6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4e6e:	dc 01       	movw	r26, r24
    4e70:	cb 01       	movw	r24, r22
    4e72:	80 93 aa 01 	sts	0x01AA, r24
    4e76:	90 93 ab 01 	sts	0x01AB, r25
    4e7a:	a0 93 ac 01 	sts	0x01AC, r26
    4e7e:	b0 93 ad 01 	sts	0x01AD, r27
		adc_volt1 = ((adc_value1*500)/1023.0); // for all volt measurement. R1= 56K, R2=5K;
    4e82:	80 91 a6 01 	lds	r24, 0x01A6
    4e86:	90 91 a7 01 	lds	r25, 0x01A7
    4e8a:	a0 91 a8 01 	lds	r26, 0x01A8
    4e8e:	b0 91 a9 01 	lds	r27, 0x01A9
    4e92:	bc 01       	movw	r22, r24
    4e94:	cd 01       	movw	r24, r26
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	4a ef       	ldi	r20, 0xFA	; 250
    4e9c:	53 e4       	ldi	r21, 0x43	; 67
    4e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	bc 01       	movw	r22, r24
    4ea8:	cd 01       	movw	r24, r26
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	30 ec       	ldi	r19, 0xC0	; 192
    4eae:	4f e7       	ldi	r20, 0x7F	; 127
    4eb0:	54 e4       	ldi	r21, 0x44	; 68
    4eb2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	80 93 ae 01 	sts	0x01AE, r24
    4ebe:	90 93 af 01 	sts	0x01AF, r25
    4ec2:	a0 93 b0 01 	sts	0x01B0, r26
    4ec6:	b0 93 b1 01 	sts	0x01B1, r27
		adc_volt2 = ((adc_value2*500)/1023.0); // for all volt measurement. R1= 56K, R2=5K;
    4eca:	80 91 aa 01 	lds	r24, 0x01AA
    4ece:	90 91 ab 01 	lds	r25, 0x01AB
    4ed2:	a0 91 ac 01 	lds	r26, 0x01AC
    4ed6:	b0 91 ad 01 	lds	r27, 0x01AD
    4eda:	bc 01       	movw	r22, r24
    4edc:	cd 01       	movw	r24, r26
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	4a ef       	ldi	r20, 0xFA	; 250
    4ee4:	53 e4       	ldi	r21, 0x43	; 67
    4ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eea:	dc 01       	movw	r26, r24
    4eec:	cb 01       	movw	r24, r22
    4eee:	bc 01       	movw	r22, r24
    4ef0:	cd 01       	movw	r24, r26
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 ec       	ldi	r19, 0xC0	; 192
    4ef6:	4f e7       	ldi	r20, 0x7F	; 127
    4ef8:	54 e4       	ldi	r21, 0x44	; 68
    4efa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	80 93 b2 01 	sts	0x01B2, r24
    4f06:	90 93 b3 01 	sts	0x01B3, r25
    4f0a:	a0 93 b4 01 	sts	0x01B4, r26
    4f0e:	b0 93 b5 01 	sts	0x01B5, r27
		temp = (adc_volt1 - adc_volt2);
    4f12:	80 91 ae 01 	lds	r24, 0x01AE
    4f16:	90 91 af 01 	lds	r25, 0x01AF
    4f1a:	a0 91 b0 01 	lds	r26, 0x01B0
    4f1e:	b0 91 b1 01 	lds	r27, 0x01B1
    4f22:	20 91 b2 01 	lds	r18, 0x01B2
    4f26:	30 91 b3 01 	lds	r19, 0x01B3
    4f2a:	40 91 b4 01 	lds	r20, 0x01B4
    4f2e:	50 91 b5 01 	lds	r21, 0x01B5
    4f32:	bc 01       	movw	r22, r24
    4f34:	cd 01       	movw	r24, r26
    4f36:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	80 93 c2 01 	sts	0x01C2, r24
    4f42:	90 93 c3 01 	sts	0x01C3, r25
    4f46:	a0 93 c4 01 	sts	0x01C4, r26
    4f4a:	b0 93 c5 01 	sts	0x01C5, r27
		LCD_voidSend_4bitCommand (0x01);
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCD_voidSend_4bitCommand>
		LCD_void4bitGoToPos(1,1);
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	61 e0       	ldi	r22, 0x01	; 1
    4f58:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <LCD_void4bitGoToPos>
	    LCD_voidSend_4bitString ("temp : ");
    4f5c:	80 e6       	ldi	r24, 0x60	; 96
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <LCD_voidSend_4bitString>
	    LCD_void4bitDisplayNumber(temp);
    4f64:	80 91 c2 01 	lds	r24, 0x01C2
    4f68:	90 91 c3 01 	lds	r25, 0x01C3
    4f6c:	a0 91 c4 01 	lds	r26, 0x01C4
    4f70:	b0 91 c5 01 	lds	r27, 0x01C5
    4f74:	bc 01       	movw	r22, r24
    4f76:	cd 01       	movw	r24, r26
    4f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	cb 01       	movw	r24, r22
    4f80:	bc 01       	movw	r22, r24
    4f82:	cd 01       	movw	r24, r26
    4f84:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <LCD_void4bitDisplayNumber>
	    LCD_void4bitGoToPos(2,8);
    4f88:	82 e0       	ldi	r24, 0x02	; 2
    4f8a:	68 e0       	ldi	r22, 0x08	; 8
    4f8c:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <LCD_void4bitGoToPos>
	    itoa(counter,distance_str,10);
    4f90:	80 91 c6 01 	lds	r24, 0x01C6
    4f94:	90 91 c7 01 	lds	r25, 0x01C7
    4f98:	a0 91 c8 01 	lds	r26, 0x01C8
    4f9c:	b0 91 c9 01 	lds	r27, 0x01C9
    4fa0:	24 ed       	ldi	r18, 0xD4	; 212
    4fa2:	31 e0       	ldi	r19, 0x01	; 1
    4fa4:	b9 01       	movw	r22, r18
    4fa6:	4a e0       	ldi	r20, 0x0A	; 10
    4fa8:	50 e0       	ldi	r21, 0x00	; 0
    4faa:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <itoa>
	    strcat(distance_str, " car ");
    4fae:	84 ed       	ldi	r24, 0xD4	; 212
    4fb0:	91 e0       	ldi	r25, 0x01	; 1
    4fb2:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <strlen>
    4fb6:	8c 52       	subi	r24, 0x2C	; 44
    4fb8:	9e 4f       	sbci	r25, 0xFE	; 254
    4fba:	28 e6       	ldi	r18, 0x68	; 104
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	b9 01       	movw	r22, r18
    4fc0:	46 e0       	ldi	r20, 0x06	; 6
    4fc2:	50 e0       	ldi	r21, 0x00	; 0
    4fc4:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <memcpy>
	    LCD_voidSend_4bitString(distance_str);
    4fc8:	84 ed       	ldi	r24, 0xD4	; 212
    4fca:	91 e0       	ldi	r25, 0x01	; 1
    4fcc:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <LCD_voidSend_4bitString>
	    LCD_void4bitDisplayNumber(counter);
    4fd0:	80 91 c6 01 	lds	r24, 0x01C6
    4fd4:	90 91 c7 01 	lds	r25, 0x01C7
    4fd8:	a0 91 c8 01 	lds	r26, 0x01C8
    4fdc:	b0 91 c9 01 	lds	r27, 0x01C9
    4fe0:	bc 01       	movw	r22, r24
    4fe2:	cd 01       	movw	r24, r26
    4fe4:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <LCD_void4bitDisplayNumber>
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	a0 e7       	ldi	r26, 0x70	; 112
    4fee:	b1 e4       	ldi	r27, 0x41	; 65
    4ff0:	8d ab       	std	Y+53, r24	; 0x35
    4ff2:	9e ab       	std	Y+54, r25	; 0x36
    4ff4:	af ab       	std	Y+55, r26	; 0x37
    4ff6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ff8:	6d a9       	ldd	r22, Y+53	; 0x35
    4ffa:	7e a9       	ldd	r23, Y+54	; 0x36
    4ffc:	8f a9       	ldd	r24, Y+55	; 0x37
    4ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	4a ef       	ldi	r20, 0xFA	; 250
    5006:	54 e4       	ldi	r21, 0x44	; 68
    5008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    500c:	dc 01       	movw	r26, r24
    500e:	cb 01       	movw	r24, r22
    5010:	89 ab       	std	Y+49, r24	; 0x31
    5012:	9a ab       	std	Y+50, r25	; 0x32
    5014:	ab ab       	std	Y+51, r26	; 0x33
    5016:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5018:	69 a9       	ldd	r22, Y+49	; 0x31
    501a:	7a a9       	ldd	r23, Y+50	; 0x32
    501c:	8b a9       	ldd	r24, Y+51	; 0x33
    501e:	9c a9       	ldd	r25, Y+52	; 0x34
    5020:	20 e0       	ldi	r18, 0x00	; 0
    5022:	30 e0       	ldi	r19, 0x00	; 0
    5024:	40 e8       	ldi	r20, 0x80	; 128
    5026:	5f e3       	ldi	r21, 0x3F	; 63
    5028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    502c:	88 23       	and	r24, r24
    502e:	2c f4       	brge	.+10     	; 0x503a <main+0x384>
		__ticks = 1;
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	98 ab       	std	Y+48, r25	; 0x30
    5036:	8f a7       	std	Y+47, r24	; 0x2f
    5038:	3f c0       	rjmp	.+126    	; 0x50b8 <main+0x402>
	else if (__tmp > 65535)
    503a:	69 a9       	ldd	r22, Y+49	; 0x31
    503c:	7a a9       	ldd	r23, Y+50	; 0x32
    503e:	8b a9       	ldd	r24, Y+51	; 0x33
    5040:	9c a9       	ldd	r25, Y+52	; 0x34
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	3f ef       	ldi	r19, 0xFF	; 255
    5046:	4f e7       	ldi	r20, 0x7F	; 127
    5048:	57 e4       	ldi	r21, 0x47	; 71
    504a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    504e:	18 16       	cp	r1, r24
    5050:	4c f5       	brge	.+82     	; 0x50a4 <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5052:	6d a9       	ldd	r22, Y+53	; 0x35
    5054:	7e a9       	ldd	r23, Y+54	; 0x36
    5056:	8f a9       	ldd	r24, Y+55	; 0x37
    5058:	98 ad       	ldd	r25, Y+56	; 0x38
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	40 e2       	ldi	r20, 0x20	; 32
    5060:	51 e4       	ldi	r21, 0x41	; 65
    5062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	bc 01       	movw	r22, r24
    506c:	cd 01       	movw	r24, r26
    506e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5072:	dc 01       	movw	r26, r24
    5074:	cb 01       	movw	r24, r22
    5076:	98 ab       	std	Y+48, r25	; 0x30
    5078:	8f a7       	std	Y+47, r24	; 0x2f
    507a:	0f c0       	rjmp	.+30     	; 0x509a <main+0x3e4>
    507c:	88 ec       	ldi	r24, 0xC8	; 200
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	9e a7       	std	Y+46, r25	; 0x2e
    5082:	8d a7       	std	Y+45, r24	; 0x2d
    5084:	8d a5       	ldd	r24, Y+45	; 0x2d
    5086:	9e a5       	ldd	r25, Y+46	; 0x2e
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	f1 f7       	brne	.-4      	; 0x5088 <main+0x3d2>
    508c:	9e a7       	std	Y+46, r25	; 0x2e
    508e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5090:	8f a5       	ldd	r24, Y+47	; 0x2f
    5092:	98 a9       	ldd	r25, Y+48	; 0x30
    5094:	01 97       	sbiw	r24, 0x01	; 1
    5096:	98 ab       	std	Y+48, r25	; 0x30
    5098:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    509a:	8f a5       	ldd	r24, Y+47	; 0x2f
    509c:	98 a9       	ldd	r25, Y+48	; 0x30
    509e:	00 97       	sbiw	r24, 0x00	; 0
    50a0:	69 f7       	brne	.-38     	; 0x507c <main+0x3c6>
    50a2:	14 c0       	rjmp	.+40     	; 0x50cc <main+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50a4:	69 a9       	ldd	r22, Y+49	; 0x31
    50a6:	7a a9       	ldd	r23, Y+50	; 0x32
    50a8:	8b a9       	ldd	r24, Y+51	; 0x33
    50aa:	9c a9       	ldd	r25, Y+52	; 0x34
    50ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	98 ab       	std	Y+48, r25	; 0x30
    50b6:	8f a7       	std	Y+47, r24	; 0x2f
    50b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    50ba:	98 a9       	ldd	r25, Y+48	; 0x30
    50bc:	9c a7       	std	Y+44, r25	; 0x2c
    50be:	8b a7       	std	Y+43, r24	; 0x2b
    50c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    50c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	f1 f7       	brne	.-4      	; 0x50c4 <main+0x40e>
    50c8:	9c a7       	std	Y+44, r25	; 0x2c
    50ca:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(15);
	    ultra_triger();
    50cc:	0e 94 1f 2c 	call	0x583e	; 0x583e <ultra_triger>

	  if (distance < 250 && distance > 0 && temp > 85 && counter < 99)
    50d0:	80 91 d0 01 	lds	r24, 0x01D0
    50d4:	90 91 d1 01 	lds	r25, 0x01D1
    50d8:	a0 91 d2 01 	lds	r26, 0x01D2
    50dc:	b0 91 d3 01 	lds	r27, 0x01D3
    50e0:	8a 3f       	cpi	r24, 0xFA	; 250
    50e2:	91 05       	cpc	r25, r1
    50e4:	a1 05       	cpc	r26, r1
    50e6:	b1 05       	cpc	r27, r1
    50e8:	08 f0       	brcs	.+2      	; 0x50ec <main+0x436>
    50ea:	9f ce       	rjmp	.-706    	; 0x4e2a <main+0x174>
    50ec:	80 91 d0 01 	lds	r24, 0x01D0
    50f0:	90 91 d1 01 	lds	r25, 0x01D1
    50f4:	a0 91 d2 01 	lds	r26, 0x01D2
    50f8:	b0 91 d3 01 	lds	r27, 0x01D3
    50fc:	00 97       	sbiw	r24, 0x00	; 0
    50fe:	a1 05       	cpc	r26, r1
    5100:	b1 05       	cpc	r27, r1
    5102:	09 f4       	brne	.+2      	; 0x5106 <main+0x450>
    5104:	92 ce       	rjmp	.-732    	; 0x4e2a <main+0x174>
    5106:	80 91 c2 01 	lds	r24, 0x01C2
    510a:	90 91 c3 01 	lds	r25, 0x01C3
    510e:	a0 91 c4 01 	lds	r26, 0x01C4
    5112:	b0 91 c5 01 	lds	r27, 0x01C5
    5116:	bc 01       	movw	r22, r24
    5118:	cd 01       	movw	r24, r26
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	4a ea       	ldi	r20, 0xAA	; 170
    5120:	52 e4       	ldi	r21, 0x42	; 66
    5122:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5126:	18 16       	cp	r1, r24
    5128:	0c f0       	brlt	.+2      	; 0x512c <main+0x476>
    512a:	7f ce       	rjmp	.-770    	; 0x4e2a <main+0x174>
    512c:	80 91 c6 01 	lds	r24, 0x01C6
    5130:	90 91 c7 01 	lds	r25, 0x01C7
    5134:	a0 91 c8 01 	lds	r26, 0x01C8
    5138:	b0 91 c9 01 	lds	r27, 0x01C9
    513c:	83 36       	cpi	r24, 0x63	; 99
    513e:	91 05       	cpc	r25, r1
    5140:	a1 05       	cpc	r26, r1
    5142:	b1 05       	cpc	r27, r1
    5144:	08 f0       	brcs	.+2      	; 0x5148 <main+0x492>
    5146:	71 ce       	rjmp	.-798    	; 0x4e2a <main+0x174>
	  {
		  counter++;
    5148:	80 91 c6 01 	lds	r24, 0x01C6
    514c:	90 91 c7 01 	lds	r25, 0x01C7
    5150:	a0 91 c8 01 	lds	r26, 0x01C8
    5154:	b0 91 c9 01 	lds	r27, 0x01C9
    5158:	01 96       	adiw	r24, 0x01	; 1
    515a:	a1 1d       	adc	r26, r1
    515c:	b1 1d       	adc	r27, r1
    515e:	80 93 c6 01 	sts	0x01C6, r24
    5162:	90 93 c7 01 	sts	0x01C7, r25
    5166:	a0 93 c8 01 	sts	0x01C8, r26
    516a:	b0 93 c9 01 	sts	0x01C9, r27
		  LCD_void4bitGoToPos(2,8);
    516e:	82 e0       	ldi	r24, 0x02	; 2
    5170:	68 e0       	ldi	r22, 0x08	; 8
    5172:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <LCD_void4bitGoToPos>
		  itoa(counter,distance_str,10);
    5176:	80 91 c6 01 	lds	r24, 0x01C6
    517a:	90 91 c7 01 	lds	r25, 0x01C7
    517e:	a0 91 c8 01 	lds	r26, 0x01C8
    5182:	b0 91 c9 01 	lds	r27, 0x01C9
    5186:	24 ed       	ldi	r18, 0xD4	; 212
    5188:	31 e0       	ldi	r19, 0x01	; 1
    518a:	b9 01       	movw	r22, r18
    518c:	4a e0       	ldi	r20, 0x0A	; 10
    518e:	50 e0       	ldi	r21, 0x00	; 0
    5190:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <itoa>
		  strcat(distance_str, " car ");
    5194:	84 ed       	ldi	r24, 0xD4	; 212
    5196:	91 e0       	ldi	r25, 0x01	; 1
    5198:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <strlen>
    519c:	8c 52       	subi	r24, 0x2C	; 44
    519e:	9e 4f       	sbci	r25, 0xFE	; 254
    51a0:	28 e6       	ldi	r18, 0x68	; 104
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	b9 01       	movw	r22, r18
    51a6:	46 e0       	ldi	r20, 0x06	; 6
    51a8:	50 e0       	ldi	r21, 0x00	; 0
    51aa:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <memcpy>
		  LCD_voidSend_4bitString(distance_str);
    51ae:	84 ed       	ldi	r24, 0xD4	; 212
    51b0:	91 e0       	ldi	r25, 0x01	; 1
    51b2:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <LCD_voidSend_4bitString>
		  LCD_void4bitDisplayNumber(counter);
    51b6:	80 91 c6 01 	lds	r24, 0x01C6
    51ba:	90 91 c7 01 	lds	r25, 0x01C7
    51be:	a0 91 c8 01 	lds	r26, 0x01C8
    51c2:	b0 91 c9 01 	lds	r27, 0x01C9
    51c6:	bc 01       	movw	r22, r24
    51c8:	cd 01       	movw	r24, r26
    51ca:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <LCD_void4bitDisplayNumber>
		  DIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	61 e0       	ldi	r22, 0x01	; 1
    51d2:	41 e0       	ldi	r20, 0x01	; 1
    51d4:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	aa ef       	ldi	r26, 0xFA	; 250
    51de:	b3 e4       	ldi	r27, 0x43	; 67
    51e0:	8f a3       	std	Y+39, r24	; 0x27
    51e2:	98 a7       	std	Y+40, r25	; 0x28
    51e4:	a9 a7       	std	Y+41, r26	; 0x29
    51e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51e8:	6f a1       	ldd	r22, Y+39	; 0x27
    51ea:	78 a5       	ldd	r23, Y+40	; 0x28
    51ec:	89 a5       	ldd	r24, Y+41	; 0x29
    51ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    51f0:	20 e0       	ldi	r18, 0x00	; 0
    51f2:	30 e0       	ldi	r19, 0x00	; 0
    51f4:	4a ef       	ldi	r20, 0xFA	; 250
    51f6:	54 e4       	ldi	r21, 0x44	; 68
    51f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51fc:	dc 01       	movw	r26, r24
    51fe:	cb 01       	movw	r24, r22
    5200:	8b a3       	std	Y+35, r24	; 0x23
    5202:	9c a3       	std	Y+36, r25	; 0x24
    5204:	ad a3       	std	Y+37, r26	; 0x25
    5206:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5208:	6b a1       	ldd	r22, Y+35	; 0x23
    520a:	7c a1       	ldd	r23, Y+36	; 0x24
    520c:	8d a1       	ldd	r24, Y+37	; 0x25
    520e:	9e a1       	ldd	r25, Y+38	; 0x26
    5210:	20 e0       	ldi	r18, 0x00	; 0
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	40 e8       	ldi	r20, 0x80	; 128
    5216:	5f e3       	ldi	r21, 0x3F	; 63
    5218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    521c:	88 23       	and	r24, r24
    521e:	2c f4       	brge	.+10     	; 0x522a <main+0x574>
		__ticks = 1;
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	9a a3       	std	Y+34, r25	; 0x22
    5226:	89 a3       	std	Y+33, r24	; 0x21
    5228:	3f c0       	rjmp	.+126    	; 0x52a8 <main+0x5f2>
	else if (__tmp > 65535)
    522a:	6b a1       	ldd	r22, Y+35	; 0x23
    522c:	7c a1       	ldd	r23, Y+36	; 0x24
    522e:	8d a1       	ldd	r24, Y+37	; 0x25
    5230:	9e a1       	ldd	r25, Y+38	; 0x26
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	3f ef       	ldi	r19, 0xFF	; 255
    5236:	4f e7       	ldi	r20, 0x7F	; 127
    5238:	57 e4       	ldi	r21, 0x47	; 71
    523a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    523e:	18 16       	cp	r1, r24
    5240:	4c f5       	brge	.+82     	; 0x5294 <main+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5242:	6f a1       	ldd	r22, Y+39	; 0x27
    5244:	78 a5       	ldd	r23, Y+40	; 0x28
    5246:	89 a5       	ldd	r24, Y+41	; 0x29
    5248:	9a a5       	ldd	r25, Y+42	; 0x2a
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	40 e2       	ldi	r20, 0x20	; 32
    5250:	51 e4       	ldi	r21, 0x41	; 65
    5252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5256:	dc 01       	movw	r26, r24
    5258:	cb 01       	movw	r24, r22
    525a:	bc 01       	movw	r22, r24
    525c:	cd 01       	movw	r24, r26
    525e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5262:	dc 01       	movw	r26, r24
    5264:	cb 01       	movw	r24, r22
    5266:	9a a3       	std	Y+34, r25	; 0x22
    5268:	89 a3       	std	Y+33, r24	; 0x21
    526a:	0f c0       	rjmp	.+30     	; 0x528a <main+0x5d4>
    526c:	88 ec       	ldi	r24, 0xC8	; 200
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	98 a3       	std	Y+32, r25	; 0x20
    5272:	8f 8f       	std	Y+31, r24	; 0x1f
    5274:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5276:	98 a1       	ldd	r25, Y+32	; 0x20
    5278:	01 97       	sbiw	r24, 0x01	; 1
    527a:	f1 f7       	brne	.-4      	; 0x5278 <main+0x5c2>
    527c:	98 a3       	std	Y+32, r25	; 0x20
    527e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5280:	89 a1       	ldd	r24, Y+33	; 0x21
    5282:	9a a1       	ldd	r25, Y+34	; 0x22
    5284:	01 97       	sbiw	r24, 0x01	; 1
    5286:	9a a3       	std	Y+34, r25	; 0x22
    5288:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    528a:	89 a1       	ldd	r24, Y+33	; 0x21
    528c:	9a a1       	ldd	r25, Y+34	; 0x22
    528e:	00 97       	sbiw	r24, 0x00	; 0
    5290:	69 f7       	brne	.-38     	; 0x526c <main+0x5b6>
    5292:	14 c0       	rjmp	.+40     	; 0x52bc <main+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5294:	6b a1       	ldd	r22, Y+35	; 0x23
    5296:	7c a1       	ldd	r23, Y+36	; 0x24
    5298:	8d a1       	ldd	r24, Y+37	; 0x25
    529a:	9e a1       	ldd	r25, Y+38	; 0x26
    529c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a0:	dc 01       	movw	r26, r24
    52a2:	cb 01       	movw	r24, r22
    52a4:	9a a3       	std	Y+34, r25	; 0x22
    52a6:	89 a3       	std	Y+33, r24	; 0x21
    52a8:	89 a1       	ldd	r24, Y+33	; 0x21
    52aa:	9a a1       	ldd	r25, Y+34	; 0x22
    52ac:	9e 8f       	std	Y+30, r25	; 0x1e
    52ae:	8d 8f       	std	Y+29, r24	; 0x1d
    52b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	f1 f7       	brne	.-4      	; 0x52b4 <main+0x5fe>
    52b8:	9e 8f       	std	Y+30, r25	; 0x1e
    52ba:	8d 8f       	std	Y+29, r24	; 0x1d
		  _delay_ms(500);
		  DIO_voidSetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    52bc:	81 e0       	ldi	r24, 0x01	; 1
    52be:	61 e0       	ldi	r22, 0x01	; 1
    52c0:	40 e0       	ldi	r20, 0x00	; 0
    52c2:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	90 e8       	ldi	r25, 0x80	; 128
    52ca:	ab eb       	ldi	r26, 0xBB	; 187
    52cc:	b4 e4       	ldi	r27, 0x44	; 68
    52ce:	89 8f       	std	Y+25, r24	; 0x19
    52d0:	9a 8f       	std	Y+26, r25	; 0x1a
    52d2:	ab 8f       	std	Y+27, r26	; 0x1b
    52d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d6:	69 8d       	ldd	r22, Y+25	; 0x19
    52d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	4a ef       	ldi	r20, 0xFA	; 250
    52e4:	54 e4       	ldi	r21, 0x44	; 68
    52e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ea:	dc 01       	movw	r26, r24
    52ec:	cb 01       	movw	r24, r22
    52ee:	8d 8b       	std	Y+21, r24	; 0x15
    52f0:	9e 8b       	std	Y+22, r25	; 0x16
    52f2:	af 8b       	std	Y+23, r26	; 0x17
    52f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52f6:	6d 89       	ldd	r22, Y+21	; 0x15
    52f8:	7e 89       	ldd	r23, Y+22	; 0x16
    52fa:	8f 89       	ldd	r24, Y+23	; 0x17
    52fc:	98 8d       	ldd	r25, Y+24	; 0x18
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e8       	ldi	r20, 0x80	; 128
    5304:	5f e3       	ldi	r21, 0x3F	; 63
    5306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    530a:	88 23       	and	r24, r24
    530c:	2c f4       	brge	.+10     	; 0x5318 <main+0x662>
		__ticks = 1;
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	9c 8b       	std	Y+20, r25	; 0x14
    5314:	8b 8b       	std	Y+19, r24	; 0x13
    5316:	3f c0       	rjmp	.+126    	; 0x5396 <main+0x6e0>
	else if (__tmp > 65535)
    5318:	6d 89       	ldd	r22, Y+21	; 0x15
    531a:	7e 89       	ldd	r23, Y+22	; 0x16
    531c:	8f 89       	ldd	r24, Y+23	; 0x17
    531e:	98 8d       	ldd	r25, Y+24	; 0x18
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	3f ef       	ldi	r19, 0xFF	; 255
    5324:	4f e7       	ldi	r20, 0x7F	; 127
    5326:	57 e4       	ldi	r21, 0x47	; 71
    5328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    532c:	18 16       	cp	r1, r24
    532e:	4c f5       	brge	.+82     	; 0x5382 <main+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5330:	69 8d       	ldd	r22, Y+25	; 0x19
    5332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	40 e2       	ldi	r20, 0x20	; 32
    533e:	51 e4       	ldi	r21, 0x41	; 65
    5340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5344:	dc 01       	movw	r26, r24
    5346:	cb 01       	movw	r24, r22
    5348:	bc 01       	movw	r22, r24
    534a:	cd 01       	movw	r24, r26
    534c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	9c 8b       	std	Y+20, r25	; 0x14
    5356:	8b 8b       	std	Y+19, r24	; 0x13
    5358:	0f c0       	rjmp	.+30     	; 0x5378 <main+0x6c2>
    535a:	88 ec       	ldi	r24, 0xC8	; 200
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	9a 8b       	std	Y+18, r25	; 0x12
    5360:	89 8b       	std	Y+17, r24	; 0x11
    5362:	89 89       	ldd	r24, Y+17	; 0x11
    5364:	9a 89       	ldd	r25, Y+18	; 0x12
    5366:	01 97       	sbiw	r24, 0x01	; 1
    5368:	f1 f7       	brne	.-4      	; 0x5366 <main+0x6b0>
    536a:	9a 8b       	std	Y+18, r25	; 0x12
    536c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    536e:	8b 89       	ldd	r24, Y+19	; 0x13
    5370:	9c 89       	ldd	r25, Y+20	; 0x14
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	9c 8b       	std	Y+20, r25	; 0x14
    5376:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5378:	8b 89       	ldd	r24, Y+19	; 0x13
    537a:	9c 89       	ldd	r25, Y+20	; 0x14
    537c:	00 97       	sbiw	r24, 0x00	; 0
    537e:	69 f7       	brne	.-38     	; 0x535a <main+0x6a4>
    5380:	14 c0       	rjmp	.+40     	; 0x53aa <main+0x6f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5382:	6d 89       	ldd	r22, Y+21	; 0x15
    5384:	7e 89       	ldd	r23, Y+22	; 0x16
    5386:	8f 89       	ldd	r24, Y+23	; 0x17
    5388:	98 8d       	ldd	r25, Y+24	; 0x18
    538a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    538e:	dc 01       	movw	r26, r24
    5390:	cb 01       	movw	r24, r22
    5392:	9c 8b       	std	Y+20, r25	; 0x14
    5394:	8b 8b       	std	Y+19, r24	; 0x13
    5396:	8b 89       	ldd	r24, Y+19	; 0x13
    5398:	9c 89       	ldd	r25, Y+20	; 0x14
    539a:	98 8b       	std	Y+16, r25	; 0x10
    539c:	8f 87       	std	Y+15, r24	; 0x0f
    539e:	8f 85       	ldd	r24, Y+15	; 0x0f
    53a0:	98 89       	ldd	r25, Y+16	; 0x10
    53a2:	01 97       	sbiw	r24, 0x01	; 1
    53a4:	f1 f7       	brne	.-4      	; 0x53a2 <main+0x6ec>
    53a6:	98 8b       	std	Y+16, r25	; 0x10
    53a8:	8f 87       	std	Y+15, r24	; 0x0f
		  _delay_ms(1500);
		  DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	60 e0       	ldi	r22, 0x00	; 0
    53ae:	41 e0       	ldi	r20, 0x01	; 1
    53b0:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	aa ef       	ldi	r26, 0xFA	; 250
    53ba:	b3 e4       	ldi	r27, 0x43	; 67
    53bc:	8b 87       	std	Y+11, r24	; 0x0b
    53be:	9c 87       	std	Y+12, r25	; 0x0c
    53c0:	ad 87       	std	Y+13, r26	; 0x0d
    53c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    53c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    53c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    53cc:	20 e0       	ldi	r18, 0x00	; 0
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	4a ef       	ldi	r20, 0xFA	; 250
    53d2:	54 e4       	ldi	r21, 0x44	; 68
    53d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d8:	dc 01       	movw	r26, r24
    53da:	cb 01       	movw	r24, r22
    53dc:	8f 83       	std	Y+7, r24	; 0x07
    53de:	98 87       	std	Y+8, r25	; 0x08
    53e0:	a9 87       	std	Y+9, r26	; 0x09
    53e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53e4:	6f 81       	ldd	r22, Y+7	; 0x07
    53e6:	78 85       	ldd	r23, Y+8	; 0x08
    53e8:	89 85       	ldd	r24, Y+9	; 0x09
    53ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ec:	20 e0       	ldi	r18, 0x00	; 0
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	40 e8       	ldi	r20, 0x80	; 128
    53f2:	5f e3       	ldi	r21, 0x3F	; 63
    53f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53f8:	88 23       	and	r24, r24
    53fa:	2c f4       	brge	.+10     	; 0x5406 <main+0x750>
		__ticks = 1;
    53fc:	81 e0       	ldi	r24, 0x01	; 1
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	9e 83       	std	Y+6, r25	; 0x06
    5402:	8d 83       	std	Y+5, r24	; 0x05
    5404:	3f c0       	rjmp	.+126    	; 0x5484 <main+0x7ce>
	else if (__tmp > 65535)
    5406:	6f 81       	ldd	r22, Y+7	; 0x07
    5408:	78 85       	ldd	r23, Y+8	; 0x08
    540a:	89 85       	ldd	r24, Y+9	; 0x09
    540c:	9a 85       	ldd	r25, Y+10	; 0x0a
    540e:	20 e0       	ldi	r18, 0x00	; 0
    5410:	3f ef       	ldi	r19, 0xFF	; 255
    5412:	4f e7       	ldi	r20, 0x7F	; 127
    5414:	57 e4       	ldi	r21, 0x47	; 71
    5416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    541a:	18 16       	cp	r1, r24
    541c:	4c f5       	brge	.+82     	; 0x5470 <main+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    541e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5420:	7c 85       	ldd	r23, Y+12	; 0x0c
    5422:	8d 85       	ldd	r24, Y+13	; 0x0d
    5424:	9e 85       	ldd	r25, Y+14	; 0x0e
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	40 e2       	ldi	r20, 0x20	; 32
    542c:	51 e4       	ldi	r21, 0x41	; 65
    542e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	bc 01       	movw	r22, r24
    5438:	cd 01       	movw	r24, r26
    543a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    543e:	dc 01       	movw	r26, r24
    5440:	cb 01       	movw	r24, r22
    5442:	9e 83       	std	Y+6, r25	; 0x06
    5444:	8d 83       	std	Y+5, r24	; 0x05
    5446:	0f c0       	rjmp	.+30     	; 0x5466 <main+0x7b0>
    5448:	88 ec       	ldi	r24, 0xC8	; 200
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	9c 83       	std	Y+4, r25	; 0x04
    544e:	8b 83       	std	Y+3, r24	; 0x03
    5450:	8b 81       	ldd	r24, Y+3	; 0x03
    5452:	9c 81       	ldd	r25, Y+4	; 0x04
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	f1 f7       	brne	.-4      	; 0x5454 <main+0x79e>
    5458:	9c 83       	std	Y+4, r25	; 0x04
    545a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    545c:	8d 81       	ldd	r24, Y+5	; 0x05
    545e:	9e 81       	ldd	r25, Y+6	; 0x06
    5460:	01 97       	sbiw	r24, 0x01	; 1
    5462:	9e 83       	std	Y+6, r25	; 0x06
    5464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5466:	8d 81       	ldd	r24, Y+5	; 0x05
    5468:	9e 81       	ldd	r25, Y+6	; 0x06
    546a:	00 97       	sbiw	r24, 0x00	; 0
    546c:	69 f7       	brne	.-38     	; 0x5448 <main+0x792>
    546e:	14 c0       	rjmp	.+40     	; 0x5498 <main+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5470:	6f 81       	ldd	r22, Y+7	; 0x07
    5472:	78 85       	ldd	r23, Y+8	; 0x08
    5474:	89 85       	ldd	r24, Y+9	; 0x09
    5476:	9a 85       	ldd	r25, Y+10	; 0x0a
    5478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    547c:	dc 01       	movw	r26, r24
    547e:	cb 01       	movw	r24, r22
    5480:	9e 83       	std	Y+6, r25	; 0x06
    5482:	8d 83       	std	Y+5, r24	; 0x05
    5484:	8d 81       	ldd	r24, Y+5	; 0x05
    5486:	9e 81       	ldd	r25, Y+6	; 0x06
    5488:	9a 83       	std	Y+2, r25	; 0x02
    548a:	89 83       	std	Y+1, r24	; 0x01
    548c:	89 81       	ldd	r24, Y+1	; 0x01
    548e:	9a 81       	ldd	r25, Y+2	; 0x02
    5490:	01 97       	sbiw	r24, 0x01	; 1
    5492:	f1 f7       	brne	.-4      	; 0x5490 <main+0x7da>
    5494:	9a 83       	std	Y+2, r25	; 0x02
    5496:	89 83       	std	Y+1, r24	; 0x01
		  _delay_ms(500);
		  DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	60 e0       	ldi	r22, 0x00	; 0
    549c:	40 e0       	ldi	r20, 0x00	; 0
    549e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    54a2:	c3 cc       	rjmp	.-1658   	; 0x4e2a <main+0x174>

000054a4 <ultrasonic_init>:
}

}


void ultrasonic_init(void){
    54a4:	df 93       	push	r29
    54a6:	cf 93       	push	r28
    54a8:	cd b7       	in	r28, 0x3d	; 61
    54aa:	de b7       	in	r29, 0x3e	; 62

  TRIGER_DDR|=(1<<TRIGER);
    54ac:	a1 e3       	ldi	r26, 0x31	; 49
    54ae:	b0 e0       	ldi	r27, 0x00	; 0
    54b0:	e1 e3       	ldi	r30, 0x31	; 49
    54b2:	f0 e0       	ldi	r31, 0x00	; 0
    54b4:	80 81       	ld	r24, Z
    54b6:	81 60       	ori	r24, 0x01	; 1
    54b8:	8c 93       	st	X, r24
  ECHO_DDR&=~(1<<ECHO);
    54ba:	a1 e3       	ldi	r26, 0x31	; 49
    54bc:	b0 e0       	ldi	r27, 0x00	; 0
    54be:	e1 e3       	ldi	r30, 0x31	; 49
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	80 81       	ld	r24, Z
    54c4:	87 7f       	andi	r24, 0xF7	; 247
    54c6:	8c 93       	st	X, r24
  ECHO_PULLUP|=(1<<ECHO);
    54c8:	a2 e3       	ldi	r26, 0x32	; 50
    54ca:	b0 e0       	ldi	r27, 0x00	; 0
    54cc:	e2 e3       	ldi	r30, 0x32	; 50
    54ce:	f0 e0       	ldi	r31, 0x00	; 0
    54d0:	80 81       	ld	r24, Z
    54d2:	88 60       	ori	r24, 0x08	; 8
    54d4:	8c 93       	st	X, r24
  enable_ex_interrupt();
    54d6:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <enable_ex_interrupt>
  timer0_init();
    54da:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <timer0_init>
  return;
}
    54de:	cf 91       	pop	r28
    54e0:	df 91       	pop	r29
    54e2:	08 95       	ret

000054e4 <handler>:

void handler(void)
{
    54e4:	df 93       	push	r29
    54e6:	cf 93       	push	r28
    54e8:	cd b7       	in	r28, 0x3d	; 61
    54ea:	de b7       	in	r29, 0x3e	; 62
    54ec:	aa 97       	sbiw	r28, 0x2a	; 42
    54ee:	0f b6       	in	r0, 0x3f	; 63
    54f0:	f8 94       	cli
    54f2:	de bf       	out	0x3e, r29	; 62
    54f4:	0f be       	out	0x3f, r0	; 63
    54f6:	cd bf       	out	0x3d, r28	; 61
 if (counter >0)
    54f8:	80 91 c6 01 	lds	r24, 0x01C6
    54fc:	90 91 c7 01 	lds	r25, 0x01C7
    5500:	a0 91 c8 01 	lds	r26, 0x01C8
    5504:	b0 91 c9 01 	lds	r27, 0x01C9
    5508:	00 97       	sbiw	r24, 0x00	; 0
    550a:	a1 05       	cpc	r26, r1
    550c:	b1 05       	cpc	r27, r1
    550e:	09 f4       	brne	.+2      	; 0x5512 <handler+0x2e>
    5510:	8d c1       	rjmp	.+794    	; 0x582c <handler+0x348>
 {
	 LCD_void4bitGoToPos(2,8);
    5512:	82 e0       	ldi	r24, 0x02	; 2
    5514:	68 e0       	ldi	r22, 0x08	; 8
    5516:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <LCD_void4bitGoToPos>
	 counter--;
    551a:	80 91 c6 01 	lds	r24, 0x01C6
    551e:	90 91 c7 01 	lds	r25, 0x01C7
    5522:	a0 91 c8 01 	lds	r26, 0x01C8
    5526:	b0 91 c9 01 	lds	r27, 0x01C9
    552a:	01 97       	sbiw	r24, 0x01	; 1
    552c:	a1 09       	sbc	r26, r1
    552e:	b1 09       	sbc	r27, r1
    5530:	80 93 c6 01 	sts	0x01C6, r24
    5534:	90 93 c7 01 	sts	0x01C7, r25
    5538:	a0 93 c8 01 	sts	0x01C8, r26
    553c:	b0 93 c9 01 	sts	0x01C9, r27
     LCD_void4bitDisplayNumber(counter);
    5540:	80 91 c6 01 	lds	r24, 0x01C6
    5544:	90 91 c7 01 	lds	r25, 0x01C7
    5548:	a0 91 c8 01 	lds	r26, 0x01C8
    554c:	b0 91 c9 01 	lds	r27, 0x01C9
    5550:	bc 01       	movw	r22, r24
    5552:	cd 01       	movw	r24, r26
    5554:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <LCD_void4bitDisplayNumber>
	 DIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_HIGH);
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	62 e0       	ldi	r22, 0x02	; 2
    555c:	41 e0       	ldi	r20, 0x01	; 1
    555e:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	aa ef       	ldi	r26, 0xFA	; 250
    5568:	b3 e4       	ldi	r27, 0x43	; 67
    556a:	8f a3       	std	Y+39, r24	; 0x27
    556c:	98 a7       	std	Y+40, r25	; 0x28
    556e:	a9 a7       	std	Y+41, r26	; 0x29
    5570:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5572:	6f a1       	ldd	r22, Y+39	; 0x27
    5574:	78 a5       	ldd	r23, Y+40	; 0x28
    5576:	89 a5       	ldd	r24, Y+41	; 0x29
    5578:	9a a5       	ldd	r25, Y+42	; 0x2a
    557a:	20 e0       	ldi	r18, 0x00	; 0
    557c:	30 e0       	ldi	r19, 0x00	; 0
    557e:	4a ef       	ldi	r20, 0xFA	; 250
    5580:	54 e4       	ldi	r21, 0x44	; 68
    5582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5586:	dc 01       	movw	r26, r24
    5588:	cb 01       	movw	r24, r22
    558a:	8b a3       	std	Y+35, r24	; 0x23
    558c:	9c a3       	std	Y+36, r25	; 0x24
    558e:	ad a3       	std	Y+37, r26	; 0x25
    5590:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5592:	6b a1       	ldd	r22, Y+35	; 0x23
    5594:	7c a1       	ldd	r23, Y+36	; 0x24
    5596:	8d a1       	ldd	r24, Y+37	; 0x25
    5598:	9e a1       	ldd	r25, Y+38	; 0x26
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	40 e8       	ldi	r20, 0x80	; 128
    55a0:	5f e3       	ldi	r21, 0x3F	; 63
    55a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55a6:	88 23       	and	r24, r24
    55a8:	2c f4       	brge	.+10     	; 0x55b4 <handler+0xd0>
		__ticks = 1;
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	90 e0       	ldi	r25, 0x00	; 0
    55ae:	9a a3       	std	Y+34, r25	; 0x22
    55b0:	89 a3       	std	Y+33, r24	; 0x21
    55b2:	3f c0       	rjmp	.+126    	; 0x5632 <handler+0x14e>
	else if (__tmp > 65535)
    55b4:	6b a1       	ldd	r22, Y+35	; 0x23
    55b6:	7c a1       	ldd	r23, Y+36	; 0x24
    55b8:	8d a1       	ldd	r24, Y+37	; 0x25
    55ba:	9e a1       	ldd	r25, Y+38	; 0x26
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	3f ef       	ldi	r19, 0xFF	; 255
    55c0:	4f e7       	ldi	r20, 0x7F	; 127
    55c2:	57 e4       	ldi	r21, 0x47	; 71
    55c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55c8:	18 16       	cp	r1, r24
    55ca:	4c f5       	brge	.+82     	; 0x561e <handler+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55cc:	6f a1       	ldd	r22, Y+39	; 0x27
    55ce:	78 a5       	ldd	r23, Y+40	; 0x28
    55d0:	89 a5       	ldd	r24, Y+41	; 0x29
    55d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    55d4:	20 e0       	ldi	r18, 0x00	; 0
    55d6:	30 e0       	ldi	r19, 0x00	; 0
    55d8:	40 e2       	ldi	r20, 0x20	; 32
    55da:	51 e4       	ldi	r21, 0x41	; 65
    55dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	bc 01       	movw	r22, r24
    55e6:	cd 01       	movw	r24, r26
    55e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ec:	dc 01       	movw	r26, r24
    55ee:	cb 01       	movw	r24, r22
    55f0:	9a a3       	std	Y+34, r25	; 0x22
    55f2:	89 a3       	std	Y+33, r24	; 0x21
    55f4:	0f c0       	rjmp	.+30     	; 0x5614 <handler+0x130>
    55f6:	88 ec       	ldi	r24, 0xC8	; 200
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	98 a3       	std	Y+32, r25	; 0x20
    55fc:	8f 8f       	std	Y+31, r24	; 0x1f
    55fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5600:	98 a1       	ldd	r25, Y+32	; 0x20
    5602:	01 97       	sbiw	r24, 0x01	; 1
    5604:	f1 f7       	brne	.-4      	; 0x5602 <handler+0x11e>
    5606:	98 a3       	std	Y+32, r25	; 0x20
    5608:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    560a:	89 a1       	ldd	r24, Y+33	; 0x21
    560c:	9a a1       	ldd	r25, Y+34	; 0x22
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	9a a3       	std	Y+34, r25	; 0x22
    5612:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5614:	89 a1       	ldd	r24, Y+33	; 0x21
    5616:	9a a1       	ldd	r25, Y+34	; 0x22
    5618:	00 97       	sbiw	r24, 0x00	; 0
    561a:	69 f7       	brne	.-38     	; 0x55f6 <handler+0x112>
    561c:	14 c0       	rjmp	.+40     	; 0x5646 <handler+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    561e:	6b a1       	ldd	r22, Y+35	; 0x23
    5620:	7c a1       	ldd	r23, Y+36	; 0x24
    5622:	8d a1       	ldd	r24, Y+37	; 0x25
    5624:	9e a1       	ldd	r25, Y+38	; 0x26
    5626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562a:	dc 01       	movw	r26, r24
    562c:	cb 01       	movw	r24, r22
    562e:	9a a3       	std	Y+34, r25	; 0x22
    5630:	89 a3       	std	Y+33, r24	; 0x21
    5632:	89 a1       	ldd	r24, Y+33	; 0x21
    5634:	9a a1       	ldd	r25, Y+34	; 0x22
    5636:	9e 8f       	std	Y+30, r25	; 0x1e
    5638:	8d 8f       	std	Y+29, r24	; 0x1d
    563a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    563c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    563e:	01 97       	sbiw	r24, 0x01	; 1
    5640:	f1 f7       	brne	.-4      	; 0x563e <handler+0x15a>
    5642:	9e 8f       	std	Y+30, r25	; 0x1e
    5644:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(500);
	 DIO_voidSetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	62 e0       	ldi	r22, 0x02	; 2
    564a:	40 e0       	ldi	r20, 0x00	; 0
    564c:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	90 e8       	ldi	r25, 0x80	; 128
    5654:	ab eb       	ldi	r26, 0xBB	; 187
    5656:	b4 e4       	ldi	r27, 0x44	; 68
    5658:	89 8f       	std	Y+25, r24	; 0x19
    565a:	9a 8f       	std	Y+26, r25	; 0x1a
    565c:	ab 8f       	std	Y+27, r26	; 0x1b
    565e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5660:	69 8d       	ldd	r22, Y+25	; 0x19
    5662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	4a ef       	ldi	r20, 0xFA	; 250
    566e:	54 e4       	ldi	r21, 0x44	; 68
    5670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	8d 8b       	std	Y+21, r24	; 0x15
    567a:	9e 8b       	std	Y+22, r25	; 0x16
    567c:	af 8b       	std	Y+23, r26	; 0x17
    567e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5680:	6d 89       	ldd	r22, Y+21	; 0x15
    5682:	7e 89       	ldd	r23, Y+22	; 0x16
    5684:	8f 89       	ldd	r24, Y+23	; 0x17
    5686:	98 8d       	ldd	r25, Y+24	; 0x18
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	40 e8       	ldi	r20, 0x80	; 128
    568e:	5f e3       	ldi	r21, 0x3F	; 63
    5690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5694:	88 23       	and	r24, r24
    5696:	2c f4       	brge	.+10     	; 0x56a2 <handler+0x1be>
		__ticks = 1;
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	9c 8b       	std	Y+20, r25	; 0x14
    569e:	8b 8b       	std	Y+19, r24	; 0x13
    56a0:	3f c0       	rjmp	.+126    	; 0x5720 <handler+0x23c>
	else if (__tmp > 65535)
    56a2:	6d 89       	ldd	r22, Y+21	; 0x15
    56a4:	7e 89       	ldd	r23, Y+22	; 0x16
    56a6:	8f 89       	ldd	r24, Y+23	; 0x17
    56a8:	98 8d       	ldd	r25, Y+24	; 0x18
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	3f ef       	ldi	r19, 0xFF	; 255
    56ae:	4f e7       	ldi	r20, 0x7F	; 127
    56b0:	57 e4       	ldi	r21, 0x47	; 71
    56b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56b6:	18 16       	cp	r1, r24
    56b8:	4c f5       	brge	.+82     	; 0x570c <handler+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ba:	69 8d       	ldd	r22, Y+25	; 0x19
    56bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e2       	ldi	r20, 0x20	; 32
    56c8:	51 e4       	ldi	r21, 0x41	; 65
    56ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	bc 01       	movw	r22, r24
    56d4:	cd 01       	movw	r24, r26
    56d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56da:	dc 01       	movw	r26, r24
    56dc:	cb 01       	movw	r24, r22
    56de:	9c 8b       	std	Y+20, r25	; 0x14
    56e0:	8b 8b       	std	Y+19, r24	; 0x13
    56e2:	0f c0       	rjmp	.+30     	; 0x5702 <handler+0x21e>
    56e4:	88 ec       	ldi	r24, 0xC8	; 200
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	9a 8b       	std	Y+18, r25	; 0x12
    56ea:	89 8b       	std	Y+17, r24	; 0x11
    56ec:	89 89       	ldd	r24, Y+17	; 0x11
    56ee:	9a 89       	ldd	r25, Y+18	; 0x12
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    56f2:	f1 f7       	brne	.-4      	; 0x56f0 <handler+0x20c>
    56f4:	9a 8b       	std	Y+18, r25	; 0x12
    56f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f8:	8b 89       	ldd	r24, Y+19	; 0x13
    56fa:	9c 89       	ldd	r25, Y+20	; 0x14
    56fc:	01 97       	sbiw	r24, 0x01	; 1
    56fe:	9c 8b       	std	Y+20, r25	; 0x14
    5700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5702:	8b 89       	ldd	r24, Y+19	; 0x13
    5704:	9c 89       	ldd	r25, Y+20	; 0x14
    5706:	00 97       	sbiw	r24, 0x00	; 0
    5708:	69 f7       	brne	.-38     	; 0x56e4 <handler+0x200>
    570a:	14 c0       	rjmp	.+40     	; 0x5734 <handler+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    570c:	6d 89       	ldd	r22, Y+21	; 0x15
    570e:	7e 89       	ldd	r23, Y+22	; 0x16
    5710:	8f 89       	ldd	r24, Y+23	; 0x17
    5712:	98 8d       	ldd	r25, Y+24	; 0x18
    5714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5718:	dc 01       	movw	r26, r24
    571a:	cb 01       	movw	r24, r22
    571c:	9c 8b       	std	Y+20, r25	; 0x14
    571e:	8b 8b       	std	Y+19, r24	; 0x13
    5720:	8b 89       	ldd	r24, Y+19	; 0x13
    5722:	9c 89       	ldd	r25, Y+20	; 0x14
    5724:	98 8b       	std	Y+16, r25	; 0x10
    5726:	8f 87       	std	Y+15, r24	; 0x0f
    5728:	8f 85       	ldd	r24, Y+15	; 0x0f
    572a:	98 89       	ldd	r25, Y+16	; 0x10
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	f1 f7       	brne	.-4      	; 0x572c <handler+0x248>
    5730:	98 8b       	std	Y+16, r25	; 0x10
    5732:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1500);
	 DIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_HIGH);
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	63 e0       	ldi	r22, 0x03	; 3
    5738:	41 e0       	ldi	r20, 0x01	; 1
    573a:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	aa ef       	ldi	r26, 0xFA	; 250
    5744:	b3 e4       	ldi	r27, 0x43	; 67
    5746:	8b 87       	std	Y+11, r24	; 0x0b
    5748:	9c 87       	std	Y+12, r25	; 0x0c
    574a:	ad 87       	std	Y+13, r26	; 0x0d
    574c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    574e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5750:	7c 85       	ldd	r23, Y+12	; 0x0c
    5752:	8d 85       	ldd	r24, Y+13	; 0x0d
    5754:	9e 85       	ldd	r25, Y+14	; 0x0e
    5756:	20 e0       	ldi	r18, 0x00	; 0
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	4a ef       	ldi	r20, 0xFA	; 250
    575c:	54 e4       	ldi	r21, 0x44	; 68
    575e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5762:	dc 01       	movw	r26, r24
    5764:	cb 01       	movw	r24, r22
    5766:	8f 83       	std	Y+7, r24	; 0x07
    5768:	98 87       	std	Y+8, r25	; 0x08
    576a:	a9 87       	std	Y+9, r26	; 0x09
    576c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    576e:	6f 81       	ldd	r22, Y+7	; 0x07
    5770:	78 85       	ldd	r23, Y+8	; 0x08
    5772:	89 85       	ldd	r24, Y+9	; 0x09
    5774:	9a 85       	ldd	r25, Y+10	; 0x0a
    5776:	20 e0       	ldi	r18, 0x00	; 0
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	40 e8       	ldi	r20, 0x80	; 128
    577c:	5f e3       	ldi	r21, 0x3F	; 63
    577e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5782:	88 23       	and	r24, r24
    5784:	2c f4       	brge	.+10     	; 0x5790 <handler+0x2ac>
		__ticks = 1;
    5786:	81 e0       	ldi	r24, 0x01	; 1
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	9e 83       	std	Y+6, r25	; 0x06
    578c:	8d 83       	std	Y+5, r24	; 0x05
    578e:	3f c0       	rjmp	.+126    	; 0x580e <handler+0x32a>
	else if (__tmp > 65535)
    5790:	6f 81       	ldd	r22, Y+7	; 0x07
    5792:	78 85       	ldd	r23, Y+8	; 0x08
    5794:	89 85       	ldd	r24, Y+9	; 0x09
    5796:	9a 85       	ldd	r25, Y+10	; 0x0a
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	3f ef       	ldi	r19, 0xFF	; 255
    579c:	4f e7       	ldi	r20, 0x7F	; 127
    579e:	57 e4       	ldi	r21, 0x47	; 71
    57a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57a4:	18 16       	cp	r1, r24
    57a6:	4c f5       	brge	.+82     	; 0x57fa <handler+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    57aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    57ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    57ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    57b0:	20 e0       	ldi	r18, 0x00	; 0
    57b2:	30 e0       	ldi	r19, 0x00	; 0
    57b4:	40 e2       	ldi	r20, 0x20	; 32
    57b6:	51 e4       	ldi	r21, 0x41	; 65
    57b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57bc:	dc 01       	movw	r26, r24
    57be:	cb 01       	movw	r24, r22
    57c0:	bc 01       	movw	r22, r24
    57c2:	cd 01       	movw	r24, r26
    57c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c8:	dc 01       	movw	r26, r24
    57ca:	cb 01       	movw	r24, r22
    57cc:	9e 83       	std	Y+6, r25	; 0x06
    57ce:	8d 83       	std	Y+5, r24	; 0x05
    57d0:	0f c0       	rjmp	.+30     	; 0x57f0 <handler+0x30c>
    57d2:	88 ec       	ldi	r24, 0xC8	; 200
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	9c 83       	std	Y+4, r25	; 0x04
    57d8:	8b 83       	std	Y+3, r24	; 0x03
    57da:	8b 81       	ldd	r24, Y+3	; 0x03
    57dc:	9c 81       	ldd	r25, Y+4	; 0x04
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	f1 f7       	brne	.-4      	; 0x57de <handler+0x2fa>
    57e2:	9c 83       	std	Y+4, r25	; 0x04
    57e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57e6:	8d 81       	ldd	r24, Y+5	; 0x05
    57e8:	9e 81       	ldd	r25, Y+6	; 0x06
    57ea:	01 97       	sbiw	r24, 0x01	; 1
    57ec:	9e 83       	std	Y+6, r25	; 0x06
    57ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57f0:	8d 81       	ldd	r24, Y+5	; 0x05
    57f2:	9e 81       	ldd	r25, Y+6	; 0x06
    57f4:	00 97       	sbiw	r24, 0x00	; 0
    57f6:	69 f7       	brne	.-38     	; 0x57d2 <handler+0x2ee>
    57f8:	14 c0       	rjmp	.+40     	; 0x5822 <handler+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57fa:	6f 81       	ldd	r22, Y+7	; 0x07
    57fc:	78 85       	ldd	r23, Y+8	; 0x08
    57fe:	89 85       	ldd	r24, Y+9	; 0x09
    5800:	9a 85       	ldd	r25, Y+10	; 0x0a
    5802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5806:	dc 01       	movw	r26, r24
    5808:	cb 01       	movw	r24, r22
    580a:	9e 83       	std	Y+6, r25	; 0x06
    580c:	8d 83       	std	Y+5, r24	; 0x05
    580e:	8d 81       	ldd	r24, Y+5	; 0x05
    5810:	9e 81       	ldd	r25, Y+6	; 0x06
    5812:	9a 83       	std	Y+2, r25	; 0x02
    5814:	89 83       	std	Y+1, r24	; 0x01
    5816:	89 81       	ldd	r24, Y+1	; 0x01
    5818:	9a 81       	ldd	r25, Y+2	; 0x02
    581a:	01 97       	sbiw	r24, 0x01	; 1
    581c:	f1 f7       	brne	.-4      	; 0x581a <handler+0x336>
    581e:	9a 83       	std	Y+2, r25	; 0x02
    5820:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(500);
	 DIO_voidSetPinValue(DIO_PORTB,DIO_PIN3,DIO_LOW);
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	63 e0       	ldi	r22, 0x03	; 3
    5826:	40 e0       	ldi	r20, 0x00	; 0
    5828:	0e 94 b5 0a 	call	0x156a	; 0x156a <DIO_voidSetPinValue>
 }
}
    582c:	aa 96       	adiw	r28, 0x2a	; 42
    582e:	0f b6       	in	r0, 0x3f	; 63
    5830:	f8 94       	cli
    5832:	de bf       	out	0x3e, r29	; 62
    5834:	0f be       	out	0x3f, r0	; 63
    5836:	cd bf       	out	0x3d, r28	; 61
    5838:	cf 91       	pop	r28
    583a:	df 91       	pop	r29
    583c:	08 95       	ret

0000583e <ultra_triger>:


void ultra_triger(void){
    583e:	df 93       	push	r29
    5840:	cf 93       	push	r28
    5842:	cd b7       	in	r28, 0x3d	; 61
    5844:	de b7       	in	r29, 0x3e	; 62
    5846:	68 97       	sbiw	r28, 0x18	; 24
    5848:	0f b6       	in	r0, 0x3f	; 63
    584a:	f8 94       	cli
    584c:	de bf       	out	0x3e, r29	; 62
    584e:	0f be       	out	0x3f, r0	; 63
    5850:	cd bf       	out	0x3d, r28	; 61
  if(!sensor_working){
    5852:	80 91 ca 01 	lds	r24, 0x01CA
    5856:	88 23       	and	r24, r24
    5858:	09 f0       	breq	.+2      	; 0x585c <ultra_triger+0x1e>
    585a:	cf c0       	rjmp	.+414    	; 0x59fa <ultra_triger+0x1bc>
    TRIGER_PORT|=(1<<TRIGER);
    585c:	a2 e3       	ldi	r26, 0x32	; 50
    585e:	b0 e0       	ldi	r27, 0x00	; 0
    5860:	e2 e3       	ldi	r30, 0x32	; 50
    5862:	f0 e0       	ldi	r31, 0x00	; 0
    5864:	80 81       	ld	r24, Z
    5866:	81 60       	ori	r24, 0x01	; 1
    5868:	8c 93       	st	X, r24
    586a:	80 e0       	ldi	r24, 0x00	; 0
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	a0 e7       	ldi	r26, 0x70	; 112
    5870:	b1 e4       	ldi	r27, 0x41	; 65
    5872:	8d 8b       	std	Y+21, r24	; 0x15
    5874:	9e 8b       	std	Y+22, r25	; 0x16
    5876:	af 8b       	std	Y+23, r26	; 0x17
    5878:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    587a:	6d 89       	ldd	r22, Y+21	; 0x15
    587c:	7e 89       	ldd	r23, Y+22	; 0x16
    587e:	8f 89       	ldd	r24, Y+23	; 0x17
    5880:	98 8d       	ldd	r25, Y+24	; 0x18
    5882:	2b ea       	ldi	r18, 0xAB	; 171
    5884:	3a ea       	ldi	r19, 0xAA	; 170
    5886:	4a e2       	ldi	r20, 0x2A	; 42
    5888:	50 e4       	ldi	r21, 0x40	; 64
    588a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    588e:	dc 01       	movw	r26, r24
    5890:	cb 01       	movw	r24, r22
    5892:	89 8b       	std	Y+17, r24	; 0x11
    5894:	9a 8b       	std	Y+18, r25	; 0x12
    5896:	ab 8b       	std	Y+19, r26	; 0x13
    5898:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    589a:	69 89       	ldd	r22, Y+17	; 0x11
    589c:	7a 89       	ldd	r23, Y+18	; 0x12
    589e:	8b 89       	ldd	r24, Y+19	; 0x13
    58a0:	9c 89       	ldd	r25, Y+20	; 0x14
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	40 e8       	ldi	r20, 0x80	; 128
    58a8:	5f e3       	ldi	r21, 0x3F	; 63
    58aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58ae:	88 23       	and	r24, r24
    58b0:	1c f4       	brge	.+6      	; 0x58b8 <ultra_triger+0x7a>
		__ticks = 1;
    58b2:	81 e0       	ldi	r24, 0x01	; 1
    58b4:	88 8b       	std	Y+16, r24	; 0x10
    58b6:	91 c0       	rjmp	.+290    	; 0x59da <ultra_triger+0x19c>
	else if (__tmp > 255)
    58b8:	69 89       	ldd	r22, Y+17	; 0x11
    58ba:	7a 89       	ldd	r23, Y+18	; 0x12
    58bc:	8b 89       	ldd	r24, Y+19	; 0x13
    58be:	9c 89       	ldd	r25, Y+20	; 0x14
    58c0:	20 e0       	ldi	r18, 0x00	; 0
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	4f e7       	ldi	r20, 0x7F	; 127
    58c6:	53 e4       	ldi	r21, 0x43	; 67
    58c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58cc:	18 16       	cp	r1, r24
    58ce:	0c f0       	brlt	.+2      	; 0x58d2 <ultra_triger+0x94>
    58d0:	7b c0       	rjmp	.+246    	; 0x59c8 <ultra_triger+0x18a>
	{
		_delay_ms(__us / 1000.0);
    58d2:	6d 89       	ldd	r22, Y+21	; 0x15
    58d4:	7e 89       	ldd	r23, Y+22	; 0x16
    58d6:	8f 89       	ldd	r24, Y+23	; 0x17
    58d8:	98 8d       	ldd	r25, Y+24	; 0x18
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	4a e7       	ldi	r20, 0x7A	; 122
    58e0:	54 e4       	ldi	r21, 0x44	; 68
    58e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    58e6:	dc 01       	movw	r26, r24
    58e8:	cb 01       	movw	r24, r22
    58ea:	8c 87       	std	Y+12, r24	; 0x0c
    58ec:	9d 87       	std	Y+13, r25	; 0x0d
    58ee:	ae 87       	std	Y+14, r26	; 0x0e
    58f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    58f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    58f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    58f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    58fa:	20 e0       	ldi	r18, 0x00	; 0
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	4a ef       	ldi	r20, 0xFA	; 250
    5900:	54 e4       	ldi	r21, 0x44	; 68
    5902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5906:	dc 01       	movw	r26, r24
    5908:	cb 01       	movw	r24, r22
    590a:	88 87       	std	Y+8, r24	; 0x08
    590c:	99 87       	std	Y+9, r25	; 0x09
    590e:	aa 87       	std	Y+10, r26	; 0x0a
    5910:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5912:	68 85       	ldd	r22, Y+8	; 0x08
    5914:	79 85       	ldd	r23, Y+9	; 0x09
    5916:	8a 85       	ldd	r24, Y+10	; 0x0a
    5918:	9b 85       	ldd	r25, Y+11	; 0x0b
    591a:	20 e0       	ldi	r18, 0x00	; 0
    591c:	30 e0       	ldi	r19, 0x00	; 0
    591e:	40 e8       	ldi	r20, 0x80	; 128
    5920:	5f e3       	ldi	r21, 0x3F	; 63
    5922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5926:	88 23       	and	r24, r24
    5928:	2c f4       	brge	.+10     	; 0x5934 <ultra_triger+0xf6>
		__ticks = 1;
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	9f 83       	std	Y+7, r25	; 0x07
    5930:	8e 83       	std	Y+6, r24	; 0x06
    5932:	3f c0       	rjmp	.+126    	; 0x59b2 <ultra_triger+0x174>
	else if (__tmp > 65535)
    5934:	68 85       	ldd	r22, Y+8	; 0x08
    5936:	79 85       	ldd	r23, Y+9	; 0x09
    5938:	8a 85       	ldd	r24, Y+10	; 0x0a
    593a:	9b 85       	ldd	r25, Y+11	; 0x0b
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	3f ef       	ldi	r19, 0xFF	; 255
    5940:	4f e7       	ldi	r20, 0x7F	; 127
    5942:	57 e4       	ldi	r21, 0x47	; 71
    5944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5948:	18 16       	cp	r1, r24
    594a:	4c f5       	brge	.+82     	; 0x599e <ultra_triger+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    594c:	6c 85       	ldd	r22, Y+12	; 0x0c
    594e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5950:	8e 85       	ldd	r24, Y+14	; 0x0e
    5952:	9f 85       	ldd	r25, Y+15	; 0x0f
    5954:	20 e0       	ldi	r18, 0x00	; 0
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	40 e2       	ldi	r20, 0x20	; 32
    595a:	51 e4       	ldi	r21, 0x41	; 65
    595c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5960:	dc 01       	movw	r26, r24
    5962:	cb 01       	movw	r24, r22
    5964:	bc 01       	movw	r22, r24
    5966:	cd 01       	movw	r24, r26
    5968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	9f 83       	std	Y+7, r25	; 0x07
    5972:	8e 83       	std	Y+6, r24	; 0x06
    5974:	0f c0       	rjmp	.+30     	; 0x5994 <ultra_triger+0x156>
    5976:	88 ec       	ldi	r24, 0xC8	; 200
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	9d 83       	std	Y+5, r25	; 0x05
    597c:	8c 83       	std	Y+4, r24	; 0x04
    597e:	8c 81       	ldd	r24, Y+4	; 0x04
    5980:	9d 81       	ldd	r25, Y+5	; 0x05
    5982:	01 97       	sbiw	r24, 0x01	; 1
    5984:	f1 f7       	brne	.-4      	; 0x5982 <ultra_triger+0x144>
    5986:	9d 83       	std	Y+5, r25	; 0x05
    5988:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    598a:	8e 81       	ldd	r24, Y+6	; 0x06
    598c:	9f 81       	ldd	r25, Y+7	; 0x07
    598e:	01 97       	sbiw	r24, 0x01	; 1
    5990:	9f 83       	std	Y+7, r25	; 0x07
    5992:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5994:	8e 81       	ldd	r24, Y+6	; 0x06
    5996:	9f 81       	ldd	r25, Y+7	; 0x07
    5998:	00 97       	sbiw	r24, 0x00	; 0
    599a:	69 f7       	brne	.-38     	; 0x5976 <ultra_triger+0x138>
    599c:	24 c0       	rjmp	.+72     	; 0x59e6 <ultra_triger+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    599e:	68 85       	ldd	r22, Y+8	; 0x08
    59a0:	79 85       	ldd	r23, Y+9	; 0x09
    59a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    59a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    59a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59aa:	dc 01       	movw	r26, r24
    59ac:	cb 01       	movw	r24, r22
    59ae:	9f 83       	std	Y+7, r25	; 0x07
    59b0:	8e 83       	std	Y+6, r24	; 0x06
    59b2:	8e 81       	ldd	r24, Y+6	; 0x06
    59b4:	9f 81       	ldd	r25, Y+7	; 0x07
    59b6:	9b 83       	std	Y+3, r25	; 0x03
    59b8:	8a 83       	std	Y+2, r24	; 0x02
    59ba:	8a 81       	ldd	r24, Y+2	; 0x02
    59bc:	9b 81       	ldd	r25, Y+3	; 0x03
    59be:	01 97       	sbiw	r24, 0x01	; 1
    59c0:	f1 f7       	brne	.-4      	; 0x59be <ultra_triger+0x180>
    59c2:	9b 83       	std	Y+3, r25	; 0x03
    59c4:	8a 83       	std	Y+2, r24	; 0x02
    59c6:	0f c0       	rjmp	.+30     	; 0x59e6 <ultra_triger+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    59c8:	69 89       	ldd	r22, Y+17	; 0x11
    59ca:	7a 89       	ldd	r23, Y+18	; 0x12
    59cc:	8b 89       	ldd	r24, Y+19	; 0x13
    59ce:	9c 89       	ldd	r25, Y+20	; 0x14
    59d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d4:	dc 01       	movw	r26, r24
    59d6:	cb 01       	movw	r24, r22
    59d8:	88 8b       	std	Y+16, r24	; 0x10
    59da:	88 89       	ldd	r24, Y+16	; 0x10
    59dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    59de:	89 81       	ldd	r24, Y+1	; 0x01
    59e0:	8a 95       	dec	r24
    59e2:	f1 f7       	brne	.-4      	; 0x59e0 <ultra_triger+0x1a2>
    59e4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(15);
    TRIGER_PORT&=~(1<<TRIGER);
    59e6:	a2 e3       	ldi	r26, 0x32	; 50
    59e8:	b0 e0       	ldi	r27, 0x00	; 0
    59ea:	e2 e3       	ldi	r30, 0x32	; 50
    59ec:	f0 e0       	ldi	r31, 0x00	; 0
    59ee:	80 81       	ld	r24, Z
    59f0:	8e 7f       	andi	r24, 0xFE	; 254
    59f2:	8c 93       	st	X, r24
    sensor_working=1;
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	80 93 ca 01 	sts	0x01CA, r24
  }
}
    59fa:	68 96       	adiw	r28, 0x18	; 24
    59fc:	0f b6       	in	r0, 0x3f	; 63
    59fe:	f8 94       	cli
    5a00:	de bf       	out	0x3e, r29	; 62
    5a02:	0f be       	out	0x3f, r0	; 63
    5a04:	cd bf       	out	0x3d, r28	; 61
    5a06:	cf 91       	pop	r28
    5a08:	df 91       	pop	r29
    5a0a:	08 95       	ret

00005a0c <enable_ex_interrupt>:

void enable_ex_interrupt(void){
    5a0c:	df 93       	push	r29
    5a0e:	cf 93       	push	r28
    5a10:	cd b7       	in	r28, 0x3d	; 61
    5a12:	de b7       	in	r29, 0x3e	; 62

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change.
    5a14:	a5 e5       	ldi	r26, 0x55	; 85
    5a16:	b0 e0       	ldi	r27, 0x00	; 0
    5a18:	e5 e5       	ldi	r30, 0x55	; 85
    5a1a:	f0 e0       	ldi	r31, 0x00	; 0
    5a1c:	80 81       	ld	r24, Z
    5a1e:	84 60       	ori	r24, 0x04	; 4
    5a20:	8c 93       	st	X, r24
  GICR  |= (1<<INT1);			// Enable INT1 interrupts.
    5a22:	ab e5       	ldi	r26, 0x5B	; 91
    5a24:	b0 e0       	ldi	r27, 0x00	; 0
    5a26:	eb e5       	ldi	r30, 0x5B	; 91
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	80 81       	ld	r24, Z
    5a2c:	80 68       	ori	r24, 0x80	; 128
    5a2e:	8c 93       	st	X, r24

  return;
}
    5a30:	cf 91       	pop	r28
    5a32:	df 91       	pop	r29
    5a34:	08 95       	ret

00005a36 <__vector_2>:


ISR(INT1_vect){
    5a36:	1f 92       	push	r1
    5a38:	0f 92       	push	r0
    5a3a:	0f b6       	in	r0, 0x3f	; 63
    5a3c:	0f 92       	push	r0
    5a3e:	11 24       	eor	r1, r1
    5a40:	2f 93       	push	r18
    5a42:	3f 93       	push	r19
    5a44:	4f 93       	push	r20
    5a46:	5f 93       	push	r21
    5a48:	6f 93       	push	r22
    5a4a:	7f 93       	push	r23
    5a4c:	8f 93       	push	r24
    5a4e:	9f 93       	push	r25
    5a50:	af 93       	push	r26
    5a52:	bf 93       	push	r27
    5a54:	ef 93       	push	r30
    5a56:	ff 93       	push	r31
    5a58:	df 93       	push	r29
    5a5a:	cf 93       	push	r28
    5a5c:	cd b7       	in	r28, 0x3d	; 61
    5a5e:	de b7       	in	r29, 0x3e	; 62
    5a60:	2e 97       	sbiw	r28, 0x0e	; 14
    5a62:	de bf       	out	0x3e, r29	; 62
    5a64:	cd bf       	out	0x3d, r28	; 61
  if(sensor_working==1){
    5a66:	80 91 ca 01 	lds	r24, 0x01CA
    5a6a:	81 30       	cpi	r24, 0x01	; 1
    5a6c:	09 f0       	breq	.+2      	; 0x5a70 <__vector_2+0x3a>
    5a6e:	dc c0       	rjmp	.+440    	; 0x5c28 <__vector_2+0x1f2>
    if(rising_edge==0){
    5a70:	80 91 cb 01 	lds	r24, 0x01CB
    5a74:	88 23       	and	r24, r24
    5a76:	79 f4       	brne	.+30     	; 0x5a96 <__vector_2+0x60>
      TCNT0=0x00;
    5a78:	e2 e5       	ldi	r30, 0x52	; 82
    5a7a:	f0 e0       	ldi	r31, 0x00	; 0
    5a7c:	10 82       	st	Z, r1
      rising_edge=1;
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	80 93 cb 01 	sts	0x01CB, r24
      timer_counter=0;
    5a84:	10 92 cc 01 	sts	0x01CC, r1
    5a88:	10 92 cd 01 	sts	0x01CD, r1
    5a8c:	10 92 ce 01 	sts	0x01CE, r1
    5a90:	10 92 cf 01 	sts	0x01CF, r1
    5a94:	c9 c0       	rjmp	.+402    	; 0x5c28 <__vector_2+0x1f2>
    }
  else{
    distance=(timer_counter*256+TCNT0)/150;
    5a96:	80 91 cc 01 	lds	r24, 0x01CC
    5a9a:	90 91 cd 01 	lds	r25, 0x01CD
    5a9e:	a0 91 ce 01 	lds	r26, 0x01CE
    5aa2:	b0 91 cf 01 	lds	r27, 0x01CF
    5aa6:	22 27       	eor	r18, r18
    5aa8:	38 2f       	mov	r19, r24
    5aaa:	49 2f       	mov	r20, r25
    5aac:	5a 2f       	mov	r21, r26
    5aae:	e2 e5       	ldi	r30, 0x52	; 82
    5ab0:	f0 e0       	ldi	r31, 0x00	; 0
    5ab2:	80 81       	ld	r24, Z
    5ab4:	88 2f       	mov	r24, r24
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	a0 e0       	ldi	r26, 0x00	; 0
    5aba:	b0 e0       	ldi	r27, 0x00	; 0
    5abc:	82 0f       	add	r24, r18
    5abe:	93 1f       	adc	r25, r19
    5ac0:	a4 1f       	adc	r26, r20
    5ac2:	b5 1f       	adc	r27, r21
    5ac4:	26 e9       	ldi	r18, 0x96	; 150
    5ac6:	30 e0       	ldi	r19, 0x00	; 0
    5ac8:	40 e0       	ldi	r20, 0x00	; 0
    5aca:	50 e0       	ldi	r21, 0x00	; 0
    5acc:	bc 01       	movw	r22, r24
    5ace:	cd 01       	movw	r24, r26
    5ad0:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__udivmodsi4>
    5ad4:	da 01       	movw	r26, r20
    5ad6:	c9 01       	movw	r24, r18
    5ad8:	80 93 d0 01 	sts	0x01D0, r24
    5adc:	90 93 d1 01 	sts	0x01D1, r25
    5ae0:	a0 93 d2 01 	sts	0x01D2, r26
    5ae4:	b0 93 d3 01 	sts	0x01D3, r27
    LCD_void4bitGoToPos(2,1);
    5ae8:	82 e0       	ldi	r24, 0x02	; 2
    5aea:	61 e0       	ldi	r22, 0x01	; 1
    5aec:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <LCD_void4bitGoToPos>
  	itoa(distance,distance_str,10);
    5af0:	80 91 d0 01 	lds	r24, 0x01D0
    5af4:	90 91 d1 01 	lds	r25, 0x01D1
    5af8:	a0 91 d2 01 	lds	r26, 0x01D2
    5afc:	b0 91 d3 01 	lds	r27, 0x01D3
    5b00:	24 ed       	ldi	r18, 0xD4	; 212
    5b02:	31 e0       	ldi	r19, 0x01	; 1
    5b04:	b9 01       	movw	r22, r18
    5b06:	4a e0       	ldi	r20, 0x0A	; 10
    5b08:	50 e0       	ldi	r21, 0x00	; 0
    5b0a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <itoa>
  	strcat(distance_str, " cm-");
    5b0e:	84 ed       	ldi	r24, 0xD4	; 212
    5b10:	91 e0       	ldi	r25, 0x01	; 1
    5b12:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <strlen>
    5b16:	8c 52       	subi	r24, 0x2C	; 44
    5b18:	9e 4f       	sbci	r25, 0xFE	; 254
    5b1a:	2e e6       	ldi	r18, 0x6E	; 110
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	b9 01       	movw	r22, r18
    5b20:	45 e0       	ldi	r20, 0x05	; 5
    5b22:	50 e0       	ldi	r21, 0x00	; 0
    5b24:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <memcpy>
  	LCD_voidSend_4bitString(distance_str);
    5b28:	84 ed       	ldi	r24, 0xD4	; 212
    5b2a:	91 e0       	ldi	r25, 0x01	; 1
    5b2c:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <LCD_voidSend_4bitString>
    5b30:	80 e0       	ldi	r24, 0x00	; 0
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	a0 e2       	ldi	r26, 0x20	; 32
    5b36:	b2 e4       	ldi	r27, 0x42	; 66
    5b38:	8b 87       	std	Y+11, r24	; 0x0b
    5b3a:	9c 87       	std	Y+12, r25	; 0x0c
    5b3c:	ad 87       	std	Y+13, r26	; 0x0d
    5b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b48:	20 e0       	ldi	r18, 0x00	; 0
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	4a ef       	ldi	r20, 0xFA	; 250
    5b4e:	54 e4       	ldi	r21, 0x44	; 68
    5b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b54:	dc 01       	movw	r26, r24
    5b56:	cb 01       	movw	r24, r22
    5b58:	8f 83       	std	Y+7, r24	; 0x07
    5b5a:	98 87       	std	Y+8, r25	; 0x08
    5b5c:	a9 87       	std	Y+9, r26	; 0x09
    5b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b60:	6f 81       	ldd	r22, Y+7	; 0x07
    5b62:	78 85       	ldd	r23, Y+8	; 0x08
    5b64:	89 85       	ldd	r24, Y+9	; 0x09
    5b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b68:	20 e0       	ldi	r18, 0x00	; 0
    5b6a:	30 e0       	ldi	r19, 0x00	; 0
    5b6c:	40 e8       	ldi	r20, 0x80	; 128
    5b6e:	5f e3       	ldi	r21, 0x3F	; 63
    5b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b74:	88 23       	and	r24, r24
    5b76:	2c f4       	brge	.+10     	; 0x5b82 <__vector_2+0x14c>
		__ticks = 1;
    5b78:	81 e0       	ldi	r24, 0x01	; 1
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	9e 83       	std	Y+6, r25	; 0x06
    5b7e:	8d 83       	std	Y+5, r24	; 0x05
    5b80:	3f c0       	rjmp	.+126    	; 0x5c00 <__vector_2+0x1ca>
	else if (__tmp > 65535)
    5b82:	6f 81       	ldd	r22, Y+7	; 0x07
    5b84:	78 85       	ldd	r23, Y+8	; 0x08
    5b86:	89 85       	ldd	r24, Y+9	; 0x09
    5b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	3f ef       	ldi	r19, 0xFF	; 255
    5b8e:	4f e7       	ldi	r20, 0x7F	; 127
    5b90:	57 e4       	ldi	r21, 0x47	; 71
    5b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b96:	18 16       	cp	r1, r24
    5b98:	4c f5       	brge	.+82     	; 0x5bec <__vector_2+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ba2:	20 e0       	ldi	r18, 0x00	; 0
    5ba4:	30 e0       	ldi	r19, 0x00	; 0
    5ba6:	40 e2       	ldi	r20, 0x20	; 32
    5ba8:	51 e4       	ldi	r21, 0x41	; 65
    5baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bae:	dc 01       	movw	r26, r24
    5bb0:	cb 01       	movw	r24, r22
    5bb2:	bc 01       	movw	r22, r24
    5bb4:	cd 01       	movw	r24, r26
    5bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bba:	dc 01       	movw	r26, r24
    5bbc:	cb 01       	movw	r24, r22
    5bbe:	9e 83       	std	Y+6, r25	; 0x06
    5bc0:	8d 83       	std	Y+5, r24	; 0x05
    5bc2:	0f c0       	rjmp	.+30     	; 0x5be2 <__vector_2+0x1ac>
    5bc4:	88 ec       	ldi	r24, 0xC8	; 200
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
    5bc8:	9c 83       	std	Y+4, r25	; 0x04
    5bca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    5bce:	9c 81       	ldd	r25, Y+4	; 0x04
    5bd0:	01 97       	sbiw	r24, 0x01	; 1
    5bd2:	f1 f7       	brne	.-4      	; 0x5bd0 <__vector_2+0x19a>
    5bd4:	9c 83       	std	Y+4, r25	; 0x04
    5bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    5bda:	9e 81       	ldd	r25, Y+6	; 0x06
    5bdc:	01 97       	sbiw	r24, 0x01	; 1
    5bde:	9e 83       	std	Y+6, r25	; 0x06
    5be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5be2:	8d 81       	ldd	r24, Y+5	; 0x05
    5be4:	9e 81       	ldd	r25, Y+6	; 0x06
    5be6:	00 97       	sbiw	r24, 0x00	; 0
    5be8:	69 f7       	brne	.-38     	; 0x5bc4 <__vector_2+0x18e>
    5bea:	14 c0       	rjmp	.+40     	; 0x5c14 <__vector_2+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bec:	6f 81       	ldd	r22, Y+7	; 0x07
    5bee:	78 85       	ldd	r23, Y+8	; 0x08
    5bf0:	89 85       	ldd	r24, Y+9	; 0x09
    5bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bf8:	dc 01       	movw	r26, r24
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	9e 83       	std	Y+6, r25	; 0x06
    5bfe:	8d 83       	std	Y+5, r24	; 0x05
    5c00:	8d 81       	ldd	r24, Y+5	; 0x05
    5c02:	9e 81       	ldd	r25, Y+6	; 0x06
    5c04:	9a 83       	std	Y+2, r25	; 0x02
    5c06:	89 83       	std	Y+1, r24	; 0x01
    5c08:	89 81       	ldd	r24, Y+1	; 0x01
    5c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c0c:	01 97       	sbiw	r24, 0x01	; 1
    5c0e:	f1 f7       	brne	.-4      	; 0x5c0c <__vector_2+0x1d6>
    5c10:	9a 83       	std	Y+2, r25	; 0x02
    5c12:	89 83       	std	Y+1, r24	; 0x01
  	_delay_ms(40);
    timer_counter=0;
    5c14:	10 92 cc 01 	sts	0x01CC, r1
    5c18:	10 92 cd 01 	sts	0x01CD, r1
    5c1c:	10 92 ce 01 	sts	0x01CE, r1
    5c20:	10 92 cf 01 	sts	0x01CF, r1
    rising_edge=0;
    5c24:	10 92 cb 01 	sts	0x01CB, r1
  }
}}
    5c28:	2e 96       	adiw	r28, 0x0e	; 14
    5c2a:	de bf       	out	0x3e, r29	; 62
    5c2c:	cd bf       	out	0x3d, r28	; 61
    5c2e:	cf 91       	pop	r28
    5c30:	df 91       	pop	r29
    5c32:	ff 91       	pop	r31
    5c34:	ef 91       	pop	r30
    5c36:	bf 91       	pop	r27
    5c38:	af 91       	pop	r26
    5c3a:	9f 91       	pop	r25
    5c3c:	8f 91       	pop	r24
    5c3e:	7f 91       	pop	r23
    5c40:	6f 91       	pop	r22
    5c42:	5f 91       	pop	r21
    5c44:	4f 91       	pop	r20
    5c46:	3f 91       	pop	r19
    5c48:	2f 91       	pop	r18
    5c4a:	0f 90       	pop	r0
    5c4c:	0f be       	out	0x3f, r0	; 63
    5c4e:	0f 90       	pop	r0
    5c50:	1f 90       	pop	r1
    5c52:	18 95       	reti

00005c54 <__vector_11>:

ISR(TIMER0_OVF_vect){
    5c54:	1f 92       	push	r1
    5c56:	0f 92       	push	r0
    5c58:	0f b6       	in	r0, 0x3f	; 63
    5c5a:	0f 92       	push	r0
    5c5c:	11 24       	eor	r1, r1
    5c5e:	2f 93       	push	r18
    5c60:	8f 93       	push	r24
    5c62:	9f 93       	push	r25
    5c64:	af 93       	push	r26
    5c66:	bf 93       	push	r27
    5c68:	ef 93       	push	r30
    5c6a:	ff 93       	push	r31
    5c6c:	df 93       	push	r29
    5c6e:	cf 93       	push	r28
    5c70:	cd b7       	in	r28, 0x3d	; 61
    5c72:	de b7       	in	r29, 0x3e	; 62
    timer_counter++;
    5c74:	80 91 cc 01 	lds	r24, 0x01CC
    5c78:	90 91 cd 01 	lds	r25, 0x01CD
    5c7c:	a0 91 ce 01 	lds	r26, 0x01CE
    5c80:	b0 91 cf 01 	lds	r27, 0x01CF
    5c84:	01 96       	adiw	r24, 0x01	; 1
    5c86:	a1 1d       	adc	r26, r1
    5c88:	b1 1d       	adc	r27, r1
    5c8a:	80 93 cc 01 	sts	0x01CC, r24
    5c8e:	90 93 cd 01 	sts	0x01CD, r25
    5c92:	a0 93 ce 01 	sts	0x01CE, r26
    5c96:	b0 93 cf 01 	sts	0x01CF, r27
    if(timer_counter >730){
    5c9a:	80 91 cc 01 	lds	r24, 0x01CC
    5c9e:	90 91 cd 01 	lds	r25, 0x01CD
    5ca2:	a0 91 ce 01 	lds	r26, 0x01CE
    5ca6:	b0 91 cf 01 	lds	r27, 0x01CF
    5caa:	8b 3d       	cpi	r24, 0xDB	; 219
    5cac:	22 e0       	ldi	r18, 0x02	; 2
    5cae:	92 07       	cpc	r25, r18
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	a2 07       	cpc	r26, r18
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	b2 07       	cpc	r27, r18
    5cb8:	78 f0       	brcs	.+30     	; 0x5cd8 <__vector_11+0x84>
      TCNT0=0x00;
    5cba:	e2 e5       	ldi	r30, 0x52	; 82
    5cbc:	f0 e0       	ldi	r31, 0x00	; 0
    5cbe:	10 82       	st	Z, r1
      sensor_working=0;
    5cc0:	10 92 ca 01 	sts	0x01CA, r1
      rising_edge=0;
    5cc4:	10 92 cb 01 	sts	0x01CB, r1
      timer_counter=0;
    5cc8:	10 92 cc 01 	sts	0x01CC, r1
    5ccc:	10 92 cd 01 	sts	0x01CD, r1
    5cd0:	10 92 ce 01 	sts	0x01CE, r1
    5cd4:	10 92 cf 01 	sts	0x01CF, r1
    }
}
    5cd8:	cf 91       	pop	r28
    5cda:	df 91       	pop	r29
    5cdc:	ff 91       	pop	r31
    5cde:	ef 91       	pop	r30
    5ce0:	bf 91       	pop	r27
    5ce2:	af 91       	pop	r26
    5ce4:	9f 91       	pop	r25
    5ce6:	8f 91       	pop	r24
    5ce8:	2f 91       	pop	r18
    5cea:	0f 90       	pop	r0
    5cec:	0f be       	out	0x3f, r0	; 63
    5cee:	0f 90       	pop	r0
    5cf0:	1f 90       	pop	r1
    5cf2:	18 95       	reti

00005cf4 <__mulsi3>:
    5cf4:	62 9f       	mul	r22, r18
    5cf6:	d0 01       	movw	r26, r0
    5cf8:	73 9f       	mul	r23, r19
    5cfa:	f0 01       	movw	r30, r0
    5cfc:	82 9f       	mul	r24, r18
    5cfe:	e0 0d       	add	r30, r0
    5d00:	f1 1d       	adc	r31, r1
    5d02:	64 9f       	mul	r22, r20
    5d04:	e0 0d       	add	r30, r0
    5d06:	f1 1d       	adc	r31, r1
    5d08:	92 9f       	mul	r25, r18
    5d0a:	f0 0d       	add	r31, r0
    5d0c:	83 9f       	mul	r24, r19
    5d0e:	f0 0d       	add	r31, r0
    5d10:	74 9f       	mul	r23, r20
    5d12:	f0 0d       	add	r31, r0
    5d14:	65 9f       	mul	r22, r21
    5d16:	f0 0d       	add	r31, r0
    5d18:	99 27       	eor	r25, r25
    5d1a:	72 9f       	mul	r23, r18
    5d1c:	b0 0d       	add	r27, r0
    5d1e:	e1 1d       	adc	r30, r1
    5d20:	f9 1f       	adc	r31, r25
    5d22:	63 9f       	mul	r22, r19
    5d24:	b0 0d       	add	r27, r0
    5d26:	e1 1d       	adc	r30, r1
    5d28:	f9 1f       	adc	r31, r25
    5d2a:	bd 01       	movw	r22, r26
    5d2c:	cf 01       	movw	r24, r30
    5d2e:	11 24       	eor	r1, r1
    5d30:	08 95       	ret

00005d32 <__udivmodsi4>:
    5d32:	a1 e2       	ldi	r26, 0x21	; 33
    5d34:	1a 2e       	mov	r1, r26
    5d36:	aa 1b       	sub	r26, r26
    5d38:	bb 1b       	sub	r27, r27
    5d3a:	fd 01       	movw	r30, r26
    5d3c:	0d c0       	rjmp	.+26     	; 0x5d58 <__udivmodsi4_ep>

00005d3e <__udivmodsi4_loop>:
    5d3e:	aa 1f       	adc	r26, r26
    5d40:	bb 1f       	adc	r27, r27
    5d42:	ee 1f       	adc	r30, r30
    5d44:	ff 1f       	adc	r31, r31
    5d46:	a2 17       	cp	r26, r18
    5d48:	b3 07       	cpc	r27, r19
    5d4a:	e4 07       	cpc	r30, r20
    5d4c:	f5 07       	cpc	r31, r21
    5d4e:	20 f0       	brcs	.+8      	; 0x5d58 <__udivmodsi4_ep>
    5d50:	a2 1b       	sub	r26, r18
    5d52:	b3 0b       	sbc	r27, r19
    5d54:	e4 0b       	sbc	r30, r20
    5d56:	f5 0b       	sbc	r31, r21

00005d58 <__udivmodsi4_ep>:
    5d58:	66 1f       	adc	r22, r22
    5d5a:	77 1f       	adc	r23, r23
    5d5c:	88 1f       	adc	r24, r24
    5d5e:	99 1f       	adc	r25, r25
    5d60:	1a 94       	dec	r1
    5d62:	69 f7       	brne	.-38     	; 0x5d3e <__udivmodsi4_loop>
    5d64:	60 95       	com	r22
    5d66:	70 95       	com	r23
    5d68:	80 95       	com	r24
    5d6a:	90 95       	com	r25
    5d6c:	9b 01       	movw	r18, r22
    5d6e:	ac 01       	movw	r20, r24
    5d70:	bd 01       	movw	r22, r26
    5d72:	cf 01       	movw	r24, r30
    5d74:	08 95       	ret

00005d76 <__prologue_saves__>:
    5d76:	2f 92       	push	r2
    5d78:	3f 92       	push	r3
    5d7a:	4f 92       	push	r4
    5d7c:	5f 92       	push	r5
    5d7e:	6f 92       	push	r6
    5d80:	7f 92       	push	r7
    5d82:	8f 92       	push	r8
    5d84:	9f 92       	push	r9
    5d86:	af 92       	push	r10
    5d88:	bf 92       	push	r11
    5d8a:	cf 92       	push	r12
    5d8c:	df 92       	push	r13
    5d8e:	ef 92       	push	r14
    5d90:	ff 92       	push	r15
    5d92:	0f 93       	push	r16
    5d94:	1f 93       	push	r17
    5d96:	cf 93       	push	r28
    5d98:	df 93       	push	r29
    5d9a:	cd b7       	in	r28, 0x3d	; 61
    5d9c:	de b7       	in	r29, 0x3e	; 62
    5d9e:	ca 1b       	sub	r28, r26
    5da0:	db 0b       	sbc	r29, r27
    5da2:	0f b6       	in	r0, 0x3f	; 63
    5da4:	f8 94       	cli
    5da6:	de bf       	out	0x3e, r29	; 62
    5da8:	0f be       	out	0x3f, r0	; 63
    5daa:	cd bf       	out	0x3d, r28	; 61
    5dac:	09 94       	ijmp

00005dae <__epilogue_restores__>:
    5dae:	2a 88       	ldd	r2, Y+18	; 0x12
    5db0:	39 88       	ldd	r3, Y+17	; 0x11
    5db2:	48 88       	ldd	r4, Y+16	; 0x10
    5db4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5db6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5db8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5dba:	8c 84       	ldd	r8, Y+12	; 0x0c
    5dbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    5dbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    5dc0:	b9 84       	ldd	r11, Y+9	; 0x09
    5dc2:	c8 84       	ldd	r12, Y+8	; 0x08
    5dc4:	df 80       	ldd	r13, Y+7	; 0x07
    5dc6:	ee 80       	ldd	r14, Y+6	; 0x06
    5dc8:	fd 80       	ldd	r15, Y+5	; 0x05
    5dca:	0c 81       	ldd	r16, Y+4	; 0x04
    5dcc:	1b 81       	ldd	r17, Y+3	; 0x03
    5dce:	aa 81       	ldd	r26, Y+2	; 0x02
    5dd0:	b9 81       	ldd	r27, Y+1	; 0x01
    5dd2:	ce 0f       	add	r28, r30
    5dd4:	d1 1d       	adc	r29, r1
    5dd6:	0f b6       	in	r0, 0x3f	; 63
    5dd8:	f8 94       	cli
    5dda:	de bf       	out	0x3e, r29	; 62
    5ddc:	0f be       	out	0x3f, r0	; 63
    5dde:	cd bf       	out	0x3d, r28	; 61
    5de0:	ed 01       	movw	r28, r26
    5de2:	08 95       	ret

00005de4 <memcpy>:
    5de4:	fb 01       	movw	r30, r22
    5de6:	dc 01       	movw	r26, r24
    5de8:	02 c0       	rjmp	.+4      	; 0x5dee <memcpy+0xa>
    5dea:	01 90       	ld	r0, Z+
    5dec:	0d 92       	st	X+, r0
    5dee:	41 50       	subi	r20, 0x01	; 1
    5df0:	50 40       	sbci	r21, 0x00	; 0
    5df2:	d8 f7       	brcc	.-10     	; 0x5dea <memcpy+0x6>
    5df4:	08 95       	ret

00005df6 <strlen>:
    5df6:	fc 01       	movw	r30, r24
    5df8:	01 90       	ld	r0, Z+
    5dfa:	00 20       	and	r0, r0
    5dfc:	e9 f7       	brne	.-6      	; 0x5df8 <strlen+0x2>
    5dfe:	80 95       	com	r24
    5e00:	90 95       	com	r25
    5e02:	8e 0f       	add	r24, r30
    5e04:	9f 1f       	adc	r25, r31
    5e06:	08 95       	ret

00005e08 <itoa>:
    5e08:	fb 01       	movw	r30, r22
    5e0a:	9f 01       	movw	r18, r30
    5e0c:	e8 94       	clt
    5e0e:	42 30       	cpi	r20, 0x02	; 2
    5e10:	c4 f0       	brlt	.+48     	; 0x5e42 <itoa+0x3a>
    5e12:	45 32       	cpi	r20, 0x25	; 37
    5e14:	b4 f4       	brge	.+44     	; 0x5e42 <itoa+0x3a>
    5e16:	4a 30       	cpi	r20, 0x0A	; 10
    5e18:	29 f4       	brne	.+10     	; 0x5e24 <itoa+0x1c>
    5e1a:	97 fb       	bst	r25, 7
    5e1c:	1e f4       	brtc	.+6      	; 0x5e24 <itoa+0x1c>
    5e1e:	90 95       	com	r25
    5e20:	81 95       	neg	r24
    5e22:	9f 4f       	sbci	r25, 0xFF	; 255
    5e24:	64 2f       	mov	r22, r20
    5e26:	77 27       	eor	r23, r23
    5e28:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__udivmodhi4>
    5e2c:	80 5d       	subi	r24, 0xD0	; 208
    5e2e:	8a 33       	cpi	r24, 0x3A	; 58
    5e30:	0c f0       	brlt	.+2      	; 0x5e34 <itoa+0x2c>
    5e32:	89 5d       	subi	r24, 0xD9	; 217
    5e34:	81 93       	st	Z+, r24
    5e36:	cb 01       	movw	r24, r22
    5e38:	00 97       	sbiw	r24, 0x00	; 0
    5e3a:	a1 f7       	brne	.-24     	; 0x5e24 <itoa+0x1c>
    5e3c:	16 f4       	brtc	.+4      	; 0x5e42 <itoa+0x3a>
    5e3e:	5d e2       	ldi	r21, 0x2D	; 45
    5e40:	51 93       	st	Z+, r21
    5e42:	10 82       	st	Z, r1
    5e44:	c9 01       	movw	r24, r18
    5e46:	0c 94 25 2f 	jmp	0x5e4a	; 0x5e4a <strrev>

00005e4a <strrev>:
    5e4a:	dc 01       	movw	r26, r24
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	67 2f       	mov	r22, r23
    5e50:	71 91       	ld	r23, Z+
    5e52:	77 23       	and	r23, r23
    5e54:	e1 f7       	brne	.-8      	; 0x5e4e <strrev+0x4>
    5e56:	32 97       	sbiw	r30, 0x02	; 2
    5e58:	04 c0       	rjmp	.+8      	; 0x5e62 <strrev+0x18>
    5e5a:	7c 91       	ld	r23, X
    5e5c:	6d 93       	st	X+, r22
    5e5e:	70 83       	st	Z, r23
    5e60:	62 91       	ld	r22, -Z
    5e62:	ae 17       	cp	r26, r30
    5e64:	bf 07       	cpc	r27, r31
    5e66:	c8 f3       	brcs	.-14     	; 0x5e5a <strrev+0x10>
    5e68:	08 95       	ret

00005e6a <__udivmodhi4>:
    5e6a:	aa 1b       	sub	r26, r26
    5e6c:	bb 1b       	sub	r27, r27
    5e6e:	51 e1       	ldi	r21, 0x11	; 17
    5e70:	07 c0       	rjmp	.+14     	; 0x5e80 <__udivmodhi4_ep>

00005e72 <__udivmodhi4_loop>:
    5e72:	aa 1f       	adc	r26, r26
    5e74:	bb 1f       	adc	r27, r27
    5e76:	a6 17       	cp	r26, r22
    5e78:	b7 07       	cpc	r27, r23
    5e7a:	10 f0       	brcs	.+4      	; 0x5e80 <__udivmodhi4_ep>
    5e7c:	a6 1b       	sub	r26, r22
    5e7e:	b7 0b       	sbc	r27, r23

00005e80 <__udivmodhi4_ep>:
    5e80:	88 1f       	adc	r24, r24
    5e82:	99 1f       	adc	r25, r25
    5e84:	5a 95       	dec	r21
    5e86:	a9 f7       	brne	.-22     	; 0x5e72 <__udivmodhi4_loop>
    5e88:	80 95       	com	r24
    5e8a:	90 95       	com	r25
    5e8c:	bc 01       	movw	r22, r24
    5e8e:	cd 01       	movw	r24, r26
    5e90:	08 95       	ret

00005e92 <_exit>:
    5e92:	f8 94       	cli

00005e94 <__stop_program>:
    5e94:	ff cf       	rjmp	.-2      	; 0x5e94 <__stop_program>
